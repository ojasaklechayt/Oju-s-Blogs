{"ast":null,"code":"import PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const {\n    prototype = {}\n  } = elementType;\n  return Boolean(prototype.isReactComponent);\n}\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  const element = props[propName];\n  const safePropName = propFullName || propName;\n  if (element == null ||\n  // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n  let warningHint;\n  const elementType = element.type;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n  if (warningHint !== undefined) {\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n  return null;\n}\nconst elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;","map":{"version":3,"names":["PropTypes","chainPropTypes","isClassComponent","elementType","prototype","Boolean","isReactComponent","acceptingRef","props","propName","componentName","location","propFullName","element","safePropName","window","warningHint","type","undefined","Error","elementAcceptingRef","isRequired"],"sources":["D:/open_source/hacktobarfest/Oju-s-Blogs/Frontend/frontend/node_modules/@mui/styles/node_modules/@mui/utils/esm/elementAcceptingRef.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport chainPropTypes from './chainPropTypes';\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const {\n    prototype = {}\n  } = elementType;\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  const element = props[propName];\n  const safePropName = propFullName || propName;\n\n  if (element == null || // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n\n  let warningHint;\n  const elementType = element.type;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n\n  return null;\n}\n\nconst elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,gBAAgBA,CAACC,WAAW,EAAE;EACrC;EACA,MAAM;IACJC,SAAS,GAAG,CAAC;EACf,CAAC,GAAGD,WAAW;EACf,OAAOE,OAAO,CAACD,SAAS,CAACE,gBAAgB,CAAC;AAC5C;AAEA,SAASC,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,YAAY,EAAE;EAC5E,MAAMC,OAAO,GAAGL,KAAK,CAACC,QAAQ,CAAC;EAC/B,MAAMK,YAAY,GAAGF,YAAY,IAAIH,QAAQ;EAE7C,IAAII,OAAO,IAAI,IAAI;EAAI;EACvB;EACA;EACA;EACA,OAAOE,MAAM,KAAK,WAAW,EAAE;IAC7B,OAAO,IAAI;EACb;EAEA,IAAIC,WAAW;EACf,MAAMb,WAAW,GAAGU,OAAO,CAACI,IAAI;EAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,IAAI,OAAOd,WAAW,KAAK,UAAU,IAAI,CAACD,gBAAgB,CAACC,WAAW,CAAC,EAAE;IACvEa,WAAW,GAAG,6EAA6E;EAC7F;EAEA,IAAIA,WAAW,KAAKE,SAAS,EAAE;IAC7B,OAAO,IAAIC,KAAK,CAAE,WAAUR,QAAS,MAAKG,YAAa,oBAAmBJ,aAAc,MAAK,GAAI,4CAA2CM,WAAY,GAAE,GAAG,mEAAmE,CAAC;EACnO;EAEA,OAAO,IAAI;AACb;AAEA,MAAMI,mBAAmB,GAAGnB,cAAc,CAACD,SAAS,CAACa,OAAO,EAAEN,YAAY,CAAC;AAC3Ea,mBAAmB,CAACC,UAAU,GAAGpB,cAAc,CAACD,SAAS,CAACa,OAAO,CAACQ,UAAU,EAAEd,YAAY,CAAC;AAC3F,eAAea,mBAAmB"},"metadata":{},"sourceType":"module"}