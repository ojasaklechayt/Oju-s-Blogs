{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function (obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function (a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\n    var prop = _c[_i];\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = function (a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __async = function (__this, __arguments, generator) {\n  return new Promise(function (resolve, reject) {\n    var fulfilled = function (value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = function (value) {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = function (x) {\n      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    };\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n// src/index.ts\nimport { enableES5 } from \"immer\";\nexport * from \"redux\";\nimport { default as default2, current as current2, freeze, original, isDraft as isDraft4 } from \"immer\";\nimport { createSelector as createSelector2 } from \"reselect\";\n// src/createDraftSafeSelector.ts\nimport { current, isDraft } from \"immer\";\nimport { createSelector } from \"reselect\";\nvar createDraftSafeSelector = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var selector = createSelector.apply(void 0, args);\n  var wrappedSelector = function (value) {\n    var rest = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n    return selector.apply(void 0, __spreadArray([isDraft(value) ? current(value) : value], rest));\n  };\n  return wrappedSelector;\n};\n// src/configureStore.ts\nimport { createStore, compose as compose2, applyMiddleware, combineReducers } from \"redux\";\n// src/devtoolsExtension.ts\nimport { compose } from \"redux\";\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\n  if (arguments.length === 0) return void 0;\n  if (typeof arguments[0] === \"object\") return compose;\n  return compose.apply(null, arguments);\n};\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {\n  return function (noop2) {\n    return noop2;\n  };\n};\n// src/isPlainObject.ts\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) return false;\n  var proto = Object.getPrototypeOf(value);\n  if (proto === null) return true;\n  var baseProto = proto;\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n  return proto === baseProto;\n}\n// src/getDefaultMiddleware.ts\nimport thunkMiddleware from \"redux-thunk\";\n// src/utils.ts\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function (fn) {\n      var started = Date.now();\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function () {\n      if (elapsed > maxDelay) {\n        console.warn(fnName + \" took \" + elapsed + \"ms, which is more than the warning threshold of \" + maxDelay + \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\");\n      }\n    }\n  };\n}\nvar MiddlewareArray = /** @class */function (_super) {\n  __extends(MiddlewareArray, _super);\n  function MiddlewareArray() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var _this = _super.apply(this, args) || this;\n    Object.setPrototypeOf(_this, MiddlewareArray.prototype);\n    return _this;\n  }\n  Object.defineProperty(MiddlewareArray, Symbol.species, {\n    get: function () {\n      return MiddlewareArray;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MiddlewareArray.prototype.concat = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    return _super.prototype.concat.apply(this, arr);\n  };\n  MiddlewareArray.prototype.prepend = function () {\n    var arr = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      arr[_i] = arguments[_i];\n    }\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();\n    }\n    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();\n  };\n  return MiddlewareArray;\n}(Array);\n// src/immutableStateInvariantMiddleware.ts\nvar isProduction = process.env.NODE_ENV === \"production\";\nvar prefix = \"Invariant failed\";\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  if (isProduction) {\n    throw new Error(prefix);\n  }\n  throw new Error(prefix + \": \" + (message || \"\"));\n}\nfunction stringify(obj, serializer, indent, decycler) {\n  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n}\nfunction getSerialize(serializer, decycler) {\n  var stack = [],\n    keys = [];\n  if (!decycler) decycler = function (_, value) {\n    if (stack[0] === value) return \"[Circular ~]\";\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n  };\n  return function (key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n    } else stack.push(value);\n    return serializer == null ? value : serializer.call(this, key, value);\n  };\n}\nfunction isImmutableDefault(value) {\n  return typeof value !== \"object\" || value === null || typeof value === \"undefined\" || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function () {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable, ignorePaths, obj, path) {\n  if (ignorePaths === void 0) {\n    ignorePaths = [];\n  }\n  if (path === void 0) {\n    path = \"\";\n  }\n  var tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj)) {\n    tracked.children = {};\n    for (var key in obj) {\n      var childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {\n  if (ignorePaths === void 0) {\n    ignorePaths = [];\n  }\n  if (sameParentRef === void 0) {\n    sameParentRef = false;\n  }\n  if (path === void 0) {\n    path = \"\";\n  }\n  var prevObj = trackedProperty ? trackedProperty.value : void 0;\n  var sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  var keysToDetect = {};\n  for (var key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (var key in obj) {\n    keysToDetect[key] = true;\n  }\n  for (var key in keysToDetect) {\n    var childPath = path ? path + \".\" + key : key;\n    if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n      continue;\n    }\n    var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);\n    if (result.wasMutated) {\n      return result;\n    }\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (process.env.NODE_ENV === \"production\") {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n  var _c = options.isImmutable,\n    isImmutable = _c === void 0 ? isImmutableDefault : _c,\n    ignoredPaths = options.ignoredPaths,\n    _d = options.warnAfter,\n    warnAfter = _d === void 0 ? 32 : _d,\n    ignore = options.ignore;\n  ignoredPaths = ignoredPaths || ignore;\n  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n  return function (_c) {\n    var getState = _c.getState;\n    var state = getState();\n    var tracker = track(state);\n    var result;\n    return function (next) {\n      return function (action) {\n        var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          invariant(!result.wasMutated, \"A state mutation was detected between dispatches, in the path '\" + (result.path || \"\") + \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\n        });\n        var dispatchedAction = next(action);\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          result.wasMutated && invariant(!result.wasMutated, \"A state mutation was detected inside a dispatch, in the path: \" + (result.path || \"\") + \". Take a look at the reducer(s) handling the action \" + stringify(action) + \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  };\n}\n// src/serializableStateInvariantMiddleware.ts\nfunction isPlain(val) {\n  var type = typeof val;\n  return type === \"undefined\" || val === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\n}\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {\n  if (path === void 0) {\n    path = \"\";\n  }\n  if (isSerializable === void 0) {\n    isSerializable = isPlain;\n  }\n  if (ignoredPaths === void 0) {\n    ignoredPaths = [];\n  }\n  var foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value: value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _c = entries_1[_i],\n      key = _c[0],\n      nestedValue = _c[1];\n    var nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {\n      continue;\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n  return false;\n}\nfunction createSerializableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (process.env.NODE_ENV === \"production\") {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n  var _c = options.isSerializable,\n    isSerializable = _c === void 0 ? isPlain : _c,\n    getEntries = options.getEntries,\n    _d = options.ignoredActions,\n    ignoredActions = _d === void 0 ? [] : _d,\n    _e = options.ignoredActionPaths,\n    ignoredActionPaths = _e === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _e,\n    _f = options.ignoredPaths,\n    ignoredPaths = _f === void 0 ? [] : _f,\n    _g = options.warnAfter,\n    warnAfter = _g === void 0 ? 32 : _g,\n    _h = options.ignoreState,\n    ignoreState = _h === void 0 ? false : _h,\n    _j = options.ignoreActions,\n    ignoreActions = _j === void 0 ? false : _j;\n  return function (storeAPI) {\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n        var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n          measureUtils.measureTime(function () {\n            var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths);\n            if (foundActionNonSerializableValue) {\n              var keyPath = foundActionNonSerializableValue.keyPath,\n                value = foundActionNonSerializableValue.value;\n              console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n            }\n          });\n        }\n        if (!ignoreState) {\n          measureUtils.measureTime(function () {\n            var state = storeAPI.getState();\n            var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths);\n            if (foundStateNonSerializableValue) {\n              var keyPath = foundStateNonSerializableValue.keyPath,\n                value = foundStateNonSerializableValue.value;\n              console.error(\"A non-serializable value was detected in the state, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\n            }\n          });\n          measureUtils.warnIfExceeded();\n        }\n        return result;\n      };\n    };\n  };\n}\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nfunction curryGetDefaultMiddleware() {\n  return function curriedGetDefaultMiddleware(options) {\n    return getDefaultMiddleware(options);\n  };\n}\nfunction getDefaultMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = options.thunk,\n    thunk = _c === void 0 ? true : _c,\n    _d = options.immutableCheck,\n    immutableCheck = _d === void 0 ? true : _d,\n    _e = options.serializableCheck,\n    serializableCheck = _e === void 0 ? true : _e;\n  var middlewareArray = new MiddlewareArray();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(thunkMiddleware.withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (immutableCheck) {\n      var immutableOptions = {};\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n    }\n    if (serializableCheck) {\n      var serializableOptions = {};\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n  }\n  return middlewareArray;\n}\n// src/configureStore.ts\nvar IS_PRODUCTION = process.env.NODE_ENV === \"production\";\nfunction configureStore(options) {\n  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();\n  var _c = options || {},\n    _d = _c.reducer,\n    reducer = _d === void 0 ? void 0 : _d,\n    _e = _c.middleware,\n    middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e,\n    _f = _c.devTools,\n    devTools = _f === void 0 ? true : _f,\n    _g = _c.preloadedState,\n    preloadedState = _g === void 0 ? void 0 : _g,\n    _h = _c.enhancers,\n    enhancers = _h === void 0 ? void 0 : _h;\n  var rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = combineReducers(reducer);\n  } else {\n    throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n  }\n  var finalMiddleware = middleware;\n  if (typeof finalMiddleware === \"function\") {\n    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);\n    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\n      throw new Error(\"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  }\n  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {\n    return typeof item !== \"function\";\n  })) {\n    throw new Error(\"each middleware provided to configureStore must be a function\");\n  }\n  var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);\n  var finalCompose = compose2;\n  if (devTools) {\n    finalCompose = composeWithDevTools(__spreadValues({\n      trace: !IS_PRODUCTION\n    }, typeof devTools === \"object\" && devTools));\n  }\n  var storeEnhancers = [middlewareEnhancer];\n  if (Array.isArray(enhancers)) {\n    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);\n  } else if (typeof enhancers === \"function\") {\n    storeEnhancers = enhancers(storeEnhancers);\n  }\n  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\n  return createStore(rootReducer, preloadedState, composedEnhancer);\n}\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, args);\n      if (!prepared) {\n        throw new Error(\"prepareAction did not return an object\");\n      }\n      return __spreadValues(__spreadValues({\n        type: type,\n        payload: prepared.payload\n      }, \"meta\" in prepared && {\n        meta: prepared.meta\n      }), \"error\" in prepared && {\n        error: prepared.error\n      });\n    }\n    return {\n      type: type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = function () {\n    return \"\" + type;\n  };\n  actionCreator.type = type;\n  actionCreator.match = function (action) {\n    return action.type === type;\n  };\n  return actionCreator;\n}\nfunction isFSA(action) {\n  return isPlainObject(action) && typeof action.type === \"string\" && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\nfunction getType(actionCreator) {\n  return \"\" + actionCreator;\n}\n// src/createReducer.ts\nimport createNextState, { isDraft as isDraft2, isDraftable } from \"immer\";\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var actionMatchers = [];\n  var defaultCaseReducer;\n  var builder = {\n    addCase: function (typeOrActionCreator, reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (actionMatchers.length > 0) {\n          throw new Error(\"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error(\"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (type in actionsMap) {\n        throw new Error(\"addCase cannot be called with two reducers for the same action type\");\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher: function (matcher, reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (defaultCaseReducer) {\n          throw new Error(\"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher: matcher,\n        reducer: reducer\n      });\n      return builder;\n    },\n    addDefaultCase: function (reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (defaultCaseReducer) {\n          throw new Error(\"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {\n  if (actionMatchers === void 0) {\n    actionMatchers = [];\n  }\n  var _c = typeof mapOrBuilderCallback === \"function\" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],\n    actionsMap = _c[0],\n    finalActionMatchers = _c[1],\n    finalDefaultCaseReducer = _c[2];\n  var getInitialState;\n  if (isStateFunction(initialState)) {\n    getInitialState = function () {\n      return createNextState(initialState(), function () {});\n    };\n  } else {\n    var frozenInitialState_1 = createNextState(initialState, function () {});\n    getInitialState = function () {\n      return frozenInitialState_1;\n    };\n  }\n  function reducer(state, action) {\n    if (state === void 0) {\n      state = getInitialState();\n    }\n    var caseReducers = __spreadArray([actionsMap[action.type]], finalActionMatchers.filter(function (_c) {\n      var matcher = _c.matcher;\n      return matcher(action);\n    }).map(function (_c) {\n      var reducer2 = _c.reducer;\n      return reducer2;\n    }));\n    if (caseReducers.filter(function (cr) {\n      return !!cr;\n    }).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce(function (previousState, caseReducer) {\n      if (caseReducer) {\n        if (isDraft2(previousState)) {\n          var draft = previousState;\n          var result = caseReducer(draft, action);\n          if (typeof result === \"undefined\") {\n            return previousState;\n          }\n          return result;\n        } else if (!isDraftable(previousState)) {\n          var result = caseReducer(previousState, action);\n          if (typeof result === \"undefined\") {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return result;\n        } else {\n          return createNextState(previousState, function (draft) {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n// src/createSlice.ts\nfunction getType2(slice, actionKey) {\n  return slice + \"/\" + actionKey;\n}\nfunction createSlice(options) {\n  var name = options.name;\n  if (!name) {\n    throw new Error(\"`name` is a required option for createSlice\");\n  }\n  var initialState = typeof options.initialState == \"function\" ? options.initialState : default2(options.initialState, function () {});\n  var reducers = options.reducers || {};\n  var reducerNames = Object.keys(reducers);\n  var sliceCaseReducersByName = {};\n  var sliceCaseReducersByType = {};\n  var actionCreators = {};\n  reducerNames.forEach(function (reducerName) {\n    var maybeReducerWithPrepare = reducers[reducerName];\n    var type = getType2(name, reducerName);\n    var caseReducer;\n    var prepareCallback;\n    if (\"reducer\" in maybeReducerWithPrepare) {\n      caseReducer = maybeReducerWithPrepare.reducer;\n      prepareCallback = maybeReducerWithPrepare.prepare;\n    } else {\n      caseReducer = maybeReducerWithPrepare;\n    }\n    sliceCaseReducersByName[reducerName] = caseReducer;\n    sliceCaseReducersByType[type] = caseReducer;\n    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\n  });\n  function buildReducer() {\n    var _c = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],\n      _d = _c[0],\n      extraReducers = _d === void 0 ? {} : _d,\n      _e = _c[1],\n      actionMatchers = _e === void 0 ? [] : _e,\n      _f = _c[2],\n      defaultCaseReducer = _f === void 0 ? void 0 : _f;\n    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);\n    return createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);\n  }\n  var _reducer;\n  return {\n    name: name,\n    reducer: function (state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    },\n    actions: actionCreators,\n    caseReducers: sliceCaseReducersByName,\n    getInitialState: function () {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n  };\n}\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory() {\n  function getInitialState(additionalState) {\n    if (additionalState === void 0) {\n      additionalState = {};\n    }\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n  return {\n    getInitialState: getInitialState\n  };\n}\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var selectIds = function (state) {\n      return state.ids;\n    };\n    var selectEntities = function (state) {\n      return state.entities;\n    };\n    var selectAll = createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n    var selectId = function (_, id) {\n      return id;\n    };\n    var selectById = function (entities, id) {\n      return entities[id];\n    };\n    var selectTotal = createDraftSafeSelector(selectIds, function (ids) {\n      return ids.length;\n    });\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createDraftSafeSelector(selectEntities, selectId, selectById)\n      };\n    }\n    var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);\n    return {\n      selectIds: createDraftSafeSelector(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createDraftSafeSelector(selectState, selectAll),\n      selectTotal: createDraftSafeSelector(selectState, selectTotal),\n      selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors: getSelectors\n  };\n}\n// src/entities/state_adapter.ts\nimport createNextState2, { isDraft as isDraft3 } from \"immer\";\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    var runMutator = function (draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraft3(state)) {\n      runMutator(state);\n      return state;\n    } else {\n      return createNextState2(state, runMutator);\n    }\n  };\n}\n// src/entities/utils.ts\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n  if (process.env.NODE_ENV !== \"production\" && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  var added = [];\n  var updated = [];\n  for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {\n    var entity = newEntities_1[_i];\n    var id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      updated.push({\n        id: id,\n        changes: entity\n      });\n    } else {\n      added.push(entity);\n    }\n  }\n  return [added, updated];\n}\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {\n      var entity = newEntities_2[_i];\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {\n      var entity = newEntities_3[_i];\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    var original2 = state.entities[update.id];\n    var updated = Object.assign({}, original2, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      if (update.id in state.entities) {\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n      if (didMutateIds) {\n        state.ids = state.ids.map(function (id) {\n          return newKeys[id] || id;\n        });\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),\n      added = _c[0],\n      updated = _c[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n// src/entities/sorted_state_adapter.ts\nfunction createSortedStateAdapter(selectId, sort) {\n  var _c = createUnsortedStateAdapter(selectId),\n    removeOne = _c.removeOne,\n    removeMany = _c.removeMany,\n    removeAll = _c.removeAll;\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    var models = newEntities.filter(function (model) {\n      return !(selectIdValue(model, selectId) in state.entities);\n    });\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      merge(newEntities, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function takeUpdatedModel(models, update, state) {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n    var original2 = state.entities[update.id];\n    var updated = Object.assign({}, original2, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    delete state.entities[update.id];\n    models.push(updated);\n    return newKey !== update.id;\n  }\n  function updateManyMutably(updates, state) {\n    var models = [];\n    updates.forEach(function (update) {\n      return takeUpdatedModel(models, update, state);\n    });\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),\n      added = _c[0],\n      updated = _c[1];\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length && i < b.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  function merge(models, state) {\n    models.forEach(function (model) {\n      state.entities[selectId(model)] = model;\n    });\n    var allEntities = Object.values(state.entities);\n    allEntities.sort(sort);\n    var newSortedIds = allEntities.map(selectId);\n    var ids = state.ids;\n    if (!areArraysEqual(ids, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  }\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = __spreadValues({\n      sortComparer: false,\n      selectId: function (instance) {\n        return instance.id;\n      }\n    }, options),\n    selectId = _c.selectId,\n    sortComparer = _c.sortComparer;\n  var stateFactory = createInitialStateFactory();\n  var selectorsFactory = createSelectorsFactory();\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  return __spreadValues(__spreadValues(__spreadValues({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory), selectorsFactory), stateAdapter);\n}\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = function (size) {\n  if (size === void 0) {\n    size = 21;\n  }\n  var id = \"\";\n  var i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = /** @class */function () {\n  function RejectWithValue(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  return RejectWithValue;\n}();\nvar FulfillWithMeta = /** @class */function () {\n  function FulfillWithMeta(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  return FulfillWithMeta;\n}();\nvar miniSerializeError = function (value) {\n  if (typeof value === \"object\" && value !== null) {\n    var simpleError = {};\n    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {\n      var property = commonProperties_1[_i];\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nfunction createAsyncThunk(typePrefix, payloadCreator, options) {\n  var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) {\n    return {\n      payload: payload,\n      meta: __spreadProps(__spreadValues({}, meta || {}), {\n        arg: arg,\n        requestId: requestId,\n        requestStatus: \"fulfilled\"\n      })\n    };\n  });\n  var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) {\n    return {\n      payload: void 0,\n      meta: __spreadProps(__spreadValues({}, meta || {}), {\n        arg: arg,\n        requestId: requestId,\n        requestStatus: \"pending\"\n      })\n    };\n  });\n  var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) {\n    return {\n      payload: payload,\n      error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n      meta: __spreadProps(__spreadValues({}, meta || {}), {\n        arg: arg,\n        requestId: requestId,\n        rejectedWithValue: !!payload,\n        requestStatus: \"rejected\",\n        aborted: (error == null ? void 0 : error.name) === \"AbortError\",\n        condition: (error == null ? void 0 : error.name) === \"ConditionError\"\n      })\n    };\n  });\n  var displayedWarning = false;\n  var AC = typeof AbortController !== \"undefined\" ? AbortController : /** @class */function () {\n    function class_1() {\n      this.signal = {\n        aborted: false,\n        addEventListener: function () {},\n        dispatchEvent: function () {\n          return false;\n        },\n        onabort: function () {},\n        removeEventListener: function () {}\n      };\n    }\n    class_1.prototype.abort = function () {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (!displayedWarning) {\n          displayedWarning = true;\n          console.info(\"This platform does not implement AbortController. \\nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.\");\n        }\n      }\n    };\n    return class_1;\n  }();\n  function actionCreator(arg) {\n    return function (dispatch, getState, extra) {\n      var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();\n      var abortController = new AC();\n      var abortReason;\n      var abortedPromise = new Promise(function (_, reject) {\n        return abortController.signal.addEventListener(\"abort\", function () {\n          return reject({\n            name: \"AbortError\",\n            message: abortReason || \"Aborted\"\n          });\n        });\n      });\n      var started = false;\n      function abort(reason) {\n        if (started) {\n          abortReason = reason;\n          abortController.abort();\n        }\n      }\n      var promise = function () {\n        return __async(this, null, function () {\n          var _a, _b, finalAction, conditionResult, err_1, skipDispatch;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _c.trys.push([0, 4,, 5]);\n                conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {\n                  getState: getState,\n                  extra: extra\n                });\n                if (!isThenable(conditionResult)) return [3 /*break*/, 2];\n                return [4 /*yield*/, conditionResult];\n              case 1:\n                conditionResult = _c.sent();\n                _c.label = 2;\n              case 2:\n                if (conditionResult === false) {\n                  throw {\n                    name: \"ConditionError\",\n                    message: \"Aborted due to condition callback returning false.\"\n                  };\n                }\n                started = true;\n                dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {\n                  requestId: requestId,\n                  arg: arg\n                }, {\n                  getState: getState,\n                  extra: extra\n                })));\n                return [4 /*yield*/, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n                  dispatch: dispatch,\n                  getState: getState,\n                  extra: extra,\n                  requestId: requestId,\n                  signal: abortController.signal,\n                  rejectWithValue: function (value, meta) {\n                    return new RejectWithValue(value, meta);\n                  },\n                  fulfillWithValue: function (value, meta) {\n                    return new FulfillWithMeta(value, meta);\n                  }\n                })).then(function (result) {\n                  if (result instanceof RejectWithValue) {\n                    throw result;\n                  }\n                  if (result instanceof FulfillWithMeta) {\n                    return fulfilled(result.payload, requestId, arg, result.meta);\n                  }\n                  return fulfilled(result, requestId, arg);\n                })])];\n              case 3:\n                finalAction = _c.sent();\n                return [3 /*break*/, 5];\n              case 4:\n                err_1 = _c.sent();\n                finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);\n                return [3 /*break*/, 5];\n              case 5:\n                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                if (!skipDispatch) {\n                  dispatch(finalAction);\n                }\n                return [2 /*return*/, finalAction];\n            }\n          });\n        });\n      }();\n      return Object.assign(promise, {\n        abort: abort,\n        requestId: requestId,\n        arg: arg,\n        unwrap: function () {\n          return promise.then(unwrapResult);\n        }\n      });\n    };\n  }\n  return Object.assign(actionCreator, {\n    pending: pending,\n    rejected: rejected,\n    fulfilled: fulfilled,\n    typePrefix: typePrefix\n  });\n}\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n// src/tsHelpers.ts\nvar hasMatchFunction = function (v) {\n  return v && typeof v.match === \"function\";\n};\n// src/matchers.ts\nvar matches = function (matcher, action) {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf() {\n  var matchers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    matchers[_i] = arguments[_i];\n  }\n  return function (action) {\n    return matchers.some(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction isAllOf() {\n  var matchers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    matchers[_i] = arguments[_i];\n  }\n  return function (action) {\n    return matchers.every(function (matcher) {\n      return matches(matcher, action);\n    });\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  var hasValidRequestId = typeof action.meta.requestId === \"string\";\n  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.pending;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isRejected() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.rejected;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isRejectedWithValue() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  var hasFlag = function (action) {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n      return combinedMatcher(action);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return function (action) {\n    var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\n    return combinedMatcher(action);\n  };\n}\nfunction isFulfilled() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = asyncThunks.map(function (asyncThunk) {\n      return asyncThunk.fulfilled;\n    });\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\nfunction isAsyncThunkAction() {\n  var asyncThunks = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    asyncThunks[_i] = arguments[_i];\n  }\n  if (asyncThunks.length === 0) {\n    return function (action) {\n      return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n    };\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return function (action) {\n    var matchers = [];\n    for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {\n      var asyncThunk = asyncThunks_1[_i];\n      matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\n    }\n    var combinedMatcher = isAnyOf.apply(void 0, matchers);\n    return combinedMatcher(action);\n  };\n}\n// src/listenerMiddleware/utils.ts\nvar assertFunction = function (func, expected) {\n  if (typeof func !== \"function\") {\n    throw new TypeError(expected + \" is not a function\");\n  }\n};\nvar noop = function () {};\nvar catchRejection = function (promise, onError) {\n  if (onError === void 0) {\n    onError = noop;\n  }\n  promise.catch(onError);\n  return promise;\n};\nvar addAbortSignalListener = function (abortSignal, callback) {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n};\nvar abortControllerWithReason = function (abortController, reason) {\n  var signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = \"task-\" + cancelled;\nvar taskCompleted = \"task-\" + completed;\nvar listenerCancelled = listener + \"-\" + cancelled;\nvar listenerCompleted = listener + \"-\" + completed;\nvar TaskAbortError = /** @class */function () {\n  function TaskAbortError(code) {\n    this.code = code;\n    this.name = \"TaskAbortError\";\n    this.message = task + \" \" + cancelled + \" (reason: \" + code + \")\";\n  }\n  return TaskAbortError;\n}();\n// src/listenerMiddleware/task.ts\nvar validateActive = function (signal) {\n  if (signal.aborted) {\n    throw new TaskAbortError(signal.reason);\n  }\n};\nvar promisifyAbortSignal = function (signal) {\n  return catchRejection(new Promise(function (_, reject) {\n    var notifyRejection = function () {\n      return reject(new TaskAbortError(signal.reason));\n    };\n    if (signal.aborted) {\n      notifyRejection();\n    } else {\n      addAbortSignalListener(signal, notifyRejection);\n    }\n  }));\n};\nvar runTask = function (task2, cleanUp) {\n  return __async(void 0, null, function () {\n    var value, error_1;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _c.trys.push([0, 3, 4, 5]);\n          return [4 /*yield*/, Promise.resolve()];\n        case 1:\n          _c.sent();\n          return [4 /*yield*/, task2()];\n        case 2:\n          value = _c.sent();\n          return [2 /*return*/, {\n            status: \"ok\",\n            value: value\n          }];\n        case 3:\n          error_1 = _c.sent();\n          return [2 /*return*/, {\n            status: error_1 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error: error_1\n          }];\n        case 4:\n          cleanUp == null ? void 0 : cleanUp();\n          return [7 /*endfinally*/];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n};\n\nvar createPause = function (signal) {\n  return function (promise) {\n    return catchRejection(Promise.race([promisifyAbortSignal(signal), promise]).then(function (output) {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = function (signal) {\n  var pause = createPause(signal);\n  return function (timeoutMs) {\n    return pause(new Promise(function (resolve) {\n      return setTimeout(resolve, timeoutMs);\n    }));\n  };\n};\n// src/listenerMiddleware/index.ts\nvar assign = Object.assign;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = function (parentAbortSignal) {\n  var linkControllers = function (controller) {\n    return addAbortSignalListener(parentAbortSignal, function () {\n      return abortControllerWithReason(controller, parentAbortSignal.reason);\n    });\n  };\n  return function (taskExecutor) {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    var childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    var result = runTask(function () {\n      return __async(void 0, null, function () {\n        var result2;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              validateActive(parentAbortSignal);\n              validateActive(childAbortController.signal);\n              return [4 /*yield*/, taskExecutor({\n                pause: createPause(childAbortController.signal),\n                delay: createDelay(childAbortController.signal),\n                signal: childAbortController.signal\n              })];\n            case 1:\n              result2 = _c.sent();\n              validateActive(childAbortController.signal);\n              return [2 /*return*/, result2];\n          }\n        });\n      });\n    }, function () {\n      return abortControllerWithReason(childAbortController, taskCompleted);\n    });\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel: function () {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = function (startListening, signal) {\n  var take = function (predicate, timeout) {\n    return __async(void 0, null, function () {\n      var unsubscribe, tuplePromise, promises, output;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            validateActive(signal);\n            unsubscribe = function () {};\n            tuplePromise = new Promise(function (resolve) {\n              unsubscribe = startListening({\n                predicate: predicate,\n                effect: function (action, listenerApi) {\n                  listenerApi.unsubscribe();\n                  resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n                }\n              });\n            });\n            promises = [promisifyAbortSignal(signal), tuplePromise];\n            if (timeout != null) {\n              promises.push(new Promise(function (resolve) {\n                return setTimeout(resolve, timeout, null);\n              }));\n            }\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, Promise.race(promises)];\n          case 2:\n            output = _c.sent();\n            validateActive(signal);\n            return [2 /*return*/, output];\n          case 3:\n            unsubscribe();\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return function (predicate, timeout) {\n    return catchRejection(take(predicate, timeout));\n  };\n};\nvar getListenerEntryPropsFrom = function (options) {\n  var type = options.type,\n    actionCreator = options.actionCreator,\n    matcher = options.matcher,\n    predicate = options.predicate,\n    effect = options.effect;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error(\"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate: predicate,\n    type: type,\n    effect: effect\n  };\n};\nvar createListenerEntry = function (options) {\n  var _c = getListenerEntryPropsFrom(options),\n    type = _c.type,\n    predicate = _c.predicate,\n    effect = _c.effect;\n  var id = nanoid();\n  var entry = {\n    id: id,\n    effect: effect,\n    type: type,\n    predicate: predicate,\n    pending: new Set(),\n    unsubscribe: function () {\n      throw new Error(\"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n};\nvar createClearListenerMiddleware = function (listenerMap) {\n  return function () {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = function (errorHandler, errorToNotify, errorInfo) {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(function () {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = createAction(alm + \"/add\");\nvar clearAllListeners = createAction(alm + \"/removeAll\");\nvar removeListener = createAction(alm + \"/remove\");\nvar defaultErrorHandler = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  console.error.apply(console, __spreadArray([alm + \"/error\"], args));\n};\nvar cancelActiveListeners = function (entry) {\n  entry.pending.forEach(function (controller) {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nfunction createListenerMiddleware(middlewareOptions) {\n  var _this = this;\n  if (middlewareOptions === void 0) {\n    middlewareOptions = {};\n  }\n  var listenerMap = new Map();\n  var extra = middlewareOptions.extra,\n    _c = middlewareOptions.onError,\n    onError = _c === void 0 ? defaultErrorHandler : _c;\n  assertFunction(onError, \"onError\");\n  var insertEntry = function (entry) {\n    entry.unsubscribe = function () {\n      return listenerMap.delete(entry.id);\n    };\n    listenerMap.set(entry.id, entry);\n    return function (cancelOptions) {\n      entry.unsubscribe();\n      if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  var findListenerEntry = function (comparator) {\n    for (var _i = 0, _c = listenerMap.values(); _i < _c.length; _i++) {\n      var entry = _c[_i];\n      if (comparator(entry)) {\n        return entry;\n      }\n    }\n    return void 0;\n  };\n  var startListening = function (options) {\n    var entry = findListenerEntry(function (existingEntry) {\n      return existingEntry.effect === options.effect;\n    });\n    if (!entry) {\n      entry = createListenerEntry(options);\n    }\n    return insertEntry(entry);\n  };\n  var stopListening = function (options) {\n    var _c = getListenerEntryPropsFrom(options),\n      type = _c.type,\n      effect = _c.effect,\n      predicate = _c.predicate;\n    var entry = findListenerEntry(function (entry2) {\n      var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\n      return matchPredicateOrType && entry2.effect === effect;\n    });\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  var notifyListener = function (entry, action, api, getOriginalState) {\n    return __async(_this, null, function () {\n      var internalTaskController, take, listenerError_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            internalTaskController = new AbortController();\n            take = createTakePattern(startListening, internalTaskController.signal);\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n            entry.pending.add(internalTaskController);\n            return [4 /*yield*/, Promise.resolve(entry.effect(action, assign({}, api, {\n              getOriginalState: getOriginalState,\n              condition: function (predicate, timeout) {\n                return take(predicate, timeout).then(Boolean);\n              },\n              take: take,\n              delay: createDelay(internalTaskController.signal),\n              pause: createPause(internalTaskController.signal),\n              extra: extra,\n              signal: internalTaskController.signal,\n              fork: createFork(internalTaskController.signal),\n              unsubscribe: entry.unsubscribe,\n              subscribe: function () {\n                listenerMap.set(entry.id, entry);\n              },\n              cancelActiveListeners: function () {\n                entry.pending.forEach(function (controller, _, set) {\n                  if (controller !== internalTaskController) {\n                    abortControllerWithReason(controller, listenerCancelled);\n                    set.delete(controller);\n                  }\n                });\n              }\n            })))];\n          case 2:\n            _c.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            listenerError_1 = _c.sent();\n            if (!(listenerError_1 instanceof TaskAbortError)) {\n              safelyNotifyError(onError, listenerError_1, {\n                raisedBy: \"effect\"\n              });\n            }\n            return [3 /*break*/, 5];\n          case 4:\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending.delete(internalTaskController);\n            return [7 /*endfinally*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  var middleware = function (api) {\n    return function (next) {\n      return function (action) {\n        if (addListener.match(action)) {\n          return startListening(action.payload);\n        }\n        if (clearAllListeners.match(action)) {\n          clearListenerMiddleware();\n          return;\n        }\n        if (removeListener.match(action)) {\n          return stopListening(action.payload);\n        }\n        var originalState = api.getState();\n        var getOriginalState = function () {\n          if (originalState === INTERNAL_NIL_TOKEN) {\n            throw new Error(alm + \": getOriginalState can only be called synchronously\");\n          }\n          return originalState;\n        };\n        var result;\n        try {\n          result = next(action);\n          if (listenerMap.size > 0) {\n            var currentState = api.getState();\n            var listenerEntries = Array.from(listenerMap.values());\n            for (var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++) {\n              var entry = listenerEntries_1[_i];\n              var runListener = false;\n              try {\n                runListener = entry.predicate(action, currentState, originalState);\n              } catch (predicateError) {\n                runListener = false;\n                safelyNotifyError(onError, predicateError, {\n                  raisedBy: \"predicate\"\n                });\n              }\n              if (!runListener) {\n                continue;\n              }\n              notifyListener(entry, action, api, getOriginalState);\n            }\n          }\n        } finally {\n          originalState = INTERNAL_NIL_TOKEN;\n        }\n        return result;\n      };\n    };\n  };\n  return {\n    middleware: middleware,\n    startListening: startListening,\n    stopListening: stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n}\n// src/index.ts\nenableES5();\nexport { MiddlewareArray, TaskAbortError, addListener, clearAllListeners, configureStore, createAction, createAsyncThunk, createDraftSafeSelector, createEntityAdapter, createImmutableStateInvariantMiddleware, createListenerMiddleware, default2 as createNextState, createReducer, createSelector2 as createSelector, createSerializableStateInvariantMiddleware, createSlice, current2 as current, findNonSerializableValue, freeze, getDefaultMiddleware, getType, isAllOf, isAnyOf, isAsyncThunkAction, isDraft4 as isDraft, isFulfilled, isImmutableDefault, isPending, isPlain, isPlainObject, isRejected, isRejectedWithValue, miniSerializeError, nanoid, original, removeListener, unwrapResult };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAQA;;ACVA;AACA;AASO,IAAMA,0BAAiD;EAAA;OAAA,UACzD,EADyDC,qBACzD,EADyDA,IACzD;IADyDC;;EAG5D,IAAMC,WAAYC,6BAA0BF;EAC5C,IAAMG,kBAAkB,UAACC;IAAA;SAAA,UAAmB,EAAnBL,qBAAmB,EAAnBA,IAAmB;MAAnBM;;IACvB,6CAASC,QAAQF,SAASG,QAAQH,SAASA,QAAUC;EAArD,CAAqD;EACvD,OAAOF;AAAA;;ACJT;;ACXA;AAwLO,IAAMK,sBACX,OAAOC,WAAW,eACjBA,OAAeC,uCACXD,OAAeC,uCAChB;EACE,IAAIC,UAAUC,WAAW,GAAG,OAAO;EACnC,IAAI,OAAOD,UAAU,OAAO,UAAU,OAAOE;EAC7C,OAAOA,QAAQC,MAAM,MAAMH;AAAA;AAM5B,IAAMI,mBAGX,OAAON,WAAW,eAAgBA,OAAeO,+BAC5CP,OAAeO,+BAChB;EACE,OAAO,UAAUC;IACf,OAAOA;EAAA;AAAA;;ACnMF,uBAAuBb;EACpC,IAAI,OAAOA,UAAU,YAAYA,UAAU,MAAM,OAAO;EAExD,IAAIc,QAAQC,OAAOC,eAAehB;EAClC,IAAIc,UAAU,MAAM,OAAO;EAE3B,IAAIG,YAAYH;EAChB,OAAOC,OAAOC,eAAeC,eAAe,MAAM;IAChDA,YAAYF,OAAOC,eAAeC;;EAGpC,OAAOH,UAAUG;AAAA;;ACnBnB;;ACAO,6BAA6BC,UAAkBC;EACpD,IAAIC,UAAU;EACd,OAAO;IACLC,uBAAeC;MACb,IAAMC,UAAUC,KAAKC;MACrB,IAAI;QACF,OAAOH;OAAA,SACP;QACA,IAAMI,WAAWF,KAAKC;QACtBL,WAAWM,WAAWH;;IAAA;IAG1BI;MACE,IAAIP,UAAUF,UAAU;QACtBU,QAAQC,KAAQV,oBAAeC,+DAA0DF;;IAAA;GAAA;AAAA;AAW1F;EAEGY;EAER;IAAA;SAAA,UAAe,EAAfnC,qBAAe,EAAfA,IAAe;MAAfC;;IAAA,+BACWA;IACTmB,OAAOgB,eAAeC,OAAMC,gBAAgBC;;EAAA;EAAAnB,uCAGlCoB,OAAOC;SAH2B;MAI5C,OAAOH;IAAA;;;;EAUTA;IAAA;SAAA,UAAU,EAAVtC,qBAAU,EAAVA,IAAU;MAAV0C;;IACE,OAAOC,iBAAMC,OAAO7B,MAAM,MAAM2B;EAAA;EAWlCJ;IAAA;SAAA,UAAW,EAAXtC,qBAAW,EAAXA,IAAW;MAAX0C;;IACE,IAAIA,IAAI7B,WAAW,KAAKgC,MAAMC,QAAQJ,IAAI,KAAK;MAC7C,YAAWJ,oEAAmBI,IAAI,GAAGE,OAAO;;IAE9C,YAAWN,oEAAmBI,IAAIE,OAAO;EAAA;EAAA;AAAA,CApCtC,CAEGC,MAkCmC;;AC1D7C,IAAME,eAAwBC,QAAQC,IAAIC,aAAa;AACvD,IAAMC,SAAiB;AAKvB,mBAAmBC,WAAgBC;EACjC,IAAID,WAAW;IACb;;EAKF,IAAIL,cAAc;IAChB,MAAM,IAAIO,MAAMH;;EAKlB,MAAM,IAAIG,MAASH,iBAAWE,WAAW;AAAA;AAG3C,mBACEE,KACAC,YACAC,QACAC;EAEA,OAAOC,KAAKC,UAAUL,KAAKM,aAAaL,YAAYE,WAAWD;AAAA;AAGjE,sBACED,YACAE;EAEA,IAAII,QAAe;IACjBC,OAAc;EAEhB,IAAI,CAACL,UACHA,WAAW,UAAUM,GAAW3D;IAC9B,IAAIyD,MAAM,OAAOzD,OAAO,OAAO;IAC/B,OACE,iBAAiB0D,KAAKE,MAAM,GAAGH,MAAMI,QAAQ7D,QAAQ8D,KAAK,OAAO;EAAA;EAIvE,OAAO,UAAqBC,KAAa/D;IACvC,IAAIyD,MAAMjD,SAAS,GAAG;MACpB,IAAIwD,UAAUP,MAAMI,QAAQ;MAC5B,CAACG,UAAUP,MAAMQ,OAAOD,UAAU,KAAKP,MAAMS,KAAK;MAClD,CAACF,UAAUN,KAAKO,OAAOD,SAASG,UAAUJ,OAAOL,KAAKQ,KAAKH;MAC3D,IAAI,CAACN,MAAMI,QAAQ7D,QAAQA,QAAQqD,SAAUe,KAAK,MAAML,KAAK/D;KAAA,MACxDyD,MAAMS,KAAKlE;IAElB,OAAOmD,cAAc,OAAOnD,QAAQmD,WAAWiB,KAAK,MAAML,KAAK/D;EAAA;AAAA;AAS5D,4BAA4BA;EACjC,OACE,OAAOA,UAAU,YACjBA,UAAU,QACV,OAAOA,UAAU,eACjBe,OAAOsD,SAASrE;AAAA;AAIb,2BACLsE,aACAC,aACArB;EAEA,IAAMsB,oBAAoBC,gBAAgBH,aAAaC,aAAarB;EACpE,OAAO;IACLwB;MACE,OAAOA,gBAAgBJ,aAAaC,aAAaC,mBAAmBtB;IAAA;GAAA;AAAA;AAU1E,yBACEoB,aACAC,WAA2B,EAC3BrB,KACAyB,IAAe;EAFf;IAAAJ,gBAA2B;EAAA;EAE3B;IAAAI,SAAe;EAAA;EAEf,IAAMC,UAAoC;IAAE5E,OAAOkD;EAAA;EAEnD,IAAI,CAACoB,YAAYpB,MAAM;IACrB0B,QAAQC,WAAW;IAEnB,SAAWd,OAAOb,KAAK;MACrB,IAAM4B,YAAYH,OAAOA,OAAO,MAAMZ,MAAMA;MAC5C,IAAIQ,YAAY/D,UAAU+D,YAAYV,QAAQiB,eAAe,IAAI;QAC/D;;MAGFF,QAAQC,SAASd,OAAOU,gBACtBH,aACAC,aACArB,IAAIa,MACJe;;;EAIN,OAAOF;AAAA;AAKT,yBACEN,aACAC,WAA2B,EAC3BQ,iBACA7B,KACA8B,aAAyB,EACzBL,IAAe;EAJf;IAAAJ,gBAA2B;EAAA;EAG3B;IAAAS,qBAAyB;EAAA;EACzB;IAAAL,SAAe;EAAA;EAEf,IAAMM,UAAUF,kBAAkBA,gBAAgB/E,QAAQ;EAE1D,IAAMkF,UAAUD,YAAY/B;EAE5B,IAAI8B,iBAAiB,CAACE,WAAW,CAACC,OAAOC,MAAMlC,MAAM;IACnD,OAAO;MAAEmC,YAAY;MAAMV;IAAA;;EAG7B,IAAIL,YAAYW,YAAYX,YAAYpB,MAAM;IAC5C,OAAO;MAAEmC,YAAY;IAAA;;EAIvB,IAAMC,eAAwC;EAC9C,SAASvB,OAAOgB,gBAAgBF,UAAU;IACxCS,aAAavB,OAAO;;EAEtB,SAASA,OAAOb,KAAK;IACnBoC,aAAavB,OAAO;;EAGtB,SAASA,OAAOuB,cAAc;IAC5B,IAAMR,YAAYH,OAAOA,OAAO,MAAMZ,MAAMA;IAC5C,IAAIQ,YAAY/D,UAAU+D,YAAYV,QAAQiB,eAAe,IAAI;MAC/D;;IAGF,IAAMS,SAASb,gBACbJ,aACAC,aACAQ,gBAAgBF,SAASd,MACzBb,IAAIa,MACJmB,SACAJ;IAGF,IAAIS,OAAOF,YAAY;MACrB,OAAOE;;;EAGX,OAAO;IAAEF,YAAY;EAAA;AAAA;AAuChB,iDACLG,OAAoD;EAApD;IAAAA,YAAoD;EAAA;EAEpD,IAAI7C,QAAQC,IAAIC,aAAa,cAAc;IACzC,OAAO;MAAM,iBAAC4C;QAAS,iBAACC;UAAW,YAAKA;QAAL,CAAK;MAAjB,CAAiB;IAA3B,CAA2B;;EAIxC,SAIEF,mBAJY;IAAdlB,8BAAcqB;IACdC,eAGEJ,oBAHF;IACAK,KAEEL,iBAFU;IAAZM,4BAAY;IACZC,SACEP,cADF;EAIFI,eAAeA,gBAAgBG;EAE/B,IAAMC,QAAQC,kBAAkBC,KAAK,MAAM5B,aAAasB;EAExD,OAAO,UAACO,EAAE;QAAAC;IACR,IAAIC,QAAQD;IACZ,IAAIE,UAAUN,MAAMK;IAEpB,IAAId;IACJ,OAAO,UAACE;MAAS,iBAACC;QAChB,IAAMa,eAAeC,oBACnBV,WACA;QAGFS,aAAalF,YAAY;UACvBgF,QAAQD;UAERb,SAASe,QAAQ5B;UAEjB4B,UAAUN,MAAMK;UAEhBI,UACE,CAAClB,OAAOF,YACR,qEACEE,OAAOZ,QAAQ;QAAA;QAKrB,IAAM+B,mBAAmBjB,KAAKC;QAE9Ba,aAAalF,YAAY;UACvBgF,QAAQD;UAERb,SAASe,QAAQ5B;UAEjB4B,UAAUN,MAAMK;UAEhBd,OAAOF,cACLoB,UACE,CAAClB,OAAOF,YACR,oEACEE,OAAOZ,QAAQ,+DACsCpB,UACrDmC;QAAA;QAKRa,aAAa5E;QAEb,OAAO+E;MAAA;IA3CQ,CA2CR;EAAA;AAAA;;AC1QN,iBAAiBC;EACtB,IAAMC,OAAO,OAAOD;EACpB,OACEC,SAAS,eACTD,QAAQ,QACRC,SAAS,YACTA,SAAS,aACTA,SAAS,YACTpE,MAAMC,QAAQkE,QACdE,cAAcF;AAAA;AAYX,kCACL3G,OACA2E,IAAe,EACfmC,cAA8C,EAC9CC,YACAnB,YAAkC;EAHlC;IAAAjB,SAAe;EAAA;EACf;IAAAmC,wBAA8C;EAAA;EAE9C;IAAAlB,iBAAkC;EAAA;EAElC,IAAIoB;EAEJ,IAAI,CAACF,eAAe9G,QAAQ;IAC1B,OAAO;MACLiH,SAAStC,QAAQ;MACjB3E;KAAA;;EAIJ,IAAI,OAAOA,UAAU,YAAYA,UAAU,MAAM;IAC/C,OAAO;;EAGT,IAAMkH,UAAUH,cAAc,OAAOA,WAAW/G,SAASe,OAAOmG,QAAQlH;EAExE,IAAMmH,kBAAkBvB,aAAapF,SAAS;EAE9C,KAAiC,8DAAS;IAA/B,sBAAM;MAALuD;MAAKqD;IACf,IAAMC,aAAa1C,OAAOA,OAAO,MAAMZ,MAAMA;IAE7C,IAAIoD,mBAAmBvB,aAAa/B,QAAQwD,eAAe,GAAG;MAC5D;;IAGF,IAAI,CAACP,eAAeM,cAAc;MAChC,OAAO;QACLH,SAASI;QACTrH,OAAOoH;OAAA;;IAIX,IAAI,OAAOA,gBAAgB,UAAU;MACnCJ,0BAA0BM,yBACxBF,aACAC,YACAP,gBACAC,YACAnB;MAGF,IAAIoB,yBAAyB;QAC3B,OAAOA;;;;EAKb,OAAO;AAAA;AAkEF,oDACLxB,OAAuD;EAAvD;IAAAA,YAAuD;EAAA;EAEvD,IAAI7C,QAAQC,IAAIC,aAAa,cAAc;IACzC,OAAO;MAAM,iBAAC4C;QAAS,iBAACC;UAAW,YAAKA;QAAL,CAAK;MAAjB,CAAiB;IAA3B,CAA2B;;EAGxC,SAQEF,sBARe;IAAjBsB,iCAAiBS;IACjBR,aAOEvB,kBAPF;IACAK,KAMEL,sBANe;IAAjBgC,iCAAiB;IACjBC,KAKEjC,0BALgC;IAAlCkC,qCAAqB,CAAC,YAAY;IAClCC,KAIEnC,oBAJa;IAAfI,+BAAe;IACfgC,KAGEpC,iBAHU;IAAZM,4BAAY;IACZ+B,KAEErC,mBAFY;IAAdsC,8BAAc;IACdC,KACEvC,qBADc;IAAhBwC,gCAAgB;EAGlB,OAAO,UAACC;IAAa,iBAACxC;MAAS,iBAACC;QAC9B,IAAMH,SAASE,KAAKC;QAEpB,IAAMa,eAAeC,oBACnBV,WACA;QAGF,IACE,CAACkC,iBACD,EAAER,eAAehH,UAAUgH,eAAe3D,QAAQ6B,OAAOkB,UAAU,KACnE;UACAL,aAAalF,YAAY;YACvB,IAAM6G,kCAAkCZ,yBACtC5B,QACA,IACAoB,gBACAC,YACAW;YAGF,IAAIQ,iCAAiC;cAC3B,cAAmBA,uCAAnB;gBAASlI,QAAUkI,qCAAV;cAEjBtG,QAAQuG,MACN,uEAAsElB,uBACtEjH,OACA,4DACA0F,QACA,yIACA;;UAAA;;QAMR,IAAI,CAACoC,aAAa;UAChBvB,aAAalF,YAAY;YACvB,IAAMgF,QAAQ4B,SAAS7B;YAEvB,IAAMgC,iCAAiCd,yBACrCjB,OACA,IACAS,gBACAC,YACAnB;YAGF,IAAIwC,gCAAgC;cAC1B,cAAmBA,sCAAnB;gBAASpI,QAAUoI,oCAAV;cAEjBxG,QAAQuG,MACN,uEAAsElB,uBACtEjH,OACA,gEAC+C0F,OAAOkB;;UAAA;UAM5DL,aAAa5E;;QAGf,OAAO4D;MAAA;IAhEsB,CAgEtB;EAhEY,CAgEZ;AAAA;;AH7NX,mBAAmB8C;EACjB,OAAO,OAAOA,MAAM;AAAA;AAkCf;EAGL,OAAO,qCAAqC7C;IAC1C,OAAO8C,qBAAqB9C;EAAA;AAAA;AAgBzB,8BAQLA,OAAa;EAAb;IAAAA,YAAa;EAAA;EAGX,SAGEA,aAHM;IAAR+C,wBAAQ;IACR1C,KAEEL,sBAFe;IAAjBgD,iCAAiB;IACjBf,KACEjC,yBADkB;IAApBiD,oCAAoB;EAGtB,IAAIC,kBAAkB,IAAIzG;EAE1B,IAAIsG,OAAO;IACT,IAAII,UAAUJ,QAAQ;MACpBG,gBAAgBxE,KAAK0E;KAAA,MAChB;MACLF,gBAAgBxE,KACd0E,gBAAgBC,kBAAkBN,MAAMO;;;EAK9C,IAAInG,QAAQC,IAAIC,aAAa,cAAc;IACzC,IAAI2F,gBAAgB;MAElB,IAAIO,mBAA6D;MAEjE,IAAI,CAACJ,UAAUH,iBAAiB;QAC9BO,mBAAmBP;;MAGrBE,gBAAgBM,QACdC,wCAAwCF;;IAK5C,IAAIN,mBAAmB;MACrB,IAAIS,sBAAmE;MAEvE,IAAI,CAACP,UAAUF,oBAAoB;QACjCS,sBAAsBT;;MAGxBC,gBAAgBxE,KACdiF,2CAA2CD;;;EAKjD,OAAOR;AAAA;;AHpGT,IAAMU,gBAAgBzG,QAAQC,IAAIC,aAAa;AAmGxC,wBAIL2C;EACA,IAAM6D,8BAA8BC;EAE9B,SAMF9D,WAAW;IALbK,eAAU;IAAV0D,0BAAU;IACV9B,kBAAa;IAAb+B,6BAAaH;IACb1B,gBAAW;IAAX8B,2BAAW;IACX7B,sBAAiB;IAAjB8B,iCAAiB;IACjB7B,iBAAY;IAAZ8B,4BAAY,WACC;EAEf,IAAIC;EAEJ,IAAI,OAAOL,YAAY,YAAY;IACjCK,cAAcL;GAAA,UACL1C,cAAc0C,UAAU;IACjCK,cAAcC,gBAAgBN;GAAA,MACzB;IACL,MAAM,IAAItG,MACR;;EAIJ,IAAI6G,kBAAkBN;EACtB,IAAI,OAAOM,oBAAoB,YAAY;IACzCA,kBAAkBA,gBAAgBT;IAElC,IAAI,CAACD,iBAAiB,CAAC5G,MAAMC,QAAQqH,kBAAkB;MACrD,MAAM,IAAI7G,MACR;;;EAIN,IACE,CAACmG,iBACDU,gBAAgBC,KAAK,UAACC;IAAc,cAAOA,SAAS;EAAhB,CAAgB,GACpD;IACA,MAAM,IAAI/G,MACR;;EAIJ,IAAMgH,qBAAqBC,8BAAmBJ;EAE9C,IAAIK,eAAeC;EAEnB,IAAIX,UAAU;IACZU,eAAe/J,oBAAoBiK;MAEjCC,OAAO,CAAClB;KAAA,EACJ,OAAOK,aAAa,YAAYA;;EAIxC,IAAIc,iBAAkC,CAACN;EAEvC,IAAIzH,MAAMC,QAAQkH,YAAY;IAC5BY,gCAAkBN,qBAAuBN;GAAA,UAChC,OAAOA,cAAc,YAAY;IAC1CY,iBAAiBZ,UAAUY;;EAG7B,IAAMC,mBAAmBL,2BAAgBI;EAEzC,OAAOE,YAAYb,aAAaF,gBAAgBc;AAAA;;AOqE3C,sBAAsB5D,MAAc8D;EACzC;IAAA;SAAA,UAA0B,EAA1B/K,qBAA0B,EAA1BA,IAA0B;MAA1BC;;IACE,IAAI8K,eAAe;MACjB,IAAIC,WAAWD,4BAAiB9K;MAChC,IAAI,CAAC+K,UAAU;QACb,MAAM,IAAI1H,MAAM;;MAGlB,OAAOoH;QACLzD;QACAgE,SAASD,SAASC;OAAA,EACd,UAAUD,YAAY;QAAEE,MAAMF,SAASE;MAAA,IACvC,WAAWF,YAAY;QAAExC,OAAOwC,SAASxC;MAAA;;IAGjD,OAAO;MAAEvB;MAAMgE,SAAShL,KAAK;IAAA;EAAA;EAG/BkL,cAAcC,WAAW;IAAM,YAAGnE;EAAH,CAAG;EAElCkE,cAAclE,OAAOA;EAErBkE,cAAcE,QAAQ,UAACtF;IACrB,cAAOkB,SAASA;EAAhB,CAAgB;EAElB,OAAOkE;AAAA;AAGF,eAAepF;EAMpB,OACEmB,cAAcnB,WACd,OAAQA,OAAekB,SAAS,YAChC7F,OAAO2C,KAAKgC,QAAQuF,MAAMC;AAAA;AAI9B,oBAAoBnH;EAClB,OAAO,CAAC,QAAQ,WAAW,SAAS,QAAQF,QAAQE,OAAO;AAAA;AAatD,iBACL+G;EAEA,OAAO,KAAGA;AAAA;;AC7TZ;;AC4HO,uCACLK;EAMA,IAAMC,aAAmC;EACzC,IAAMC,iBAAwD;EAC9D,IAAIC;EACJ,IAAMC,UAAU;IACdC,mBACEC,qBACAlC;MAEA,IAAI5G,QAAQC,IAAIC,aAAa,cAAc;QAMzC,IAAIwI,eAAe7K,SAAS,GAAG;UAC7B,MAAM,IAAIyC,MACR;;QAGJ,IAAIqI,oBAAoB;UACtB,MAAM,IAAIrI,MACR;;;MAIN,IAAM2D,OACJ,OAAO6E,wBAAwB,WAC3BA,sBACAA,oBAAoB7E;MAC1B,IAAIA,QAAQwE,YAAY;QACtB,MAAM,IAAInI,MACR;;MAGJmI,WAAWxE,QAAQ2C;MACnB,OAAOgC;IAAA;IAETG,sBACEC,SACApC;MAEA,IAAI5G,QAAQC,IAAIC,aAAa,cAAc;QACzC,IAAIyI,oBAAoB;UACtB,MAAM,IAAIrI,MACR;;;MAINoI,eAAenH,KAAK;QAAEyH;QAASpC;MAAA;MAC/B,OAAOgC;IAAA;IAETK,0BAAerC;MACb,IAAI5G,QAAQC,IAAIC,aAAa,cAAc;QACzC,IAAIyI,oBAAoB;UACtB,MAAM,IAAIrI,MAAM;;;MAGpBqI,qBAAqB/B;MACrB,OAAOgC;IAAA;GAAA;EAGXJ,gBAAgBI;EAChB,OAAO,CAACH,YAAYC,gBAAgBC;AAAA;;ADzHtC,yBAA4BjD;EAC1B,OAAO,OAAOA,MAAM;AAAA;AA0If,uBACLwD,cACAC,sBAGAT,cAAgE,EAChEC;EADA;IAAAD,mBAAgE;EAAA;EAG5D,SACF,OAAOS,yBAAyB,aAC5BC,8BAA8BD,wBAC9B,CAACA,sBAAsBT,gBAAgBC;IAHxCF;IAAYY;IAAqBC,+BAGO;EAG7C,IAAIC;EACJ,IAAIC,gBAAgBN,eAAe;IACjCK,kBAAkB;MAAM,uBAAgBL,gBAAgB,aAAM;IAAtC,CAAsC;GAAA,MACzD;IACL,IAAMO,uBAAqBC,gBAAgBR,cAAc,aAAM;IAC/DK,kBAAkB;MAAM;IAAA;;EAG1B,iBAAiB7F,KAAQ,EAAmBX;IAA3B;MAAAW,QAAQ6F;IAAA;IACvB,IAAII,8BACFlB,WAAW1F,OAAOkB,QACfoF,oBACAO,OAAO,UAACpG,EAAE;UAAAwF;MAAc,eAAQjG;IAAR,CAAQ,EAChC8G,IAAI,UAACrG,EAAE;UAAAsG;MAAc;IAAA;IAE1B,IAAIH,aAAaC,OAAO,UAACG;MAAO,QAAC,CAACA;IAAF,CAAE,EAAIlM,WAAW,GAAG;MAClD8L,eAAe,CAACL;;IAGlB,OAAOK,aAAaK,OAAO,UAACC,eAAeC;MACzC,IAAIA,aAAa;QACf,IAAIC,SAAQF,gBAAgB;UAI1B,IAAMG,QAAQH;UACd,IAAMrH,SAASsH,YAAYE,OAAOrH;UAElC,IAAI,OAAOH,WAAW,aAAa;YACjC,OAAOqH;;UAGT,OAAOrH;SAAA,UACE,CAACyH,YAAYJ,gBAAgB;UAGtC,IAAMrH,SAASsH,YAAYD,eAAsBlH;UAEjD,IAAI,OAAOH,WAAW,aAAa;YACjC,IAAIqH,kBAAkB,MAAM;cAC1B,OAAOA;;YAET,MAAM3J,MACJ;;UAIJ,OAAOsC;SAAA,MACF;UAIL,OAAO8G,gBAAgBO,eAAe,UAACG;YACrC,OAAOF,YAAYE,OAAOrH;UAAA;;;MAKhC,OAAOkH;IAAA,GACNvG;EAAA;EAGLkD,QAAQ2C,kBAAkBA;EAE1B,OAAO3C;AAAA;;AEnDT,kBAAiB3F,OAAeqJ;EAC9B,OAAUrJ,cAASqJ;AAAA;AAad,qBAKLzH;EAEQ,WAASA,YAAT;EACR,IAAI,CAAC0H,MAAM;IACT,MAAM,IAAIjK,MAAM;;EAElB,IAAM4I,eACJ,OAAOrG,QAAQqG,gBAAgB,aAC3BrG,QAAQqG,eACRsB,SAAgB3H,QAAQqG,cAAc,aAAM;EAElD,IAAMuB,WAAW5H,QAAQ4H,YAAY;EAErC,IAAMC,eAAetM,OAAO2C,KAAK0J;EAEjC,IAAME,0BAAuD;EAC7D,IAAMC,0BAAuD;EAC7D,IAAMC,iBAA2C;EAEjDH,aAAaI,QAAQ,UAACC;IACpB,IAAMC,0BAA0BP,SAASM;IACzC,IAAM9G,OAAOgH,SAAQV,MAAMQ;IAE3B,IAAIb;IACJ,IAAIgB;IAEJ,IAAI,aAAaF,yBAAyB;MACxCd,cAAcc,wBAAwBpE;MACtCsE,kBAAkBF,wBAAwBG;KAAA,MACrC;MACLjB,cAAcc;;IAGhBL,wBAAwBI,eAAeb;IACvCU,wBAAwB3G,QAAQiG;IAChCW,eAAeE,eAAeG,kBAC1BE,aAAanH,MAAMiH,mBACnBE,aAAanH;EAAA;EAGnB;IACQ,SAKJ,OAAOpB,QAAQwI,kBAAkB,aAC7BjC,8BAA8BvG,QAAQwI,iBACtC,CAACxI,QAAQwI;MANbnI,UAAgB;MAAhBmI,gCAAgB;MAChBvG,UAAiB;MAAjB4D,iCAAiB;MACjB1D,UAAqB;MAArB2D,qCAAqB,WAIR;IAEf,IAAM2C,oBAAoB5D,kCAAK2D,gBAAkBT;IACjD,OAAOW,cACLrC,cACAoC,mBACA5C,gBACAC;EAAA;EAIJ,IAAI6C;EAEJ,OAAO;IACLjB;IACA3D,mBAAQlD,OAAOX;MACb,IAAI,CAACyI,UAAUA,WAAWC;MAE1B,OAAOD,SAAS9H,OAAOX;IAAA;IAEzB2I,SAASb;IACTlB,cAAcgB;IACdpB;MACE,IAAI,CAACiC,UAAUA,WAAWC;MAE1B,OAAOD,SAASjC;IAAA;GAAA;AAAA;;ACzUf;EACL,OAAO;IACLoC,KAAK;IACLC,UAAU;GAAA;AAAA;AAIP;EAKL,yBAAyBC,eAAuB;IAAvB;MAAAA,oBAAuB;IAAA;IAC9C,OAAOzN,OAAO0N,OAAOC,yBAAyBF;EAAA;EAGhD,OAAO;IAAEtC;EAAA;AAAA;;ACTJ;EAKL,sBACEyC;IAEA,IAAMC,YAAY,UAACvI;MAA0B,aAAMiI;IAAN,CAAM;IAEnD,IAAMO,iBAAiB,UAACxI;MAA0B,aAAMkI;IAAN,CAAM;IAExD,IAAMO,YAAYpP,wBAChBkP,WACAC,gBACA,UAACP,KAAKC;MAAkB,WAAI/B,IAAI,UAACuC;QAAO,gBAASA;MAAT,CAAS;IAAzB,CAAyB;IAGnD,IAAMC,WAAW,UAACrL,GAAYoL;MAAiB;IAAA;IAE/C,IAAME,aAAa,UAACV,UAAyBQ;MAAiB,gBAASA;IAAT,CAAS;IAEvE,IAAMG,cAAcxP,wBAAwBkP,WAAW,UAACN;MAAQ,WAAI9N;IAAJ,CAAI;IAEpE,IAAI,CAACmO,aAAa;MAChB,OAAO;QACLC;QACAC;QACAC;QACAI;QACAD,YAAYvP,wBACVmP,gBACAG,UACAC;OAAA;;IAKN,IAAME,2BAA2BzP,wBAC/BiP,aACAE;IAGF,OAAO;MACLD,WAAWlP,wBAAwBiP,aAAaC;MAChDC,gBAAgBM;MAChBL,WAAWpP,wBAAwBiP,aAAaG;MAChDI,aAAaxP,wBAAwBiP,aAAaO;MAClDD,YAAYvP,wBACVyP,0BACAH,UACAC;KAAA;EAAA;EAKN,OAAO;IAAEG;EAAA;AAAA;;ACjEX;AAMO,2CACLC;EAEA,IAAMC,WAAWC,oBAAoB,UAAC5L,GAAc0C;IAClD,eAAQA;EAAR,CAAQ;EAGV,OAAO,mBACLA;IAEA,OAAOiJ,SAASjJ,OAAY;EAAA;AAAA;AAIzB,6BACLgJ;EAEA,OAAO,mBACLhJ,OACAmJ;IAEA,iCACEC;MAEA,OAAOC,MAAMD;IAAA;IAGf,IAAME,aAAa,UAAC5C;MAClB,IAAI6C,wBAAwBJ,MAAM;QAChCH,QAAQG,IAAI5E,SAASmC;OAAA,MAChB;QACLsC,QAAQG,KAAKzC;;IAAA;IAIjB,IAAI8C,SAAQxJ,QAAQ;MAIlBsJ,WAAWtJ;MAGX,OAAOA;KAAA,MACF;MAIL,OAAOyJ,iBAAgBzJ,OAAOsJ;;EAAA;AAAA;;ACnD7B,uBAA0BI,QAAWf;EAC1C,IAAMjL,MAAMiL,SAASe;EAErB,IAAIpN,QAAQC,IAAIC,aAAa,gBAAgBkB,QAAQ,QAAW;IAC9DnC,QAAQC,KACN,0EACA,mEACA,+BACAkO,QACA,kCACAf,SAASjE;;EAIb,OAAOhH;AAAA;AAGF,6BACLwK;EAEA,IAAI,CAAC/L,MAAMC,QAAQ8L,WAAW;IAC5BA,WAAWxN,OAAOiP,OAAOzB;;EAG3B,OAAOA;AAAA;AAGF,mCACL0B,aACAjB,UACA3I;EAEA4J,cAAcC,oBAAoBD;EAElC,IAAME,QAAa;EACnB,IAAMC,UAAuB;EAE7B,KAAqB,0EAAa;IAAlC,IAAWL;IACT,IAAMhB,KAAKsB,cAAcN,QAAQf;IACjC,IAAID,MAAM1I,MAAMkI,UAAU;MACxB6B,QAAQlM,KAAK;QAAE6K;QAAIuB,SAASP;MAAA;KAAA,MACvB;MACLI,MAAMjM,KAAK6L;;;EAGf,OAAO,CAACI,OAAOC;AAAA;;AC9BV,oCACLpB;EAIA,uBAAuBe,QAAW1J;IAChC,IAAMtC,MAAMsM,cAAcN,QAAQf;IAElC,IAAIjL,OAAOsC,MAAMkI,UAAU;MACzB;;IAGFlI,MAAMiI,IAAIpK,KAAKH;IACfsC,MAAMkI,SAASxK,OAAOgM;EAAA;EAGxB,wBACEE,aACA5J;IAEA4J,cAAcC,oBAAoBD;IAElC,KAAqB,0EAAa;MAAlC,IAAWF;MACTQ,cAAcR,QAAQ1J;;EAAA;EAI1B,uBAAuB0J,QAAW1J;IAChC,IAAMtC,MAAMsM,cAAcN,QAAQf;IAClC,IAAI,EAAEjL,OAAOsC,MAAMkI,WAAW;MAC5BlI,MAAMiI,IAAIpK,KAAKH;;IAEjBsC,MAAMkI,SAASxK,OAAOgM;EAAA;EAGxB,wBACEE,aACA5J;IAEA4J,cAAcC,oBAAoBD;IAClC,KAAqB,0EAAa;MAAlC,IAAWF;MACTS,cAAcT,QAAQ1J;;EAAA;EAI1B,uBACE4J,aACA5J;IAEA4J,cAAcC,oBAAoBD;IAElC5J,MAAMiI,MAAM;IACZjI,MAAMkI,WAAW;IAEjBkC,eAAeR,aAAa5J;EAAA;EAG9B,0BAA0BtC,KAAesC;IACvC,OAAOqK,kBAAkB,CAAC3M,MAAMsC;EAAA;EAGlC,2BAA2B3C,MAA2B2C;IACpD,IAAIsK,YAAY;IAEhBjN,KAAK+J,QAAQ,UAAC1J;MACZ,IAAIA,OAAOsC,MAAMkI,UAAU;QACzB,OAAOlI,MAAMkI,SAASxK;QACtB4M,YAAY;;IAAA;IAIhB,IAAIA,WAAW;MACbtK,MAAMiI,MAAMjI,MAAMiI,IAAI/B,OAAO,UAACwC;QAAO,aAAM1I,MAAMkI;MAAZ,CAAY;;EAAA;EAIrD,0BAA0BlI;IACxBtF,OAAO0N,OAAOpI,OAAO;MACnBiI,KAAK;MACLC,UAAU;KAAA;EAAA;EAId,oBACE7K,MACAkN,QACAvK;IAEA,IAAMwK,YAAWxK,MAAMkI,SAASqC,OAAO7B;IACvC,IAAMqB,UAAarP,OAAO0N,OAAO,IAAIoC,WAAUD,OAAON;IACtD,IAAMQ,SAAST,cAAcD,SAASpB;IACtC,IAAM+B,YAAYD,WAAWF,OAAO7B;IAEpC,IAAIgC,WAAW;MACbrN,KAAKkN,OAAO7B,MAAM+B;MAClB,OAAOzK,MAAMkI,SAASqC,OAAO7B;;IAG/B1I,MAAMkI,SAASuC,UAAUV;IAEzB,OAAOW;EAAA;EAGT,0BAA0BH,QAAmBvK;IAC3C,OAAO2K,kBAAkB,CAACJ,SAASvK;EAAA;EAGrC,2BACE4K,SACA5K;IAEA,IAAM6K,UAAsC;IAE5C,IAAMC,mBAAgD;IAEtDF,QAAQxD,QAAQ,UAACmD;MAEf,IAAIA,OAAO7B,MAAM1I,MAAMkI,UAAU;QAE/B4C,iBAAiBP,OAAO7B,MAAM;UAC5BA,IAAI6B,OAAO7B;UAGXuB,SAASjG,kCACH8G,iBAAiBP,OAAO7B,MACxBoC,iBAAiBP,OAAO7B,IAAIuB,UAC5B,OACDM,OAAON;SAAA;;IAAA;IAMlBW,UAAUlQ,OAAOiP,OAAOmB;IAExB,IAAMC,oBAAoBH,QAAQzQ,SAAS;IAE3C,IAAI4Q,mBAAmB;MACrB,IAAMC,eACJJ,QAAQ1E,OAAO,UAACqE;QAAW,kBAAWM,SAASN,QAAQvK;MAA5B,CAA4B,EAAQ7F,SAC/D;MAEF,IAAI6Q,cAAc;QAChBhL,MAAMiI,MAAMjI,MAAMiI,IAAI9B,IAAI,UAACuC;UAAO,eAAQA,OAAOA;QAAf,CAAe;;;EAAA;EAKvD,0BAA0BgB,QAAW1J;IACnC,OAAOiL,kBAAkB,CAACvB,SAAS1J;EAAA;EAGrC,2BACE4J,aACA5J;IAEM,SAAmBkL,0BACvBtB,aACAjB,UACA3I;MAHK8J;MAAOC,eAGZ;IAGFY,kBAAkBZ,SAAS/J;IAC3BoK,eAAeN,OAAO9J;EAAA;EAGxB,OAAO;IACLmL,WAAWC,kCAAkCC;IAC7CC,QAAQpC,oBAAoBgB;IAC5BqB,SAASrC,oBAAoBkB;IAC7BoB,QAAQtC,oBAAoBiB;IAC5BsB,SAASvC,oBAAoBwC;IAC7BC,QAAQzC,oBAAoB0C;IAC5BC,WAAW3C,oBAAoB4C;IAC/BC,YAAY7C,oBAAoByB;IAChCqB,WAAW9C,oBAAoB+C;IAC/BC,YAAYhD,oBAAoB+B;IAChCkB,WAAWjD,oBAAoBkD;IAC/BC,YAAYnD,oBAAoBmB;GAAA;AAAA;;ACnL7B,kCACL1B,UACA2D;EAIM,SACJC,2BAA2B5D;IADrBwD;IAAWE;IAAYlB,wBACF;EAE7B,uBAAuBzB,QAAW1J;IAChC,OAAOoK,eAAe,CAACV,SAAS1J;EAAA;EAGlC,wBACE4J,aACA5J;IAEA4J,cAAcC,oBAAoBD;IAElC,IAAM4C,SAAS5C,YAAY1D,OACzB,UAACuG;MAAU,SAAEzC,cAAcyC,OAAO9D,aAAa3I,MAAMkI;IAA1C,CAA0C;IAGvD,IAAIsE,OAAOrS,WAAW,GAAG;MACvBuS,MAAMF,QAAQxM;;EAAA;EAIlB,uBAAuB0J,QAAW1J;IAChC,OAAO0L,eAAe,CAAChC,SAAS1J;EAAA;EAGlC,wBACE4J,aACA5J;IAEA4J,cAAcC,oBAAoBD;IAClC,IAAIA,YAAYzP,WAAW,GAAG;MAC5BuS,MAAM9C,aAAa5J;;EAAA;EAIvB,uBACE4J,aACA5J;IAEA4J,cAAcC,oBAAoBD;IAClC5J,MAAMkI,WAAW;IACjBlI,MAAMiI,MAAM;IAEZmC,eAAeR,aAAa5J;EAAA;EAG9B,0BAA0BuK,QAAmBvK;IAC3C,OAAO2K,kBAAkB,CAACJ,SAASvK;EAAA;EAIrC,0BAA0BwM,QAAajC,QAAmBvK;IACxD,IAAI,EAAEuK,OAAO7B,MAAM1I,MAAMkI,WAAW;MAClC,OAAO;;IAGT,IAAMsC,YAAWxK,MAAMkI,SAASqC,OAAO7B;IACvC,IAAMqB,UAAUrP,OAAO0N,OAAO,IAAIoC,WAAUD,OAAON;IACnD,IAAMQ,SAAST,cAAcD,SAASpB;IAEtC,OAAO3I,MAAMkI,SAASqC,OAAO7B;IAE7B8D,OAAO3O,KAAKkM;IAEZ,OAAOU,WAAWF,OAAO7B;EAAA;EAG3B,2BACEkC,SACA5K;IAEA,IAAMwM,SAAc;IAEpB5B,QAAQxD,QAAQ,UAACmD;MAAW,wBAAiBiC,QAAQjC,QAAQvK;IAAjC,CAAiC;IAE7D,IAAIwM,OAAOrS,WAAW,GAAG;MACvBuS,MAAMF,QAAQxM;;EAAA;EAIlB,0BAA0B0J,QAAW1J;IACnC,OAAOiL,kBAAkB,CAACvB,SAAS1J;EAAA;EAGrC,2BACE4J,aACA5J;IAEM,SAAmBkL,0BACvBtB,aACAjB,UACA3I;MAHK8J;MAAOC,eAGZ;IAGFY,kBAAkBZ,SAAS/J;IAC3BoK,eAAeN,OAAO9J;EAAA;EAGxB,wBAAwB2M,GAAuBC;IAC7C,IAAID,EAAExS,WAAWyS,EAAEzS,QAAQ;MACzB,OAAO;;IAGT,SAAS0S,IAAI,GAAGA,IAAIF,EAAExS,UAAU0S,IAAID,EAAEzS,QAAQ0S,KAAK;MACjD,IAAIF,EAAEE,OAAOD,EAAEC,IAAI;QACjB;;MAEF,OAAO;;IAET,OAAO;EAAA;EAGT,eAAeL,QAAsBxM;IAEnCwM,OAAOpF,QAAQ,UAACqF;MACdzM,MAAMkI,SAASS,SAAS8D,UAAUA;IAAA;IAGpC,IAAMK,cAAcpS,OAAOiP,OAAO3J,MAAMkI;IACxC4E,YAAYR,KAAKA;IAEjB,IAAMS,eAAeD,YAAY3G,IAAIwC;IAC7B,UAAQ3I,SAAR;IAER,IAAI,CAACgN,eAAe/E,KAAK8E,eAAe;MACtC/M,MAAMiI,MAAM8E;;EAAA;EAIhB,OAAO;IACLZ;IACAE;IACAlB;IACAG,QAAQpC,oBAAoBgB;IAC5B2B,WAAW3C,oBAAoB4C;IAC/BE,WAAW9C,oBAAoB+C;IAC/BT,QAAQtC,oBAAoBiB;IAC5BsB,SAASvC,oBAAoBwC;IAC7BC,QAAQzC,oBAAoB0C;IAC5BL,SAASrC,oBAAoBkB;IAC7B2B,YAAY7C,oBAAoByB;IAChCuB,YAAYhD,oBAAoB+B;GAAA;AAAA;;ACnJ7B,6BACL9L,OAGI;EAHJ;IAAAA,YAGI;EAAA;EAEE,SAAkD6E;MACtDiJ,cAAc;MACdtE,UAAU,UAACuE;QAAkB,gBAASxE;MAAT;KAAS,EACnCvJ;IAHGwJ;IAAUsE,8BAGb;EAGL,IAAME,eAAeC;EACrB,IAAMC,mBAAmBC;EACzB,IAAMC,eAAeN,eACjBO,yBAAyB7E,UAAUsE,gBACnCV,2BAA2B5D;EAE/B,OAAO3E;IACL2E;IACAsE;GAAA,EACGE,eACAE,mBACAE;AAAA;;ACrCP,IAAIE,cACF;AAMK,IAAIC,SAAS,UAACC,IAAO;EAAP;IAAAA,SAAO;EAAA;EAC1B,IAAIjF,KAAK;EAET,IAAImE,IAAIc;EACR,OAAOd,KAAK;IAEVnE,MAAM+E,YAAaG,KAAKC,WAAW,KAAM;;EAE3C,OAAOnF;AAAA;;ACsCT,IAAMoF,mBAAiD,CACrD,QACA,WACA,SACA;AAGF;EAME,yBACkBvJ,SACAC;IADA;IACA;EAAA;EAAA;AAAA,CARpB,CAQoB;AAIpB;EAME,yBACkBD,SACAC;IADA;IACA;EAAA;EAAA;AAAA,CARpB,CAQoB;AAUb,IAAMuJ,qBAAqB,UAACpU;EACjC,IAAI,OAAOA,UAAU,YAAYA,UAAU,MAAM;IAC/C,IAAMqU,cAA+B;IACrC,KAAuB,yFAAkB;MAAzC,IAAWC;MACT,IAAI,OAAOtU,MAAMsU,cAAc,UAAU;QACvCD,YAAYC,YAAYtU,MAAMsU;;;IAIlC,OAAOD;;EAGT,OAAO;IAAErR,SAASuR,OAAOvU;EAAA;AAAA;AAyVpB,0BAKLwU,YACAC,gBACAjP;EAOA,IAAMkP,YAIF3G,aACFyG,aAAa,cACb,UACE5J,SACA+J,WACAnF,KACA3E;IACI;MACJD;MACAC,MAAM+J,iCACC/J,QAAgB,KADjB;QAEJ2E;QACAmF;QACAE,eAAe;OAAA;KAAA;EANb,CAMa;EAKrB,IAAMC,UACJ/G,aACEyG,aAAa,YACb,UAACG,WAAmBnF,KAAe3E;IAAwB;MACzDD,SAAS;MACTC,MAAM+J,iCACC/J,QAAgB,KADjB;QAEJ2E;QACAmF;QACAE,eAAe;OAAA;KAAA;EANwC,CAMxC;EAKvB,IAAME,WACJhH,aACEyG,aAAa,aACb,UACErM,OACAwM,WACAnF,KACA5E,SACAC;IACI;MACJD;MACAzC,OAAS,YAAW3C,QAAQwP,kBAAmBZ,oBAC7CjM,SAAS;MAEX0C,MAAM+J,iCACC/J,QAAgB,KADjB;QAEJ2E;QACAmF;QACAM,mBAAmB,CAAC,CAACrK;QACrBiK,eAAe;QACfK,SAAS,gCAAOhI,UAAS;QACzBnK,WAAW,gCAAOmK,UAAS;OAAA;KAAA;EAZzB,CAYyB;EAKnC,IAAIiI,mBAAmB;EAEvB,IAAMC,KACJ,OAAOC,oBAAoB,cACvBA;IACA;MACE,cAAsB;QACpBH,SAAS;QACTI,+BAAmB;QACnBC;UACE,OAAO;QAAA;QAETC,sBAAU;QACVC,kCAAsB;OAAA;IAAA;IAExBC;MACE,IAAI/S,QAAQC,IAAIC,aAAa,cAAc;QACzC,IAAI,CAACsS,kBAAkB;UACrBA,mBAAmB;UACnBvT,QAAQ+T,KACN;;;IAAA;IAAA;EAAA,CAfV,CAeU;EAQhB,uBACEnG;IAEA,OAAO,UAACoG,UAAUxP,UAAUyP;MAC1B,IAAMlB,YAAY,oCAASmB,eACvBtQ,QAAQsQ,YAAYtG,OACpBuE;MAEJ,IAAMgC,kBAAkB,IAAIX;MAC5B,IAAIY;MAEJ,IAAMC,iBAAiB,IAAIC,QAAe,UAACvS,GAAGwS;QAC5C,uBAAgBC,OAAOd,iBAAiB,SAAS;UAC/C,cAAO;YAAEpI,MAAM;YAAclK,SAASgT,eAAe;UAAA;QAArD,CAAqD;MADvD,CACuD;MAIzD,IAAIzU,UAAU;MACd,eAAe8U;QACb,IAAI9U,SAAS;UACXyU,cAAcK;UACdN,gBAAgBO;;MAAA;MAIpB,IAAMC,UAAW;QAAkB;;;;;;gBAG3BC,kBAAkB,yCAASzT,cAAT,iCAAqByM,KAAK;kBAAEpJ;kBAAUyP;gBAAA;qBACxDY,WAAWD,kBAAX;gBACgB,qBAAMA;;gBAAxBA,kBAAkBrQ,SAAM;;;gBAE1B,IAAIqQ,oBAAoB,OAAO;kBAE7B,MAAM;oBACJtJ,MAAM;oBACNlK,SAAS;mBAAA;;gBAGbzB,UAAU;gBACVqU,SACEd,QACEH,WACAnF,KACA,yCAASkH,mBAAT,iCAA0B;kBAAE/B;kBAAWnF;gBAAA,GAAO;kBAAEpJ;kBAAUyP;gBAAA;gBAGhD,qBAAMK,QAAQS,KAAK,CAC/BV,gBACAC,QAAQU,QACNnC,eAAejF,KAAK;kBAClBoG;kBACAxP;kBACAyP;kBACAlB;kBACAyB,QAAQL,gBAAgBK;kBACxBS,iBAAkB,UAChB7W,OACA6K;oBAEA,OAAO,IAAIiM,gBAAgB9W,OAAO6K;kBAAA;kBAEpCkM,kBAAmB,UAAC/W,OAAgB6K;oBAClC,OAAO,IAAImM,gBAAgBhX,OAAO6K;kBAAA;iBAAA,GAGtCoM,KAAK,UAAC1R;kBACN,IAAIA,kBAAkBuR,iBAAiB;oBACrC,MAAMvR;;kBAER,IAAIA,kBAAkByR,iBAAiB;oBACrC,OAAOtC,UAAUnP,OAAOqF,SAAS+J,WAAWnF,KAAKjK,OAAOsF;;kBAE1D,OAAO6J,UAAUnP,QAAeoP,WAAWnF;gBAAA;;gBA1B/C0H,cAAc/Q,SA0BiC;;;;gBAI/C+Q,cACEC,iBAAeL,kBACX/B,SAAS,MAAMJ,WAAWnF,KAAK2H,MAAIvM,SAASuM,MAAItM,QAChDkK,SAASoC,OAAYxC,WAAWnF;;;gBAOlC4H,eACJ5R,WACA,CAACA,QAAQ6R,8BACTtC,SAAS/J,MAAMkM,gBACdA,YAAoBrM,KAAK9H;gBAE5B,IAAI,CAACqU,cAAc;kBACjBxB,SAASsB;;gBAEX,sBAAOA;;;SAAA;MAAA;MAET,OAAOnW,OAAO0N,OAAO8H,SAAyB;QAC5CD;QACA3B;QACAnF;QACA8H;UACE,OAAOf,QAAQU,KAAUM;QAAA;OAAA;IAAA;EAAA;EAMjC,OAAOxW,OAAO0N,OACZ3D,eAKA;IACEgK;IACAC;IACAL;IACAF;GAAA;AAAA;AAmBC,sBACL9O;EAEA,IAAIA,OAAOmF,QAAQnF,OAAOmF,KAAKoK,mBAAmB;IAChD,MAAMvP,OAAOkF;;EAEf,IAAIlF,OAAOyC,OAAO;IAChB,MAAMzC,OAAOyC;;EAEf,OAAOzC,OAAOkF;AAAA;AAOhB,oBAAoB5K;EAClB,OACEA,UAAU,QACV,OAAOA,UAAU,YACjB,OAAOA,MAAMiX,SAAS;AAAA;;AC9kBnB,IAAMO,mBAAmB,UAC9BC;EAEA,OAAOA,KAAK,OAAQA,EAA0BzM,UAAU;AAAA;;ACtG1D,IAAM0M,UAAU,UAAC/L,SAAuBjG;EACtC,IAAI8R,iBAAiB7L,UAAU;IAC7B,OAAOA,QAAQX,MAAMtF;GAAA,MAChB;IACL,OAAOiG,QAAQjG;;AAAA;AAaZ;EAAA;OAAA,UACF,EADE/F,qBACF,EADEA,IACF;IADEgY;;EAGL,OAAO,UAACjS;IACN,OAAOiS,SAAS5N,KAAK,UAAC4B;MAAY,eAAQA,SAASjG;IAAjB,CAAiB;EAAA;AAAA;AAahD;EAAA;OAAA,UACF,EADE/F,qBACF,EADEA,IACF;IADEgY;;EAGL,OAAO,UAACjS;IACN,OAAOiS,SAAS1M,MAAM,UAACU;MAAY,eAAQA,SAASjG;IAAjB,CAAiB;EAAA;AAAA;AAUjD,oCACLA,QACAkS;EAEA,IAAI,CAAClS,UAAU,CAACA,OAAOmF,MAAM,OAAO;EAEpC,IAAMgN,oBAAoB,OAAOnS,OAAOmF,KAAK8J,cAAc;EAC3D,IAAMmD,wBACJF,YAAY/T,QAAQ6B,OAAOmF,KAAKgK,iBAAiB;EAEnD,OAAOgD,qBAAqBC;AAAA;AAG9B,2BAA2B9E;EACzB,OACE,OAAOA,EAAE,OAAO,cAChB,aAAaA,EAAE,MACf,eAAeA,EAAE,MACjB,cAAcA,EAAE;AAAA;AAwCb;EAAA;OAAA,UAEF,EAFErT,qBAEF,EAFEA,IAEF;IAFEoY;;EAGL,IAAIA,YAAYvX,WAAW,GAAG;IAC5B,OAAO,UAACkF;MAAgB,kCAA2BA,QAAQ,CAAC;IAApC,CAAoC;;EAG9D,IAAI,CAACsS,kBAAkBD,cAAc;IACnC,OAAOE,YAAYF,YAAY;;EAGjC,OAAO,UACLrS;IAGA,IAAMiS,WAA8CI,YAAYvL,IAC9D,UAAC0L;MAAe,kBAAWpD;IAAX,CAAW;IAG7B,IAAMqD,kBAAkBC,sBAAWT;IAEnC,OAAOQ,gBAAgBzS;EAAA;AAAA;AA0CpB;EAAA;OAAA,UAEF,EAFE/F,qBAEF,EAFEA,IAEF;IAFEoY;;EAGL,IAAIA,YAAYvX,WAAW,GAAG;IAC5B,OAAO,UAACkF;MAAgB,kCAA2BA,QAAQ,CAAC;IAApC,CAAoC;;EAG9D,IAAI,CAACsS,kBAAkBD,cAAc;IACnC,OAAOM,aAAaN,YAAY;;EAGlC,OAAO,UACLrS;IAGA,IAAMiS,WAA8CI,YAAYvL,IAC9D,UAAC0L;MAAe,kBAAWnD;IAAX,CAAW;IAG7B,IAAMoD,kBAAkBC,sBAAWT;IAEnC,OAAOQ,gBAAgBzS;EAAA;AAAA;AA+CpB;EAAA;OAAA,UAEF,EAFE/F,qBAEF,EAFEA,IAEF;IAFEoY;;EAGL,IAAMO,UAAU,UAAC5S;IACf,OAAOA,UAAUA,OAAOmF,QAAQnF,OAAOmF,KAAKoK;EAAA;EAG9C,IAAI8C,YAAYvX,WAAW,GAAG;IAC5B,OAAO,UAACkF;MACN,IAAMyS,kBAAkBI,QAAQF,yBAAcN,cAAcO;MAE5D,OAAOH,gBAAgBzS;IAAA;;EAI3B,IAAI,CAACsS,kBAAkBD,cAAc;IACnC,OAAOS,sBAAsBT,YAAY;;EAG3C,OAAO,UACLrS;IAEA,IAAMyS,kBAAkBI,QAAQF,yBAAcN,cAAcO;IAE5D,OAAOH,gBAAgBzS;EAAA;AAAA;AA0CpB;EAAA;OAAA,UAEF,EAFE/F,qBAEF,EAFEA,IAEF;IAFEoY;;EAGL,IAAIA,YAAYvX,WAAW,GAAG;IAC5B,OAAO,UAACkF;MAAgB,kCAA2BA,QAAQ,CAAC;IAApC,CAAoC;;EAG9D,IAAI,CAACsS,kBAAkBD,cAAc;IACnC,OAAOU,cAAcV,YAAY;;EAGnC,OAAO,UACLrS;IAGA,IAAMiS,WAA8CI,YAAYvL,IAC9D,UAAC0L;MAAe,kBAAWxD;IAAX,CAAW;IAG7B,IAAMyD,kBAAkBC,sBAAWT;IAEnC,OAAOQ,gBAAgBzS;EAAA;AAAA;AAiDpB;EAAA;OAAA,UAEF,EAFE/F,qBAEF,EAFEA,IAEF;IAFEoY;;EAGL,IAAIA,YAAYvX,WAAW,GAAG;IAC5B,OAAO,UAACkF;MACN,kCAA2BA,QAAQ,CAAC,WAAW,aAAa;IAA5D,CAA4D;;EAGhE,IAAI,CAACsS,kBAAkBD,cAAc;IACnC,OAAOW,qBAAqBX,YAAY;;EAG1C,OAAO,UACLrS;IAGA,IAAMiS,WAA8C;IAEpD,KAAyB,0EAAa;MAAtC,IAAWO;MACTP,SAASzT,KACPgU,WAAWpD,SACXoD,WAAWnD,UACXmD,WAAWxD;;IAIf,IAAMyD,kBAAkBC,sBAAWT;IAEnC,OAAOQ,gBAAgBzS;EAAA;AAAA;;ACtapB,IAAMiT,iBAG0C,UACrDC,MACAC;EAEA,IAAI,OAAOD,SAAS,YAAY;IAC9B,MAAM,IAAIE,UAAaD;;AAAA;AAIpB,IAAME,OAAO,aAAM;AAEnB,IAAMC,iBAAiB,UAC5BzC,SACA0C,OAAU;EAAV;IAAAA,cAAU;EAAA;EAEV1C,QAAQ2C,MAAMD;EAEd,OAAO1C;AAAA;AAGF,IAAM4C,yBAAyB,UACpCC,aACAC;EAEAD,YAAY9D,iBAAiB,SAAS+D,UAAU;IAAEC,MAAM;EAAA;AAAA;AAanD,IAAMC,4BAA4B,UACvCxD,iBACAM;EAIA,IAAMD,SAASL,gBAAgBK;EAE/B,IAAIA,OAAOlB,SAAS;IAClB;;EAOF,IAAI,EAAE,YAAYkB,SAAS;IACzBrV,OAAOyY,eAAepD,QAAQ,UAAU;MACtCqD,YAAY;MACZzZ,OAAOqW;MACPqD,cAAc;MACdC,UAAU;KAAA;;EAId;EAAE5D,gBAAgBO,MAAkCD;AAAA;;ACjEtD,IAAMuD,OAAO;AACb,IAAMC,WAAW;AACjB,IAAMC,YAAY;AAClB,IAAMC,YAAY;AAGX,IAAMC,gBAAgB,UAAQD;AAC9B,IAAME,gBAAgB,UAAQH;AAC9B,IAAMI,oBAAuBL,iBAAYE;AACzC,IAAMI,oBAAuBN,iBAAYC;AAEzC;EAGL,wBAAmBM;IAAA;IAFnB,YAAO;IAGL,KAAKpX,UAAa4W,aAAQG,2BAAsBK;EAAA;EAAA;AAAA,CAJ7C,CAI6C;;ACP7C,IAAMC,iBAAiB,UAACjE;EAC7B,IAAIA,OAAOlB,SAAS;IAClB,MAAM,IAAIoF,eAAgBlE,OAAyCC;;AAAA;AAShE,IAAMkE,uBAAuB,UAClCnE;EAEA,OAAO4C,eACL,IAAI9C,QAAe,UAACvS,GAAGwS;IACrB,IAAMqE,kBAAkB;MAAM,cAAO,IAAIF,eAAelE,OAAOC;IAAjC,CAAiC;IAE/D,IAAID,OAAOlB,SAAS;MAClBsF;KAAA,MACK;MACLrB,uBAAuB/C,QAAQoE;;EAAA;AAAA;AAahC,IAAMC,UAAU,UACrBC,OACAC;EAC2B;;;;;;UAEzB,qBAAMzE,QAAQU;;UAAdzQ,SAAc;UACA,qBAAMuU;;UAAd1a,QAAQmG,SAAM;UACpB,sBAAO;YACLyU,QAAQ;YACR5a;WAAA;;;UAGF,sBAAO;YACL4a,QAAQC,mBAAiBP,iBAAiB,cAAc;YACxDnS;WAAA;;UAGFwS;;;;;;GAAA;AAdyB,CAczB;;AAWG,IAAMG,cAAc,UAAI1E;EAC7B,OAAO,UAACG;IACN,OAAOyC,eACL9C,QAAQS,KAAK,CAAC4D,qBAAqBnE,SAASG,UAAUU,KAAK,UAAC8D;MAC1DV,eAAejE;MACf,OAAO2E;IAAA;EAAA;AAAA;AAYR,IAAMC,cAAc,UAAC5E;EAC1B,IAAM6E,QAAQH,YAAkB1E;EAChC,OAAO,UAAC8E;IACN,OAAOD,MAAM,IAAI/E,QAAc,UAACU;MAAY,kBAAWA,SAASsE;IAApB,CAAoB;EAAA;AAAA;;ACpB5D,aAAWna,aAAX;AAIR,IAAMoa,qBAAqB;AAE3B,IAAMC,MAAM;AAEZ,IAAMC,aAAa,UAACC;EAClB,IAAMC,kBAAkB,UAACC;IACvB,8BAAuBF,mBAAmB;MACxC,iCAA0BE,YAAYF,kBAAkBjF;IAAxD,CAAwD;EAD1D,CAC0D;EAG5D,OAAO,UAAIoF;IACT9C,eAAe8C,cAAc;IAC7B,IAAMC,uBAAuB,IAAIrG;IAEjCkG,gBAAgBG;IAEhB,IAAMnW,SAASkV,QACb;MAAwB;;;;;cACtBJ,eAAeiB;cACfjB,eAAeqB,qBAAqBtF;cACpB,qBAAMqF,aAAa;gBACjCR,OAAOH,YAAYY,qBAAqBtF;gBACxCuF,OAAOX,YAAYU,qBAAqBtF;gBACxCA,QAAQsF,qBAAqBtF;eAAA;;cAHzBwF,UAAUzV,SAGe;cAE/BkU,eAAeqB,qBAAqBtF;cACpC,sBAAOwF;;;OAAA;IATe,CASf,EAET;MAAM,iCAA0BF,sBAAsBzB;IAAhD,CAAgD;IAGxD,OAAO;MACL1U,QAAQuV,YAA2BQ,mBAAmB/V;MACtDsW;QACEtC,0BAA0BmC,sBAAsB1B;MAAA;KAAA;EAAA;AAAA;AAMxD,IAAM8B,oBAAoB,UACxBC,gBAKA3F;EASA,IAAM4F,OAAO,UACXC,WACAC;IACG;;;;;YACH7B,eAAejE;YAGX+F,cAAmC,aAAM;YAEvCC,eAAe,IAAIlG,QAA2B,UAACU;cAEnDuF,cAAcJ,eAAe;gBAC3BE;gBACAI,QAAQ,UAAC3W,QAAQ4W;kBAEfA,YAAYH;kBAEZvF,QAAQ,CACNlR,QACA4W,YAAYlW,YACZkW,YAAYC;gBAAA;eAAA;YAAA;YAMdC,WAA2D,CAC/DjC,qBAAqBnE,SACrBgG;YAGF,IAAIF,WAAW,MAAM;cACnBM,SAAStY,KACP,IAAIgS,QAAc,UAACU;gBAAY,kBAAWA,SAASsF,SAAS;cAA7B,CAA6B;;;;;YAK/C,qBAAMhG,QAAQS,KAAK6F;;YAA5BzB,SAAS5U,SAAmB;YAElCkU,eAAejE;YACf,sBAAO2E;;YAGPoB;;;;;;KAAA;EAzCC,CAyCD;;EAIJ,OAAQ,UAACF,WAAoCC;IAC3C,sBAAeF,KAAKC,WAAWC;EAA/B,CAA+B;AAAA;AAGnC,IAAMO,4BAA4B,UAACjX;EAC3B,WAAoDA,YAApD;IAAMsF,gBAA8CtF,qBAA9C;IAAemG,UAA+BnG,eAA/B;IAASyW,YAAsBzW,iBAAtB;IAAW6W,SAAW7W,cAAX;EAE/C,IAAIoB,MAAM;IACRqV,YAAYlO,aAAanH,MAAMoE;GAAA,UACtBF,eAAe;IACxBlE,OAAOkE,cAAelE;IACtBqV,YAAYnR,cAAcE;GAAA,UACjBW,SAAS;IAClBsQ,YAAYtQ;GAAA,UACHsQ,WAAW,QAEf;IACL,MAAM,IAAIhZ,MACR;;EAIJ0V,eAAe0D,QAAQ;EAEvB,OAAO;IAAEJ;IAAWrV;IAAMyV;EAAA;AAAA;AAIrB,IAAMK,sBAAyD,UACpElX;EAEM,SAA8BiX,0BAA0BjX;IAAtDoB;IAAMqV;IAAWI,kBAAqC;EAE9D,IAAMtN,KAAKgF;EACX,IAAM4I,QAAgC;IACpC5N;IACAsN;IACAzV;IACAqV;IACAnH,SAAS,IAAI8H;IACbT,aAAa;MACX,MAAM,IAAIlZ,MAAM;IAAA;GAAA;EAIpB,OAAO0Z;AAAA;AAGT,IAAME,gCAAgC,UACpCC;EAEA,OAAO;IACLA,YAAYrP,QAAQsP;IAEpBD,YAAYE;EAAA;AAAA;AAWhB,IAAMC,oBAAoB,UACxBC,cACAC,eACAC;EAEA,IAAI;IACFF,aAAaC,eAAeC;GAAA,QACrBC,mBAAP;IAGAC,WAAW;MACT,MAAMD;IAAA,GACL;;AAAA;AAOA,IAAME,cAAcxP,aACtBqN;AAME,IAAMoC,oBAAoBzP,aAAgBqN;AAK1C,IAAMqC,iBAAiB1P,aACzBqN;AAGL,IAAMsC,sBAA4C;EAAA;OAAA,UAAI,EAAJ/d,qBAAI,EAAJA,IAAI;IAAJC;;EAChDgC,QAAQuG,YAARvG,wBAAiBwZ,iBAAgBxb;AAAA;AAGnC,IAAMmd,wBAAwB,UAC5BJ;EAEAA,MAAM7H,QAAQrH,QAAQ,UAAC+N;IACrBjC,0BAA0BiC,YAAYtB;EAAA;AAAA;AAOnC,kCAILyD,iBAAoE;EAJ/D;EAIL;IAAAA,sBAAoE;EAAA;EACpE,IAAMb,cAAc,IAAIc;EAChB,YAAyCD,uBAAzC;IAAOxX,KAAkCwX,yBAAxB;IAAV1E,0BAAUyE;EAEzB/E,eAAeM,SAAS;EAExB,IAAM4E,cAAc,UAAClB;IACnBA,MAAMR,cAAc;MAAM,mBAAY2B,OAAOnB,MAAO5N;IAA1B,CAA0B;IAEpD+N,YAAYiB,IAAIpB,MAAM5N,IAAI4N;IAC1B,OAAO,UAACqB;MACNrB,MAAMR;MACN,IAAI6B,+CAAeC,cAAc;QAC/BlB,sBAAsBJ;;IAAA;EAAA;EAK5B,IAAMuB,oBAAoB,UACxBC;IAEA,KAAoB,UAAY,EAAZhY,iBAAY6J,UAAZrQ,cAAY,EAAZA,IAAY,EAAU;MAA1C,IAAWgd;MACT,IAAIwB,WAAWxB,QAAQ;QACrB,OAAOA;;;IAIX,OAAO;EAAA;EAGT,IAAMZ,iBAAiB,UAACvW;IACtB,IAAImX,QAAQuB,kBACV,UAACE;MAAkB,qBAAc/B,WAAW7W,QAAQ6W;IAAjC,CAAiC;IAGtD,IAAI,CAACM,OAAO;MACVA,QAAQD,oBAAoBlX;;IAG9B,OAAOqY,YAAYlB;EAAA;EAGrB,IAAM0B,gBAAgB,UACpB7Y;IAEM,SAA8BiX,0BAA0BjX;MAAtDoB;MAAMyV;MAAQJ,wBAAwC;IAE9D,IAAMU,QAAQuB,kBAAkB,UAACI;MAC/B,IAAMC,uBACJ,OAAO3X,SAAS,WACZ0X,OAAM1X,SAASA,OACf0X,OAAMrC,cAAcA;MAE1B,OAAOsC,wBAAwBD,OAAMjC,WAAWA;IAAA;IAGlD,IAAIM,OAAO;MACTA,MAAMR;MACN,IAAI3W,QAAQyY,cAAc;QACxBlB,sBAAsBJ;;;IAI1B,OAAO,CAAC,CAACA;EAAA;EAGX,IAAM6B,iBAAiB,UACrB7B,OACAjX,QACA+Y,KACAlC;IACG;;;;;YACGmC,yBAAyB,IAAIrJ;YAC7B2G,OAAOF,kBACXC,gBACA2C,uBAAuBtI;;;;YAIvBuG,MAAM7H,QAAQ6J,IAAID;YAClB,qBAAMxI,QAAQU,QACZ+F,MAAMN,OACJ3W,QAEA+I,OAAO,IAAIgQ,KAAK;cACdlC;cACAxZ,WAAW,UACTkZ,WACAC;gBACG,YAAKD,WAAWC,SAASjF,KAAK2H;cAA9B,CAA8B;cACnC5C;cACAL,OAAOX,YAAY0D,uBAAuBtI;cAC1C6E,OAAOH,YAAiB4D,uBAAuBtI;cAC/CP;cACAO,QAAQsI,uBAAuBtI;cAC/ByI,MAAMxD,WAAWqD,uBAAuBtI;cACxC+F,aAAaQ,MAAMR;cACnB2C,WAAW;gBACThC,YAAYiB,IAAIpB,MAAM5N,IAAI4N;cAAA;cAE5BI,uBAAuB;gBACrBJ,MAAM7H,QAAQrH,QAAQ,UAAC+N,YAAY7X,GAAGoa;kBACpC,IAAIvC,eAAekD,wBAAwB;oBACzCnF,0BAA0BiC,YAAYtB;oBACtC6D,IAAID,OAAOtC;;gBAAA;cAAA;aAAA;;YAxBvBrV,SAwBuB;;;;YAQvB,IAAI,EAAE4Y,2BAAyBzE,iBAAiB;cAC9C2C,kBAAkBhE,SAAS8F,iBAAe;gBACxCC,UAAU;eAAA;;;;YAIdzF,0BAA0BmF,wBAAwBvE;YAClDwC,MAAM7H,QAAQgJ,OAAOY;;;;;;KAAA;EAhDpB,CAgDoB;;EAIzB,IAAMO,0BAA0BpC,8BAA8BC;EAE9D,IAAMtT,aACJ,UAACiV;IAAQ,iBAAChZ;MAAS,iBAACC;QAClB,IAAI6X,YAAYvS,MAAMtF,SAAS;UAC7B,OAAOqW,eAAerW,OAAOkF;;QAG/B,IAAI4S,kBAAkBxS,MAAMtF,SAAS;UACnCuZ;UACA;;QAGF,IAAIxB,eAAezS,MAAMtF,SAAS;UAChC,OAAO2Y,cAAc3Y,OAAOkF;;QAI9B,IAAIsU,gBAA+CT,IAAIrY;QAIvD,IAAMmW,mBAAmB;UACvB,IAAI2C,kBAAkB/D,oBAAoB;YACxC,MAAM,IAAIlY,MACLmY;;UAIP,OAAO8D;QAAA;QAGT,IAAI3Z;QAEJ,IAAI;UAEFA,SAASE,KAAKC;UAEd,IAAIoX,YAAY9I,OAAO,GAAG;YACxB,IAAImL,eAAeV,IAAIrY;YAEvB,IAAMgZ,kBAAkB5c,MAAM6c,KAAKvC,YAAY9M;YAC/C,KAAkB,sFAAiB;cAAnC,IAAS2M;cACP,IAAI2C,cAAc;cAElB,IAAI;gBACFA,cAAc3C,MAAMV,UAAUvW,QAAQyZ,cAAcD;eAAA,QAC7CK,gBAAP;gBACAD,cAAc;gBAEdrC,kBAAkBhE,SAASsG,gBAAgB;kBACzCP,UAAU;iBAAA;;cAId,IAAI,CAACM,aAAa;gBAChB;;cAGFd,eAAe7B,OAAOjX,QAAQ+Y,KAAKlC;;;SAAA,SAGvC;UAEA2C,gBAAgB/D;;QAGlB,OAAO5V;MAAA;IAhEU,CAgEV;EAhEA,CAgEA;EAGX,OAAO;IACLiE;IACAuS;IACAsC;IACAmB,gBAAgBP;GAAA;AAAA;;A3BvdpBQ","names":["createDraftSafeSelector","_i","args","selector","createSelector","wrappedSelector","value","rest","isDraft","current","composeWithDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","arguments","length","compose","apply","devToolsEnhancer","__REDUX_DEVTOOLS_EXTENSION__","noop2","proto","Object","getPrototypeOf","baseProto","maxDelay","fnName","elapsed","measureTime","fn","started","Date","now","finished","warnIfExceeded","console","warn","__extends","setPrototypeOf","_this","MiddlewareArray","prototype","Symbol","species","arr","_super","concat","Array","isArray","isProduction","process","env","NODE_ENV","prefix","condition","message","Error","obj","serializer","indent","decycler","JSON","stringify","getSerialize","stack","keys","_","slice","indexOf","join","key","thisPos","splice","push","Infinity","call","isFrozen","isImmutable","ignorePaths","trackedProperties","trackProperties","detectMutations","path","tracked","children","childPath","trackedProperty","sameParentRef","prevObj","sameRef","Number","isNaN","wasMutated","keysToDetect","result","options","next","action","isImmutableDefault","ignoredPaths","_d","warnAfter","ignore","track","trackForMutations","bind","_c","getState","state","tracker","measureUtils","getTimeMeasureUtils","invariant","dispatchedAction","val","type","isPlainObject","isSerializable","getEntries","foundNestedSerializable","keyPath","entries","hasIgnoredPaths","nestedValue","nestedPath","findNonSerializableValue","isPlain","ignoredActions","_e","ignoredActionPaths","_f","_g","_h","ignoreState","_j","ignoreActions","storeAPI","foundActionNonSerializableValue","error","foundStateNonSerializableValue","x","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","middlewareArray","isBoolean","thunkMiddleware","withExtraArgument","extraArgument","immutableOptions","unshift","createImmutableStateInvariantMiddleware","serializableOptions","createSerializableStateInvariantMiddleware","IS_PRODUCTION","curriedGetDefaultMiddleware","curryGetDefaultMiddleware","reducer","middleware","devTools","preloadedState","enhancers","rootReducer","combineReducers","finalMiddleware","some","item","middlewareEnhancer","applyMiddleware","finalCompose","compose2","__spreadValues","trace","storeEnhancers","composedEnhancer","createStore","prepareAction","prepared","payload","meta","actionCreator","toString","match","every","isValidKey","builderCallback","actionsMap","actionMatchers","defaultCaseReducer","builder","addCase","typeOrActionCreator","addMatcher","matcher","addDefaultCase","initialState","mapOrBuilderCallback","executeReducerBuilderCallback","finalActionMatchers","finalDefaultCaseReducer","getInitialState","isStateFunction","frozenInitialState_1","createNextState","caseReducers","filter","map","reducer2","cr","reduce","previousState","caseReducer","isDraft2","draft","isDraftable","actionKey","name","default2","reducers","reducerNames","sliceCaseReducersByName","sliceCaseReducersByType","actionCreators","forEach","reducerName","maybeReducerWithPrepare","getType2","prepareCallback","prepare","createAction","extraReducers","finalCaseReducers","createReducer","_reducer","buildReducer","actions","ids","entities","additionalState","assign","getInitialEntityState","selectState","selectIds","selectEntities","selectAll","id","selectId","selectById","selectTotal","selectGlobalizedEntities","getSelectors","mutator","operator","createStateOperator","arg","arg2","isFSA","runMutator","isPayloadActionArgument","isDraft3","createNextState2","entity","values","newEntities","ensureEntitiesArray","added","updated","selectIdValue","changes","addOneMutably","setOneMutably","addManyMutably","removeManyMutably","didMutate","update","original2","newKey","hasNewKey","updateManyMutably","updates","newKeys","updatesPerEntity","didMutateEntities","didMutateIds","upsertManyMutably","splitAddedUpdatedEntities","removeAll","createSingleArgumentStateOperator","removeAllMutably","addOne","addMany","setOne","setMany","setManyMutably","setAll","setAllMutably","updateOne","updateOneMutably","updateMany","upsertOne","upsertOneMutably","upsertMany","removeOne","removeOneMutably","removeMany","sort","createUnsortedStateAdapter","models","model","merge","a","b","i","allEntities","newSortedIds","areArraysEqual","sortComparer","instance","stateFactory","createInitialStateFactory","selectorsFactory","createSelectorsFactory","stateAdapter","createSortedStateAdapter","urlAlphabet","nanoid","size","Math","random","commonProperties","miniSerializeError","simpleError","property","String","typePrefix","payloadCreator","fulfilled","requestId","__spreadProps","requestStatus","pending","rejected","serializeError","rejectedWithValue","aborted","displayedWarning","AC","AbortController","addEventListener","dispatchEvent","onabort","removeEventListener","class_1","info","dispatch","extra","idGenerator","abortController","abortReason","abortedPromise","Promise","reject","signal","reason","abort","promise","conditionResult","isThenable","getPendingMeta","race","resolve","rejectWithValue","RejectWithValue","fulfillWithValue","FulfillWithMeta","then","finalAction","err_1","skipDispatch","dispatchConditionRejection","unwrap","unwrapResult","hasMatchFunction","v","matches","matchers","validStatus","hasValidRequestId","hasValidRequestStatus","asyncThunks","isAsyncThunkArray","isPending","asyncThunk","combinedMatcher","isAnyOf","isRejected","hasFlag","isAllOf","isRejectedWithValue","isFulfilled","isAsyncThunkAction","assertFunction","func","expected","TypeError","noop","catchRejection","onError","catch","addAbortSignalListener","abortSignal","callback","once","abortControllerWithReason","defineProperty","enumerable","configurable","writable","task","listener","completed","cancelled","taskCancelled","taskCompleted","listenerCancelled","listenerCompleted","code","validateActive","TaskAbortError","promisifyAbortSignal","notifyRejection","runTask","task2","cleanUp","status","error_1","createPause","output","createDelay","pause","timeoutMs","INTERNAL_NIL_TOKEN","alm","createFork","parentAbortSignal","linkControllers","controller","taskExecutor","childAbortController","delay","result2","cancel","createTakePattern","startListening","take","predicate","timeout","unsubscribe","tuplePromise","effect","listenerApi","getOriginalState","promises","getListenerEntryPropsFrom","createListenerEntry","entry","Set","createClearListenerMiddleware","listenerMap","cancelActiveListeners","clear","safelyNotifyError","errorHandler","errorToNotify","errorInfo","errorHandlerError","setTimeout","addListener","clearAllListeners","removeListener","defaultErrorHandler","middlewareOptions","Map","insertEntry","delete","set","cancelOptions","cancelActive","findListenerEntry","comparator","existingEntry","stopListening","entry2","matchPredicateOrType","notifyListener","api","internalTaskController","add","Boolean","fork","subscribe","listenerError_1","raisedBy","clearListenerMiddleware","originalState","currentState","listenerEntries","from","runListener","predicateError","clearListeners","enableES5"],"sources":["D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\index.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\createDraftSafeSelector.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\configureStore.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\devtoolsExtension.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\isPlainObject.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\getDefaultMiddleware.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\utils.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\immutableStateInvariantMiddleware.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\serializableStateInvariantMiddleware.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\createAction.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\createReducer.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\mapBuilders.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\createSlice.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\entity_state.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\state_selectors.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\state_adapter.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\utils.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\unsorted_state_adapter.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\sorted_state_adapter.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\entities\\create_adapter.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\nanoid.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\createAsyncThunk.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\tsHelpers.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\matchers.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\utils.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\exceptions.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\task.ts","D:\\open_source\\hacktobarfest\\Oju-s-Blogs\\Frontend\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\index.ts"],"sourcesContent":["import { enableES5 } from 'immer'\r\nexport * from 'redux'\r\nexport {\r\n  default as createNextState,\r\n  current,\r\n  freeze,\r\n  original,\r\n  isDraft,\r\n} from 'immer'\r\nexport type { Draft } from 'immer'\r\nexport { createSelector } from 'reselect'\r\nexport type {\r\n  Selector,\r\n  OutputParametricSelector,\r\n  OutputSelector,\r\n  ParametricSelector,\r\n} from 'reselect'\r\nexport { createDraftSafeSelector } from './createDraftSafeSelector'\r\nexport type { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\n\r\n// We deliberately enable Immer's ES5 support, on the grounds that\r\n// we assume RTK will be used with React Native and other Proxy-less\r\n// environments.  In addition, that's how Immer 4 behaved, and since\r\n// we want to ship this in an RTK minor, we should keep the same behavior.\r\nenableES5()\r\n\r\nexport {\r\n  // js\r\n  configureStore,\r\n} from './configureStore'\r\nexport type {\r\n  // types\r\n  ConfigureEnhancersCallback,\r\n  ConfigureStoreOptions,\r\n  EnhancedStore,\r\n} from './configureStore'\r\nexport {\r\n  // js\r\n  createAction,\r\n  getType,\r\n} from './createAction'\r\nexport type {\r\n  // types\r\n  PayloadAction,\r\n  PayloadActionCreator,\r\n  ActionCreatorWithNonInferrablePayload,\r\n  ActionCreatorWithOptionalPayload,\r\n  ActionCreatorWithPayload,\r\n  ActionCreatorWithoutPayload,\r\n  ActionCreatorWithPreparedPayload,\r\n  PrepareAction,\r\n} from './createAction'\r\nexport {\r\n  // js\r\n  createReducer,\r\n} from './createReducer'\r\nexport type {\r\n  // types\r\n  Actions,\r\n  CaseReducer,\r\n  CaseReducers,\r\n} from './createReducer'\r\nexport {\r\n  // js\r\n  createSlice,\r\n} from './createSlice'\r\n\r\nexport type {\r\n  // types\r\n  CreateSliceOptions,\r\n  Slice,\r\n  CaseReducerActions,\r\n  SliceCaseReducers,\r\n  ValidateSliceCaseReducers,\r\n  CaseReducerWithPrepare,\r\n  SliceActionCreator,\r\n} from './createSlice'\r\nexport {\r\n  // js\r\n  createImmutableStateInvariantMiddleware,\r\n  isImmutableDefault,\r\n} from './immutableStateInvariantMiddleware'\r\nexport type {\r\n  // types\r\n  ImmutableStateInvariantMiddlewareOptions,\r\n} from './immutableStateInvariantMiddleware'\r\nexport {\r\n  // js\r\n  createSerializableStateInvariantMiddleware,\r\n  findNonSerializableValue,\r\n  isPlain,\r\n} from './serializableStateInvariantMiddleware'\r\nexport type {\r\n  // types\r\n  SerializableStateInvariantMiddlewareOptions,\r\n} from './serializableStateInvariantMiddleware'\r\nexport {\r\n  // js\r\n  getDefaultMiddleware,\r\n} from './getDefaultMiddleware'\r\nexport type {\r\n  // types\r\n  ActionReducerMapBuilder,\r\n} from './mapBuilders'\r\nexport { MiddlewareArray } from './utils'\r\n\r\nexport { createEntityAdapter } from './entities/create_adapter'\r\nexport type {\r\n  Dictionary,\r\n  EntityState,\r\n  EntityAdapter,\r\n  EntitySelectors,\r\n  EntityStateAdapter,\r\n  EntityId,\r\n  Update,\r\n  IdSelector,\r\n  Comparer,\r\n} from './entities/models'\r\n\r\nexport {\r\n  createAsyncThunk,\r\n  unwrapResult,\r\n  miniSerializeError,\r\n} from './createAsyncThunk'\r\nexport type {\r\n  AsyncThunk,\r\n  AsyncThunkOptions,\r\n  AsyncThunkAction,\r\n  AsyncThunkPayloadCreatorReturnValue,\r\n  AsyncThunkPayloadCreator,\r\n  SerializedError,\r\n} from './createAsyncThunk'\r\n\r\nexport {\r\n  // js\r\n  isAllOf,\r\n  isAnyOf,\r\n  isPending,\r\n  isRejected,\r\n  isFulfilled,\r\n  isAsyncThunkAction,\r\n  isRejectedWithValue,\r\n} from './matchers'\r\nexport type {\r\n  // types\r\n  ActionMatchingAllOf,\r\n  ActionMatchingAnyOf,\r\n} from './matchers'\r\n\r\nexport { nanoid } from './nanoid'\r\n\r\nexport { default as isPlainObject } from './isPlainObject'\r\n\r\nexport type {\r\n  ListenerEffect,\r\n  ListenerMiddleware,\r\n  ListenerEffectAPI,\r\n  ListenerMiddlewareInstance,\r\n  CreateListenerMiddlewareOptions,\r\n  ListenerErrorHandler,\r\n  TypedStartListening,\r\n  TypedAddListener,\r\n  TypedStopListening,\r\n  TypedRemoveListener,\r\n  UnsubscribeListener,\r\n  UnsubscribeListenerOptions,\r\n  ForkedTaskExecutor,\r\n  ForkedTask,\r\n  ForkedTaskAPI,\r\n  AsyncTaskExecutor,\r\n  SyncTaskExecutor,\r\n  TaskCancelled,\r\n  TaskRejected,\r\n  TaskResolved,\r\n  TaskResult,\r\n} from './listenerMiddleware/index'\r\n\r\nexport {\r\n  createListenerMiddleware,\r\n  addListener,\r\n  removeListener,\r\n  clearAllListeners,\r\n  TaskAbortError,\r\n} from './listenerMiddleware/index'\r\n","import { current, isDraft } from 'immer'\r\nimport { createSelector } from 'reselect'\r\n\r\n/**\r\n * \"Draft-Safe\" version of `reselect`'s `createSelector`:\r\n * If an `immer`-drafted object is passed into the resulting selector's first argument,\r\n * the selector will act on the current draft value, instead of returning a cached value\r\n * that might be possibly outdated if the draft has been modified since.\r\n * @public\r\n */\r\nexport const createDraftSafeSelector: typeof createSelector = (\r\n  ...args: unknown[]\r\n) => {\r\n  const selector = (createSelector as any)(...args)\r\n  const wrappedSelector = (value: unknown, ...rest: unknown[]) =>\r\n    selector(isDraft(value) ? current(value) : value, ...rest)\r\n  return wrappedSelector as any\r\n}\r\n","import type {\r\n  Reducer,\r\n  ReducersMapObject,\r\n  Middleware,\r\n  Action,\r\n  AnyAction,\r\n  StoreEnhancer,\r\n  Store,\r\n  Dispatch,\r\n  PreloadedState,\r\n  CombinedState,\r\n} from 'redux'\r\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux'\r\nimport type { EnhancerOptions as DevToolsOptions } from './devtoolsExtension'\r\nimport { composeWithDevTools } from './devtoolsExtension'\r\n\r\nimport isPlainObject from './isPlainObject'\r\nimport type {\r\n  ThunkMiddlewareFor,\r\n  CurriedGetDefaultMiddleware,\r\n} from './getDefaultMiddleware'\r\nimport { curryGetDefaultMiddleware } from './getDefaultMiddleware'\r\nimport type { NoInfer, ExtractDispatchExtensions } from './tsHelpers'\r\n\r\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production'\r\n\r\n/**\r\n * Callback function type, to be used in `ConfigureStoreOptions.enhancers`\r\n *\r\n * @public\r\n */\r\nexport type ConfigureEnhancersCallback = (\r\n  defaultEnhancers: readonly StoreEnhancer[]\r\n) => StoreEnhancer[]\r\n\r\n/**\r\n * Options for `configureStore()`.\r\n *\r\n * @public\r\n */\r\nexport interface ConfigureStoreOptions<\r\n  S = any,\r\n  A extends Action = AnyAction,\r\n  M extends Middlewares<S> = Middlewares<S>\r\n> {\r\n  /**\r\n   * A single reducer function that will be used as the root reducer, or an\r\n   * object of slice reducers that will be passed to `combineReducers()`.\r\n   */\r\n  reducer: Reducer<S, A> | ReducersMapObject<S, A>\r\n\r\n  /**\r\n   * An array of Redux middleware to install. If not supplied, defaults to\r\n   * the set of middleware returned by `getDefaultMiddleware()`.\r\n   */\r\n  middleware?: ((getDefaultMiddleware: CurriedGetDefaultMiddleware<S>) => M) | M\r\n\r\n  /**\r\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\r\n   *\r\n   * Additional configuration can be done by passing Redux DevTools options\r\n   */\r\n  devTools?: boolean | DevToolsOptions\r\n\r\n  /**\r\n   * The initial state, same as Redux's createStore.\r\n   * You may optionally specify it to hydrate the state\r\n   * from the server in universal apps, or to restore a previously serialized\r\n   * user session. If you use `combineReducers()` to produce the root reducer\r\n   * function (either directly or indirectly by passing an object as `reducer`),\r\n   * this must be an object with the same shape as the reducer map keys.\r\n   */\r\n  /* \r\n  Not 100% correct but the best approximation we can get:\r\n  - if S is a `CombinedState` applying a second `CombinedState` on it does not change anything.\r\n  - if it is not, there could be two cases:\r\n    - `ReducersMapObject<S, A>` is being passed in. In this case, we will call `combineReducers` on it and `CombinedState<S>` is correct\r\n    - `Reducer<S, A>` is being passed in. In this case, actually `CombinedState<S>` is wrong and `S` would be correct.\r\n    As we cannot distinguish between those two cases without adding another generic paramter, \r\n    we just make the pragmatic assumption that the latter almost never happens.\r\n  */\r\n  preloadedState?: PreloadedState<CombinedState<NoInfer<S>>>\r\n\r\n  /**\r\n   * The store enhancers to apply. See Redux's `createStore()`.\r\n   * All enhancers will be included before the DevTools Extension enhancer.\r\n   * If you need to customize the order of enhancers, supply a callback\r\n   * function that will receive the original array (ie, `[applyMiddleware]`),\r\n   * and should return a new array (such as `[applyMiddleware, offline]`).\r\n   * If you only need to add middleware, you can use the `middleware` parameter instead.\r\n   */\r\n  enhancers?: StoreEnhancer[] | ConfigureEnhancersCallback\r\n}\r\n\r\ntype Middlewares<S> = ReadonlyArray<Middleware<{}, S>>\r\n\r\n/**\r\n * A Redux store returned by `configureStore()`. Supports dispatching\r\n * side-effectful _thunks_ in addition to plain actions.\r\n *\r\n * @public\r\n */\r\nexport interface EnhancedStore<\r\n  S = any,\r\n  A extends Action = AnyAction,\r\n  M extends Middlewares<S> = Middlewares<S>\r\n> extends Store<S, A> {\r\n  /**\r\n   * The `dispatch` method of your store, enhanced by all its middlewares.\r\n   *\r\n   * @inheritdoc\r\n   */\r\n  dispatch: ExtractDispatchExtensions<M> & Dispatch<A>\r\n}\r\n\r\n/**\r\n * A friendly abstraction over the standard Redux `createStore()` function.\r\n *\r\n * @param config The store configuration.\r\n * @returns A configured Redux store.\r\n *\r\n * @public\r\n */\r\nexport function configureStore<\r\n  S = any,\r\n  A extends Action = AnyAction,\r\n  M extends Middlewares<S> = [ThunkMiddlewareFor<S>]\r\n>(options: ConfigureStoreOptions<S, A, M>): EnhancedStore<S, A, M> {\r\n  const curriedGetDefaultMiddleware = curryGetDefaultMiddleware<S>()\r\n\r\n  const {\r\n    reducer = undefined,\r\n    middleware = curriedGetDefaultMiddleware(),\r\n    devTools = true,\r\n    preloadedState = undefined,\r\n    enhancers = undefined,\r\n  } = options || {}\r\n\r\n  let rootReducer: Reducer<S, A>\r\n\r\n  if (typeof reducer === 'function') {\r\n    rootReducer = reducer\r\n  } else if (isPlainObject(reducer)) {\r\n    rootReducer = combineReducers(reducer)\r\n  } else {\r\n    throw new Error(\r\n      '\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers'\r\n    )\r\n  }\r\n\r\n  let finalMiddleware = middleware\r\n  if (typeof finalMiddleware === 'function') {\r\n    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware)\r\n\r\n    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\r\n      throw new Error(\r\n        'when using a middleware builder function, an array of middleware must be returned'\r\n      )\r\n    }\r\n  }\r\n  if (\r\n    !IS_PRODUCTION &&\r\n    finalMiddleware.some((item: any) => typeof item !== 'function')\r\n  ) {\r\n    throw new Error(\r\n      'each middleware provided to configureStore must be a function'\r\n    )\r\n  }\r\n\r\n  const middlewareEnhancer = applyMiddleware(...finalMiddleware)\r\n\r\n  let finalCompose = compose\r\n\r\n  if (devTools) {\r\n    finalCompose = composeWithDevTools({\r\n      // Enable capture of stack traces for dispatched Redux actions\r\n      trace: !IS_PRODUCTION,\r\n      ...(typeof devTools === 'object' && devTools),\r\n    })\r\n  }\r\n\r\n  let storeEnhancers: StoreEnhancer[] = [middlewareEnhancer]\r\n\r\n  if (Array.isArray(enhancers)) {\r\n    storeEnhancers = [middlewareEnhancer, ...enhancers]\r\n  } else if (typeof enhancers === 'function') {\r\n    storeEnhancers = enhancers(storeEnhancers)\r\n  }\r\n\r\n  const composedEnhancer = finalCompose(...storeEnhancers) as any\r\n\r\n  return createStore(rootReducer, preloadedState, composedEnhancer)\r\n}\r\n","import type { Action, ActionCreator, StoreEnhancer } from 'redux'\r\nimport { compose } from 'redux'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface EnhancerOptions {\r\n  /**\r\n   * the instance name to be showed on the monitor page. Default value is `document.title`.\r\n   * If not specified and there's no document title, it will consist of `tabId` and `instanceId`.\r\n   */\r\n  name?: string\r\n  /**\r\n   * action creators functions to be available in the Dispatcher.\r\n   */\r\n  actionCreators?: ActionCreator<any>[] | { [key: string]: ActionCreator<any> }\r\n  /**\r\n   * if more than one action is dispatched in the indicated interval, all new actions will be collected and sent at once.\r\n   * It is the joint between performance and speed. When set to `0`, all actions will be sent instantly.\r\n   * Set it to a higher value when experiencing perf issues (also `maxAge` to a lower value).\r\n   *\r\n   * @default 500 ms.\r\n   */\r\n  latency?: number\r\n  /**\r\n   * (> 1) - maximum allowed actions to be stored in the history tree. The oldest actions are removed once maxAge is reached. It's critical for performance.\r\n   *\r\n   * @default 50\r\n   */\r\n  maxAge?: number\r\n  /**\r\n   * See detailed documentation at https://github.com/reduxjs/redux-devtools/blob/%40redux-devtools/extension%403.2.1/extension/docs/API/Arguments.md#serialize\r\n   */\r\n  serialize?:\r\n    | boolean\r\n    | {\r\n        options?:\r\n          | boolean\r\n          | {\r\n              date?: boolean\r\n              regex?: boolean\r\n              undefined?: boolean\r\n              error?: boolean\r\n              symbol?: boolean\r\n              map?: boolean\r\n              set?: boolean\r\n              function?: boolean | Function\r\n            }\r\n        replacer?: (key: string, value: unknown) => unknown\r\n        reviver?: (key: string, value: unknown) => unknown\r\n        immutable?: unknown\r\n        refs?: unknown[]\r\n      }\r\n  /**\r\n   * function which takes `action` object and id number as arguments, and should return `action` object back.\r\n   */\r\n  actionSanitizer?: <A extends Action>(action: A, id: number) => A\r\n  /**\r\n   * function which takes `state` object and index as arguments, and should return `state` object back.\r\n   */\r\n  stateSanitizer?: <S>(state: S, index: number) => S\r\n  /**\r\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\r\n   * If `actionsWhitelist` specified, `actionsBlacklist` is ignored.\r\n   */\r\n  actionsBlacklist?: string | string[]\r\n  /**\r\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\r\n   * If `actionsWhitelist` specified, `actionsBlacklist` is ignored.\r\n   */\r\n  actionsWhitelist?: string | string[]\r\n  /**\r\n   * called for every action before sending, takes `state` and `action` object, and returns `true` in case it allows sending the current data to the monitor.\r\n   * Use it as a more advanced version of `actionsBlacklist`/`actionsWhitelist` parameters.\r\n   */\r\n  predicate?: <S, A extends Action>(state: S, action: A) => boolean\r\n  /**\r\n   * if specified as `false`, it will not record the changes till clicking on `Start recording` button.\r\n   * Available only for Redux enhancer, for others use `autoPause`.\r\n   *\r\n   * @default true\r\n   */\r\n  shouldRecordChanges?: boolean\r\n  /**\r\n   * if specified, whenever clicking on `Pause recording` button and there are actions in the history log, will add this action type.\r\n   * If not specified, will commit when paused. Available only for Redux enhancer.\r\n   *\r\n   * @default \"@@PAUSED\"\"\r\n   */\r\n  pauseActionType?: string\r\n  /**\r\n   * auto pauses when the extension’s window is not opened, and so has zero impact on your app when not in use.\r\n   * Not available for Redux enhancer (as it already does it but storing the data to be sent).\r\n   *\r\n   * @default false\r\n   */\r\n  autoPause?: boolean\r\n  /**\r\n   * if specified as `true`, it will not allow any non-monitor actions to be dispatched till clicking on `Unlock changes` button.\r\n   * Available only for Redux enhancer.\r\n   *\r\n   * @default false\r\n   */\r\n  shouldStartLocked?: boolean\r\n  /**\r\n   * if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Available only for Redux enhancer.\r\n   *\r\n   * @default true\r\n   */\r\n  shouldHotReload?: boolean\r\n  /**\r\n   * if specified as `true`, whenever there's an exception in reducers, the monitors will show the error message, and next actions will not be dispatched.\r\n   *\r\n   * @default false\r\n   */\r\n  shouldCatchErrors?: boolean\r\n  /**\r\n   * If you want to restrict the extension, specify the features you allow.\r\n   * If not specified, all of the features are enabled. When set as an object, only those included as `true` will be allowed.\r\n   * Note that except `true`/`false`, `import` and `export` can be set as `custom` (which is by default for Redux enhancer), meaning that the importing/exporting occurs on the client side.\r\n   * Otherwise, you'll get/set the data right from the monitor part.\r\n   */\r\n  features?: {\r\n    /**\r\n     * start/pause recording of dispatched actions\r\n     */\r\n    pause?: boolean\r\n    /**\r\n     * lock/unlock dispatching actions and side effects\r\n     */\r\n    lock?: boolean\r\n    /**\r\n     * persist states on page reloading\r\n     */\r\n    persist?: boolean\r\n    /**\r\n     * export history of actions in a file\r\n     */\r\n    export?: boolean | 'custom'\r\n    /**\r\n     * import history of actions from a file\r\n     */\r\n    import?: boolean | 'custom'\r\n    /**\r\n     * jump back and forth (time travelling)\r\n     */\r\n    jump?: boolean\r\n    /**\r\n     * skip (cancel) actions\r\n     */\r\n    skip?: boolean\r\n    /**\r\n     * drag and drop actions in the history list\r\n     */\r\n    reorder?: boolean\r\n    /**\r\n     * dispatch custom actions or action creators\r\n     */\r\n    dispatch?: boolean\r\n    /**\r\n     * generate tests for the selected actions\r\n     */\r\n    test?: boolean\r\n  }\r\n  /**\r\n   * Set to true or a stacktrace-returning function to record call stack traces for dispatched actions.\r\n   * Defaults to false.\r\n   */\r\n  trace?: boolean | (<A extends Action>(action: A) => string)\r\n  /**\r\n   * The maximum number of stack trace entries to record per action. Defaults to 10.\r\n   */\r\n  traceLimit?: number\r\n}\r\n\r\ntype Compose = typeof compose\r\n\r\ninterface ComposeWithDevTools {\r\n  (options: EnhancerOptions): Compose\r\n  <StoreExt>(...funcs: StoreEnhancer<StoreExt>[]): StoreEnhancer<StoreExt>\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport const composeWithDevTools: ComposeWithDevTools =\r\n  typeof window !== 'undefined' &&\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    : function () {\r\n        if (arguments.length === 0) return undefined\r\n        if (typeof arguments[0] === 'object') return compose\r\n        return compose.apply(null, arguments as any as Function[])\r\n      }\r\n\r\n/**\r\n * @public\r\n */\r\nexport const devToolsEnhancer: {\r\n  (options: EnhancerOptions): StoreEnhancer<any>\r\n} =\r\n  typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION__\r\n    : function () {\r\n        return function (noop) {\r\n          return noop\r\n        }\r\n      }\r\n","/**\r\n * Returns true if the passed value is \"plain\" object, i.e. an object whose\r\n * prototype is the root `Object.prototype`. This includes objects created\r\n * using object literals, but not for instance for class instances.\r\n *\r\n * @param {any} value The value to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n *\r\n * @public\r\n */\r\nexport default function isPlainObject(value: unknown): value is object {\r\n  if (typeof value !== 'object' || value === null) return false\r\n\r\n  let proto = Object.getPrototypeOf(value)\r\n  if (proto === null) return true\r\n\r\n  let baseProto = proto\r\n  while (Object.getPrototypeOf(baseProto) !== null) {\r\n    baseProto = Object.getPrototypeOf(baseProto)\r\n  }\r\n\r\n  return proto === baseProto\r\n}\r\n","import type { Middleware, AnyAction } from 'redux'\r\nimport type { ThunkMiddleware } from 'redux-thunk'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport type { ImmutableStateInvariantMiddlewareOptions } from './immutableStateInvariantMiddleware'\r\n/* PROD_START_REMOVE_UMD */\r\nimport { createImmutableStateInvariantMiddleware } from './immutableStateInvariantMiddleware'\r\n/* PROD_STOP_REMOVE_UMD */\r\n\r\nimport type { SerializableStateInvariantMiddlewareOptions } from './serializableStateInvariantMiddleware'\r\nimport { createSerializableStateInvariantMiddleware } from './serializableStateInvariantMiddleware'\r\nimport type { ExcludeFromTuple } from './tsHelpers'\r\nimport { MiddlewareArray } from './utils'\r\n\r\nfunction isBoolean(x: any): x is boolean {\r\n  return typeof x === 'boolean'\r\n}\r\n\r\ninterface ThunkOptions<E = any> {\r\n  extraArgument: E\r\n}\r\n\r\ninterface GetDefaultMiddlewareOptions {\r\n  thunk?: boolean | ThunkOptions\r\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions\r\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions\r\n}\r\n\r\nexport type ThunkMiddlewareFor<\r\n  S,\r\n  O extends GetDefaultMiddlewareOptions = {}\r\n> = O extends {\r\n  thunk: false\r\n}\r\n  ? never\r\n  : O extends { thunk: { extraArgument: infer E } }\r\n  ? ThunkMiddleware<S, AnyAction, E>\r\n  : ThunkMiddleware<S, AnyAction>\r\n\r\nexport type CurriedGetDefaultMiddleware<S = any> = <\r\n  O extends Partial<GetDefaultMiddlewareOptions> = {\r\n    thunk: true\r\n    immutableCheck: true\r\n    serializableCheck: true\r\n  }\r\n>(\r\n  options?: O\r\n) => MiddlewareArray<ExcludeFromTuple<[ThunkMiddlewareFor<S, O>], never>>\r\n\r\nexport function curryGetDefaultMiddleware<\r\n  S = any\r\n>(): CurriedGetDefaultMiddleware<S> {\r\n  return function curriedGetDefaultMiddleware(options) {\r\n    return getDefaultMiddleware(options)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns any array containing the default middleware installed by\r\n * `configureStore()`. Useful if you want to configure your store with a custom\r\n * `middleware` array but still keep the default set.\r\n *\r\n * @return The default middleware used by `configureStore()`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Prefer to use the callback notation for the `middleware` option in `configureStore`\r\n * to access a pre-typed `getDefaultMiddleware` instead.\r\n */\r\nexport function getDefaultMiddleware<\r\n  S = any,\r\n  O extends Partial<GetDefaultMiddlewareOptions> = {\r\n    thunk: true\r\n    immutableCheck: true\r\n    serializableCheck: true\r\n  }\r\n>(\r\n  options: O = {} as O\r\n): MiddlewareArray<ExcludeFromTuple<[ThunkMiddlewareFor<S, O>], never>> {\r\n  const {\r\n    thunk = true,\r\n    immutableCheck = true,\r\n    serializableCheck = true,\r\n  } = options\r\n\r\n  let middlewareArray = new MiddlewareArray<Middleware[]>()\r\n\r\n  if (thunk) {\r\n    if (isBoolean(thunk)) {\r\n      middlewareArray.push(thunkMiddleware)\r\n    } else {\r\n      middlewareArray.push(\r\n        thunkMiddleware.withExtraArgument(thunk.extraArgument)\r\n      )\r\n    }\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (immutableCheck) {\r\n      /* PROD_START_REMOVE_UMD */\r\n      let immutableOptions: ImmutableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(immutableCheck)) {\r\n        immutableOptions = immutableCheck\r\n      }\r\n\r\n      middlewareArray.unshift(\r\n        createImmutableStateInvariantMiddleware(immutableOptions)\r\n      )\r\n      /* PROD_STOP_REMOVE_UMD */\r\n    }\r\n\r\n    if (serializableCheck) {\r\n      let serializableOptions: SerializableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(serializableCheck)) {\r\n        serializableOptions = serializableCheck\r\n      }\r\n\r\n      middlewareArray.push(\r\n        createSerializableStateInvariantMiddleware(serializableOptions)\r\n      )\r\n    }\r\n  }\r\n\r\n  return middlewareArray as any\r\n}\r\n","import type { Middleware } from 'redux'\r\n\r\nexport function getTimeMeasureUtils(maxDelay: number, fnName: string) {\r\n  let elapsed = 0\r\n  return {\r\n    measureTime<T>(fn: () => T): T {\r\n      const started = Date.now()\r\n      try {\r\n        return fn()\r\n      } finally {\r\n        const finished = Date.now()\r\n        elapsed += finished - started\r\n      }\r\n    },\r\n    warnIfExceeded() {\r\n      if (elapsed > maxDelay) {\r\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \r\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\r\nIt is disabled in production builds, so you don't need to worry about that.`)\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class MiddlewareArray<\r\n  Middlewares extends Middleware<any, any>[]\r\n> extends Array<Middlewares[number]> {\r\n  constructor(...items: Middlewares)\r\n  constructor(...args: any[]) {\r\n    super(...args)\r\n    Object.setPrototypeOf(this, MiddlewareArray.prototype)\r\n  }\r\n\r\n  static get [Symbol.species]() {\r\n    return MiddlewareArray as any\r\n  }\r\n\r\n  concat<AdditionalMiddlewares extends ReadonlyArray<Middleware<any, any>>>(\r\n    items: AdditionalMiddlewares\r\n  ): MiddlewareArray<[...Middlewares, ...AdditionalMiddlewares]>\r\n\r\n  concat<AdditionalMiddlewares extends ReadonlyArray<Middleware<any, any>>>(\r\n    ...items: AdditionalMiddlewares\r\n  ): MiddlewareArray<[...Middlewares, ...AdditionalMiddlewares]>\r\n  concat(...arr: any[]) {\r\n    return super.concat.apply(this, arr)\r\n  }\r\n\r\n  prepend<AdditionalMiddlewares extends ReadonlyArray<Middleware<any, any>>>(\r\n    items: AdditionalMiddlewares\r\n  ): MiddlewareArray<[...AdditionalMiddlewares, ...Middlewares]>\r\n\r\n  prepend<AdditionalMiddlewares extends ReadonlyArray<Middleware<any, any>>>(\r\n    ...items: AdditionalMiddlewares\r\n  ): MiddlewareArray<[...AdditionalMiddlewares, ...Middlewares]>\r\n\r\n  prepend(...arr: any[]) {\r\n    if (arr.length === 1 && Array.isArray(arr[0])) {\r\n      return new MiddlewareArray(...arr[0].concat(this))\r\n    }\r\n    return new MiddlewareArray(...arr.concat(this))\r\n  }\r\n}\r\n","import type { Middleware } from 'redux'\r\nimport { getTimeMeasureUtils } from './utils'\r\n\r\ntype EntryProcessor = (key: string, value: any) => any\r\n\r\nconst isProduction: boolean = process.env.NODE_ENV === 'production'\r\nconst prefix: string = 'Invariant failed'\r\n\r\n// Throw an error if the condition fails\r\n// Strip out error messages for production\r\n// > Not providing an inline default argument for message as the result is smaller\r\nfunction invariant(condition: any, message?: string) {\r\n  if (condition) {\r\n    return\r\n  }\r\n  // Condition not passed\r\n\r\n  // In production we strip the message but still throw\r\n  if (isProduction) {\r\n    throw new Error(prefix)\r\n  }\r\n\r\n  // When not in production we allow the message to pass through\r\n  // *This block will be removed in production builds*\r\n  throw new Error(`${prefix}: ${message || ''}`)\r\n}\r\n\r\nfunction stringify(\r\n  obj: any,\r\n  serializer?: EntryProcessor,\r\n  indent?: string | number,\r\n  decycler?: EntryProcessor\r\n): string {\r\n  return JSON.stringify(obj, getSerialize(serializer, decycler), indent)\r\n}\r\n\r\nfunction getSerialize(\r\n  serializer?: EntryProcessor,\r\n  decycler?: EntryProcessor\r\n): EntryProcessor {\r\n  let stack: any[] = [],\r\n    keys: any[] = []\r\n\r\n  if (!decycler)\r\n    decycler = function (_: string, value: any) {\r\n      if (stack[0] === value) return '[Circular ~]'\r\n      return (\r\n        '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']'\r\n      )\r\n    }\r\n\r\n  return function (this: any, key: string, value: any) {\r\n    if (stack.length > 0) {\r\n      var thisPos = stack.indexOf(this)\r\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\r\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\r\n      if (~stack.indexOf(value)) value = decycler!.call(this, key, value)\r\n    } else stack.push(value)\r\n\r\n    return serializer == null ? value : serializer.call(this, key, value)\r\n  }\r\n}\r\n\r\n/**\r\n * The default `isImmutable` function.\r\n *\r\n * @public\r\n */\r\nexport function isImmutableDefault(value: unknown): boolean {\r\n  return (\r\n    typeof value !== 'object' ||\r\n    value === null ||\r\n    typeof value === 'undefined' ||\r\n    Object.isFrozen(value)\r\n  )\r\n}\r\n\r\nexport function trackForMutations(\r\n  isImmutable: IsImmutableFunc,\r\n  ignorePaths: string[] | undefined,\r\n  obj: any\r\n) {\r\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj)\r\n  return {\r\n    detectMutations() {\r\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj)\r\n    },\r\n  }\r\n}\r\n\r\ninterface TrackedProperty {\r\n  value: any\r\n  children: Record<string, any>\r\n}\r\n\r\nfunction trackProperties(\r\n  isImmutable: IsImmutableFunc,\r\n  ignorePaths: IgnorePaths = [],\r\n  obj: Record<string, any>,\r\n  path: string = ''\r\n) {\r\n  const tracked: Partial<TrackedProperty> = { value: obj }\r\n\r\n  if (!isImmutable(obj)) {\r\n    tracked.children = {}\r\n\r\n    for (const key in obj) {\r\n      const childPath = path ? path + '.' + key : key\r\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\r\n        continue\r\n      }\r\n\r\n      tracked.children[key] = trackProperties(\r\n        isImmutable,\r\n        ignorePaths,\r\n        obj[key],\r\n        childPath\r\n      )\r\n    }\r\n  }\r\n  return tracked as TrackedProperty\r\n}\r\n\r\ntype IgnorePaths = readonly string[]\r\n\r\nfunction detectMutations(\r\n  isImmutable: IsImmutableFunc,\r\n  ignorePaths: IgnorePaths = [],\r\n  trackedProperty: TrackedProperty,\r\n  obj: any,\r\n  sameParentRef: boolean = false,\r\n  path: string = ''\r\n): { wasMutated: boolean; path?: string } {\r\n  const prevObj = trackedProperty ? trackedProperty.value : undefined\r\n\r\n  const sameRef = prevObj === obj\r\n\r\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\r\n    return { wasMutated: true, path }\r\n  }\r\n\r\n  if (isImmutable(prevObj) || isImmutable(obj)) {\r\n    return { wasMutated: false }\r\n  }\r\n\r\n  // Gather all keys from prev (tracked) and after objs\r\n  const keysToDetect: Record<string, boolean> = {}\r\n  for (let key in trackedProperty.children) {\r\n    keysToDetect[key] = true\r\n  }\r\n  for (let key in obj) {\r\n    keysToDetect[key] = true\r\n  }\r\n\r\n  for (let key in keysToDetect) {\r\n    const childPath = path ? path + '.' + key : key\r\n    if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\r\n      continue\r\n    }\r\n\r\n    const result = detectMutations(\r\n      isImmutable,\r\n      ignorePaths,\r\n      trackedProperty.children[key],\r\n      obj[key],\r\n      sameRef,\r\n      childPath\r\n    )\r\n\r\n    if (result.wasMutated) {\r\n      return result\r\n    }\r\n  }\r\n  return { wasMutated: false }\r\n}\r\n\r\ntype IsImmutableFunc = (value: any) => boolean\r\n\r\n/**\r\n * Options for `createImmutableStateInvariantMiddleware()`.\r\n *\r\n * @public\r\n */\r\nexport interface ImmutableStateInvariantMiddlewareOptions {\r\n  /**\r\n    Callback function to check if a value is considered to be immutable.\r\n    This function is applied recursively to every value contained in the state.\r\n    The default implementation will return true for primitive types \r\n    (like numbers, strings, booleans, null and undefined).\r\n   */\r\n  isImmutable?: IsImmutableFunc\r\n  /** \r\n    An array of dot-separated path strings that match named nodes from \r\n    the root state to ignore when checking for immutability.\r\n    Defaults to undefined\r\n   */\r\n  ignoredPaths?: string[]\r\n  /** Print a warning if checks take longer than N ms. Default: 32ms */\r\n  warnAfter?: number\r\n  // @deprecated. Use ignoredPaths\r\n  ignore?: string[]\r\n}\r\n\r\n/**\r\n * Creates a middleware that checks whether any state was mutated in between\r\n * dispatches or during a dispatch. If any mutations are detected, an error is\r\n * thrown.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\r\nexport function createImmutableStateInvariantMiddleware(\r\n  options: ImmutableStateInvariantMiddlewareOptions = {}\r\n): Middleware {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    return () => (next) => (action) => next(action)\r\n  }\r\n\r\n  let {\r\n    isImmutable = isImmutableDefault,\r\n    ignoredPaths,\r\n    warnAfter = 32,\r\n    ignore,\r\n  } = options\r\n\r\n  // Alias ignore->ignoredPaths, but prefer ignoredPaths if present\r\n  ignoredPaths = ignoredPaths || ignore\r\n\r\n  const track = trackForMutations.bind(null, isImmutable, ignoredPaths)\r\n\r\n  return ({ getState }) => {\r\n    let state = getState()\r\n    let tracker = track(state)\r\n\r\n    let result\r\n    return (next) => (action) => {\r\n      const measureUtils = getTimeMeasureUtils(\r\n        warnAfter,\r\n        'ImmutableStateInvariantMiddleware'\r\n      )\r\n\r\n      measureUtils.measureTime(() => {\r\n        state = getState()\r\n\r\n        result = tracker.detectMutations()\r\n        // Track before potentially not meeting the invariant\r\n        tracker = track(state)\r\n\r\n        invariant(\r\n          !result.wasMutated,\r\n          `A state mutation was detected between dispatches, in the path '${\r\n            result.path || ''\r\n          }'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`\r\n        )\r\n      })\r\n\r\n      const dispatchedAction = next(action)\r\n\r\n      measureUtils.measureTime(() => {\r\n        state = getState()\r\n\r\n        result = tracker.detectMutations()\r\n        // Track before potentially not meeting the invariant\r\n        tracker = track(state)\r\n\r\n        result.wasMutated &&\r\n          invariant(\r\n            !result.wasMutated,\r\n            `A state mutation was detected inside a dispatch, in the path: ${\r\n              result.path || ''\r\n            }. Take a look at the reducer(s) handling the action ${stringify(\r\n              action\r\n            )}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`\r\n          )\r\n      })\r\n\r\n      measureUtils.warnIfExceeded()\r\n\r\n      return dispatchedAction\r\n    }\r\n  }\r\n}\r\n","import isPlainObject from './isPlainObject'\r\nimport type { Middleware } from 'redux'\r\nimport { getTimeMeasureUtils } from './utils'\r\n\r\n/**\r\n * Returns true if the passed value is \"plain\", i.e. a value that is either\r\n * directly JSON-serializable (boolean, number, string, array, plain object)\r\n * or `undefined`.\r\n *\r\n * @param val The value to check.\r\n *\r\n * @public\r\n */\r\nexport function isPlain(val: any) {\r\n  const type = typeof val\r\n  return (\r\n    type === 'undefined' ||\r\n    val === null ||\r\n    type === 'string' ||\r\n    type === 'boolean' ||\r\n    type === 'number' ||\r\n    Array.isArray(val) ||\r\n    isPlainObject(val)\r\n  )\r\n}\r\n\r\ninterface NonSerializableValue {\r\n  keyPath: string\r\n  value: unknown\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function findNonSerializableValue(\r\n  value: unknown,\r\n  path: string = '',\r\n  isSerializable: (value: unknown) => boolean = isPlain,\r\n  getEntries?: (value: unknown) => [string, any][],\r\n  ignoredPaths: readonly string[] = []\r\n): NonSerializableValue | false {\r\n  let foundNestedSerializable: NonSerializableValue | false\r\n\r\n  if (!isSerializable(value)) {\r\n    return {\r\n      keyPath: path || '<root>',\r\n      value: value,\r\n    }\r\n  }\r\n\r\n  if (typeof value !== 'object' || value === null) {\r\n    return false\r\n  }\r\n\r\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value)\r\n\r\n  const hasIgnoredPaths = ignoredPaths.length > 0\r\n\r\n  for (const [key, nestedValue] of entries) {\r\n    const nestedPath = path ? path + '.' + key : key\r\n\r\n    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {\r\n      continue\r\n    }\r\n\r\n    if (!isSerializable(nestedValue)) {\r\n      return {\r\n        keyPath: nestedPath,\r\n        value: nestedValue,\r\n      }\r\n    }\r\n\r\n    if (typeof nestedValue === 'object') {\r\n      foundNestedSerializable = findNonSerializableValue(\r\n        nestedValue,\r\n        nestedPath,\r\n        isSerializable,\r\n        getEntries,\r\n        ignoredPaths\r\n      )\r\n\r\n      if (foundNestedSerializable) {\r\n        return foundNestedSerializable\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Options for `createSerializableStateInvariantMiddleware()`.\r\n *\r\n * @public\r\n */\r\nexport interface SerializableStateInvariantMiddlewareOptions {\r\n  /**\r\n   * The function to check if a value is considered serializable. This\r\n   * function is applied recursively to every value contained in the\r\n   * state. Defaults to `isPlain()`.\r\n   */\r\n  isSerializable?: (value: any) => boolean\r\n  /**\r\n   * The function that will be used to retrieve entries from each\r\n   * value.  If unspecified, `Object.entries` will be used. Defaults\r\n   * to `undefined`.\r\n   */\r\n  getEntries?: (value: any) => [string, any][]\r\n\r\n  /**\r\n   * An array of action types to ignore when checking for serializability.\r\n   * Defaults to []\r\n   */\r\n  ignoredActions?: string[]\r\n\r\n  /**\r\n   * An array of dot-separated path strings to ignore when checking\r\n   * for serializability, Defaults to ['meta.arg', 'meta.baseQueryMeta']\r\n   */\r\n  ignoredActionPaths?: string[]\r\n\r\n  /**\r\n   * An array of dot-separated path strings to ignore when checking\r\n   * for serializability, Defaults to []\r\n   */\r\n  ignoredPaths?: string[]\r\n  /**\r\n   * Execution time warning threshold. If the middleware takes longer\r\n   * than `warnAfter` ms, a warning will be displayed in the console.\r\n   * Defaults to 32ms.\r\n   */\r\n  warnAfter?: number\r\n\r\n  /**\r\n   * Opt out of checking state. When set to `true`, other state-related params will be ignored.\r\n   */\r\n  ignoreState?: boolean\r\n\r\n  /**\r\n   * Opt out of checking actions. When set to `true`, other action-related params will be ignored.\r\n   */\r\n  ignoreActions?: boolean\r\n}\r\n\r\n/**\r\n * Creates a middleware that, after every state change, checks if the new\r\n * state is serializable. If a non-serializable value is found within the\r\n * state, an error is printed to the console.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\r\nexport function createSerializableStateInvariantMiddleware(\r\n  options: SerializableStateInvariantMiddlewareOptions = {}\r\n): Middleware {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    return () => (next) => (action) => next(action)\r\n  }\r\n  const {\r\n    isSerializable = isPlain,\r\n    getEntries,\r\n    ignoredActions = [],\r\n    ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],\r\n    ignoredPaths = [],\r\n    warnAfter = 32,\r\n    ignoreState = false,\r\n    ignoreActions = false,\r\n  } = options\r\n\r\n  return (storeAPI) => (next) => (action) => {\r\n    const result = next(action)\r\n\r\n    const measureUtils = getTimeMeasureUtils(\r\n      warnAfter,\r\n      'SerializableStateInvariantMiddleware'\r\n    )\r\n\r\n    if (\r\n      !ignoreActions &&\r\n      !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)\r\n    ) {\r\n      measureUtils.measureTime(() => {\r\n        const foundActionNonSerializableValue = findNonSerializableValue(\r\n          action,\r\n          '',\r\n          isSerializable,\r\n          getEntries,\r\n          ignoredActionPaths\r\n        )\r\n\r\n        if (foundActionNonSerializableValue) {\r\n          const { keyPath, value } = foundActionNonSerializableValue\r\n\r\n          console.error(\r\n            `A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`,\r\n            value,\r\n            '\\nTake a look at the logic that dispatched this action: ',\r\n            action,\r\n            '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)',\r\n            '\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)'\r\n          )\r\n        }\r\n      })\r\n    }\r\n\r\n    if (!ignoreState) {\r\n      measureUtils.measureTime(() => {\r\n        const state = storeAPI.getState()\r\n\r\n        const foundStateNonSerializableValue = findNonSerializableValue(\r\n          state,\r\n          '',\r\n          isSerializable,\r\n          getEntries,\r\n          ignoredPaths\r\n        )\r\n\r\n        if (foundStateNonSerializableValue) {\r\n          const { keyPath, value } = foundStateNonSerializableValue\r\n\r\n          console.error(\r\n            `A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`,\r\n            value,\r\n            `\r\nTake a look at the reducer(s) handling this action type: ${action.type}.\r\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`\r\n          )\r\n        }\r\n      })\r\n\r\n      measureUtils.warnIfExceeded()\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n","import type { Action } from 'redux'\r\nimport type {\r\n  IsUnknownOrNonInferrable,\r\n  IfMaybeUndefined,\r\n  IfVoid,\r\n  IsAny,\r\n} from './tsHelpers'\r\nimport isPlainObject from './isPlainObject'\r\n\r\n/**\r\n * An action with a string type and an associated payload. This is the\r\n * type of action returned by `createAction()` action creators.\r\n *\r\n * @template P The type of the action's payload.\r\n * @template T the type used for the action type.\r\n * @template M The type of the action's meta (optional)\r\n * @template E The type of the action's error (optional)\r\n *\r\n * @public\r\n */\r\nexport type PayloadAction<\r\n  P = void,\r\n  T extends string = string,\r\n  M = never,\r\n  E = never\r\n> = {\r\n  payload: P\r\n  type: T\r\n} & ([M] extends [never]\r\n  ? {}\r\n  : {\r\n      meta: M\r\n    }) &\r\n  ([E] extends [never]\r\n    ? {}\r\n    : {\r\n        error: E\r\n      })\r\n\r\n/**\r\n * A \"prepare\" method to be used as the second parameter of `createAction`.\r\n * Takes any number of arguments and returns a Flux Standard Action without\r\n * type (will be added later) that *must* contain a payload (might be undefined).\r\n *\r\n * @public\r\n */\r\nexport type PrepareAction<P> =\r\n  | ((...args: any[]) => { payload: P })\r\n  | ((...args: any[]) => { payload: P; meta: any })\r\n  | ((...args: any[]) => { payload: P; error: any })\r\n  | ((...args: any[]) => { payload: P; meta: any; error: any })\r\n\r\n/**\r\n * Internal version of `ActionCreatorWithPreparedPayload`. Not to be used externally.\r\n *\r\n * @internal\r\n */\r\nexport type _ActionCreatorWithPreparedPayload<\r\n  PA extends PrepareAction<any> | void,\r\n  T extends string = string\r\n> = PA extends PrepareAction<infer P>\r\n  ? ActionCreatorWithPreparedPayload<\r\n      Parameters<PA>,\r\n      P,\r\n      T,\r\n      ReturnType<PA> extends {\r\n        error: infer E\r\n      }\r\n        ? E\r\n        : never,\r\n      ReturnType<PA> extends {\r\n        meta: infer M\r\n      }\r\n        ? M\r\n        : never\r\n    >\r\n  : void\r\n\r\n/**\r\n * Basic type for all action creators.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n */\r\nexport interface BaseActionCreator<P, T extends string, M = never, E = never> {\r\n  type: T\r\n  match: (action: Action<unknown>) => action is PayloadAction<P, T, M, E>\r\n}\r\n\r\n/**\r\n * An action creator that takes multiple arguments that are passed\r\n * to a `PrepareAction` method to create the final Action.\r\n * @typeParam Args arguments for the action creator function\r\n * @typeParam P `payload` type\r\n * @typeParam T `type` name\r\n * @typeParam E optional `error` type\r\n * @typeParam M optional `meta` type\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithPreparedPayload<\r\n  Args extends unknown[],\r\n  P,\r\n  T extends string = string,\r\n  E = never,\r\n  M = never\r\n> extends BaseActionCreator<P, T, M, E> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with `Args` will return\r\n   * an Action with a payload of type `P` and (depending on the `PrepareAction`\r\n   * method used) a `meta`- and `error` property of types `M` and `E` respectively.\r\n   */\r\n  (...args: Args): PayloadAction<P, T, M, E>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that takes an optional payload of type `P`.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithOptionalPayload<P, T extends string = string>\r\n  extends BaseActionCreator<P, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`.\r\n   * Calling it without an argument will return a PayloadAction with a payload of `undefined`.\r\n   */\r\n  (payload?: P): PayloadAction<P, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that takes no payload.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithoutPayload<T extends string = string>\r\n  extends BaseActionCreator<undefined, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `undefined`\r\n   */\r\n  (): PayloadAction<undefined, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that requires a payload of type P.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithPayload<P, T extends string = string>\r\n  extends BaseActionCreator<P, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\r\n   */\r\n  (payload: P): PayloadAction<P, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` whose `payload` type could not be inferred. Accepts everything as `payload`.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithNonInferrablePayload<\r\n  T extends string = string\r\n> extends BaseActionCreator<unknown, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload\r\n   * of exactly the type of the argument.\r\n   */\r\n  <PT extends unknown>(payload: PT): PayloadAction<PT, T>\r\n}\r\n\r\n/**\r\n * An action creator that produces actions with a `payload` attribute.\r\n *\r\n * @typeParam P the `payload` type\r\n * @typeParam T the `type` of the resulting action\r\n * @typeParam PA if the resulting action is preprocessed by a `prepare` method, the signature of said method.\r\n *\r\n * @public\r\n */\r\nexport type PayloadActionCreator<\r\n  P = void,\r\n  T extends string = string,\r\n  PA extends PrepareAction<P> | void = void\r\n> = IfPrepareActionMethodProvided<\r\n  PA,\r\n  _ActionCreatorWithPreparedPayload<PA, T>,\r\n  // else\r\n  IsAny<\r\n    P,\r\n    ActionCreatorWithPayload<any, T>,\r\n    IsUnknownOrNonInferrable<\r\n      P,\r\n      ActionCreatorWithNonInferrablePayload<T>,\r\n      // else\r\n      IfVoid<\r\n        P,\r\n        ActionCreatorWithoutPayload<T>,\r\n        // else\r\n        IfMaybeUndefined<\r\n          P,\r\n          ActionCreatorWithOptionalPayload<P, T>,\r\n          // else\r\n          ActionCreatorWithPayload<P, T>\r\n        >\r\n      >\r\n    >\r\n  >\r\n>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass its arguments to this method to calculate payload & meta.\r\n *\r\n * @public\r\n */\r\nexport function createAction<P = void, T extends string = string>(\r\n  type: T\r\n): PayloadActionCreator<P, T>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass its arguments to this method to calculate payload & meta.\r\n *\r\n * @public\r\n */\r\nexport function createAction<\r\n  PA extends PrepareAction<any>,\r\n  T extends string = string\r\n>(\r\n  type: T,\r\n  prepareAction: PA\r\n): PayloadActionCreator<ReturnType<PA>['payload'], T, PA>\r\n\r\nexport function createAction(type: string, prepareAction?: Function): any {\r\n  function actionCreator(...args: any[]) {\r\n    if (prepareAction) {\r\n      let prepared = prepareAction(...args)\r\n      if (!prepared) {\r\n        throw new Error('prepareAction did not return an object')\r\n      }\r\n\r\n      return {\r\n        type,\r\n        payload: prepared.payload,\r\n        ...('meta' in prepared && { meta: prepared.meta }),\r\n        ...('error' in prepared && { error: prepared.error }),\r\n      }\r\n    }\r\n    return { type, payload: args[0] }\r\n  }\r\n\r\n  actionCreator.toString = () => `${type}`\r\n\r\n  actionCreator.type = type\r\n\r\n  actionCreator.match = (action: Action<unknown>): action is PayloadAction =>\r\n    action.type === type\r\n\r\n  return actionCreator\r\n}\r\n\r\nexport function isFSA(action: unknown): action is {\r\n  type: string\r\n  payload?: unknown\r\n  error?: unknown\r\n  meta?: unknown\r\n} {\r\n  return (\r\n    isPlainObject(action) &&\r\n    typeof (action as any).type === 'string' &&\r\n    Object.keys(action).every(isValidKey)\r\n  )\r\n}\r\n\r\nfunction isValidKey(key: string) {\r\n  return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1\r\n}\r\n\r\n/**\r\n * Returns the action type of the actions created by the passed\r\n * `createAction()`-generated action creator (arbitrary action creators\r\n * are not supported).\r\n *\r\n * @param action The action creator whose action type to get.\r\n * @returns The action type used by the action creator.\r\n *\r\n * @public\r\n */\r\nexport function getType<T extends string>(\r\n  actionCreator: PayloadActionCreator<any, T>\r\n): T {\r\n  return `${actionCreator}` as T\r\n}\r\n\r\n// helper types for more readable typings\r\n\r\ntype IfPrepareActionMethodProvided<\r\n  PA extends PrepareAction<any> | void,\r\n  True,\r\n  False\r\n> = PA extends (...args: any[]) => any ? True : False\r\n","import type { Draft } from 'immer'\r\nimport createNextState, { isDraft, isDraftable } from 'immer'\r\nimport type { AnyAction, Action, Reducer } from 'redux'\r\nimport type { ActionReducerMapBuilder } from './mapBuilders'\r\nimport { executeReducerBuilderCallback } from './mapBuilders'\r\nimport type { NoInfer } from './tsHelpers'\r\n\r\n/**\r\n * Defines a mapping from action types to corresponding action object shapes.\r\n *\r\n * @deprecated This should not be used manually - it is only used for internal\r\n *             inference purposes and should not have any further value.\r\n *             It might be removed in the future.\r\n * @public\r\n */\r\nexport type Actions<T extends keyof any = string> = Record<T, Action>\r\n\r\n/**\r\n * @deprecated use `TypeGuard` instead\r\n */\r\nexport interface ActionMatcher<A extends AnyAction> {\r\n  (action: AnyAction): action is A\r\n}\r\n\r\nexport type ActionMatcherDescription<S, A extends AnyAction> = {\r\n  matcher: ActionMatcher<A>\r\n  reducer: CaseReducer<S, NoInfer<A>>\r\n}\r\n\r\nexport type ReadonlyActionMatcherDescriptionCollection<S> = ReadonlyArray<\r\n  ActionMatcherDescription<S, any>\r\n>\r\n\r\nexport type ActionMatcherDescriptionCollection<S> = Array<\r\n  ActionMatcherDescription<S, any>\r\n>\r\n\r\n/**\r\n * An *case reducer* is a reducer function for a specific action type. Case\r\n * reducers can be composed to full reducers using `createReducer()`.\r\n *\r\n * Unlike a normal Redux reducer, a case reducer is never called with an\r\n * `undefined` state to determine the initial state. Instead, the initial\r\n * state is explicitly specified as an argument to `createReducer()`.\r\n *\r\n * In addition, a case reducer can choose to mutate the passed-in `state`\r\n * value directly instead of returning a new state. This does not actually\r\n * cause the store state to be mutated directly; instead, thanks to\r\n * [immer](https://github.com/mweststrate/immer), the mutations are\r\n * translated to copy operations that result in a new state.\r\n *\r\n * @public\r\n */\r\nexport type CaseReducer<S = any, A extends Action = AnyAction> = (\r\n  state: Draft<S>,\r\n  action: A\r\n) => S | void | Draft<S>\r\n\r\n/**\r\n * A mapping from action types to case reducers for `createReducer()`.\r\n *\r\n * @deprecated This should not be used manually - it is only used\r\n *             for internal inference purposes and using it manually\r\n *             would lead to type erasure.\r\n *             It might be removed in the future.\r\n * @public\r\n */\r\nexport type CaseReducers<S, AS extends Actions> = {\r\n  [T in keyof AS]: AS[T] extends Action ? CaseReducer<S, AS[T]> : void\r\n}\r\n\r\nexport type NotFunction<T> = T extends Function ? never : T\r\n\r\nfunction isStateFunction<S>(x: unknown): x is () => S {\r\n  return typeof x === 'function'\r\n}\r\n\r\nexport type ReducerWithInitialState<S extends NotFunction<any>> = Reducer<S> & {\r\n  getInitialState: () => S\r\n}\r\n\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * @remarks\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n *\r\n * @overloadSummary\r\n * This overload accepts a callback function that receives a `builder` object as its argument.\r\n * That builder provides `addCase`, `addMatcher` and `addDefaultCase` functions that may be\r\n * called to define what actions this reducer will handle.\r\n *\r\n * @param initialState - `State | (() => State)`: The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\r\n * @param builderCallback - `(builder: Builder) => void` A callback that receives a *builder* object to define\r\n *   case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n * @example\r\n```ts\r\nimport {\r\n  createAction,\r\n  createReducer,\r\n  AnyAction,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\n\r\nconst increment = createAction<number>(\"increment\");\r\nconst decrement = createAction<number>(\"decrement\");\r\n\r\nfunction isActionWithNumberPayload(\r\n  action: AnyAction\r\n): action is PayloadAction<number> {\r\n  return typeof action.payload === \"number\";\r\n}\r\n\r\nconst reducer = createReducer(\r\n  {\r\n    counter: 0,\r\n    sumOfNumberPayloads: 0,\r\n    unhandledActions: 0,\r\n  },\r\n  (builder) => {\r\n    builder\r\n      .addCase(increment, (state, action) => {\r\n        // action is inferred correctly here\r\n        state.counter += action.payload;\r\n      })\r\n      // You can chain calls, or have separate `builder.addCase()` lines each time\r\n      .addCase(decrement, (state, action) => {\r\n        state.counter -= action.payload;\r\n      })\r\n      // You can apply a \"matcher function\" to incoming actions\r\n      .addMatcher(isActionWithNumberPayload, (state, action) => {})\r\n      // and provide a default case if no other handlers matched\r\n      .addDefaultCase((state, action) => {});\r\n  }\r\n);\r\n```\r\n * @public\r\n */\r\nexport function createReducer<S extends NotFunction<any>>(\r\n  initialState: S | (() => S),\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): ReducerWithInitialState<S>\r\n\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n * \r\n * @overloadSummary\r\n * This overload accepts an object where the keys are string action types, and the values\r\n * are case reducer functions to handle those action types.\r\n *\r\n * @param initialState - `State | (() => State)`: The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\r\n * @param actionsMap - An object mapping from action types to _case reducers_, each of which handles one specific action type.\r\n * @param actionMatchers - An array of matcher definitions in the form `{matcher, reducer}`.\r\n *   All matching reducers will be executed in order, independently if a case reducer matched or not.\r\n * @param defaultCaseReducer - A \"default case\" reducer that is executed if no case reducer and no matcher\r\n *   reducer was executed for this action.\r\n *\r\n * @example\r\n```js\r\nconst counterReducer = createReducer(0, {\r\n  increment: (state, action) => state + action.payload,\r\n  decrement: (state, action) => state - action.payload\r\n})\r\n\r\n// Alternately, use a \"lazy initializer\" to provide the initial state\r\n// (works with either form of createReducer)\r\nconst initialState = () => 0\r\nconst counterReducer = createReducer(initialState, {\r\n  increment: (state, action) => state + action.payload,\r\n  decrement: (state, action) => state - action.payload\r\n})\r\n```\r\n \r\n * Action creators that were generated using [`createAction`](./createAction) may be used directly as the keys here, using computed property syntax:\r\n\r\n```js\r\nconst increment = createAction('increment')\r\nconst decrement = createAction('decrement')\r\n\r\nconst counterReducer = createReducer(0, {\r\n  [increment]: (state, action) => state + action.payload,\r\n  [decrement.type]: (state, action) => state - action.payload\r\n})\r\n```\r\n * @public\r\n */\r\nexport function createReducer<\r\n  S extends NotFunction<any>,\r\n  CR extends CaseReducers<S, any> = CaseReducers<S, any>\r\n>(\r\n  initialState: S | (() => S),\r\n  actionsMap: CR,\r\n  actionMatchers?: ActionMatcherDescriptionCollection<S>,\r\n  defaultCaseReducer?: CaseReducer<S>\r\n): ReducerWithInitialState<S>\r\n\r\nexport function createReducer<S extends NotFunction<any>>(\r\n  initialState: S | (() => S),\r\n  mapOrBuilderCallback:\r\n    | CaseReducers<S, any>\r\n    | ((builder: ActionReducerMapBuilder<S>) => void),\r\n  actionMatchers: ReadonlyActionMatcherDescriptionCollection<S> = [],\r\n  defaultCaseReducer?: CaseReducer<S>\r\n): ReducerWithInitialState<S> {\r\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] =\r\n    typeof mapOrBuilderCallback === 'function'\r\n      ? executeReducerBuilderCallback(mapOrBuilderCallback)\r\n      : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer]\r\n\r\n  // Ensure the initial state gets frozen either way\r\n  let getInitialState: () => S\r\n  if (isStateFunction(initialState)) {\r\n    getInitialState = () => createNextState(initialState(), () => {})\r\n  } else {\r\n    const frozenInitialState = createNextState(initialState, () => {})\r\n    getInitialState = () => frozenInitialState\r\n  }\r\n\r\n  function reducer(state = getInitialState(), action: any): S {\r\n    let caseReducers = [\r\n      actionsMap[action.type],\r\n      ...finalActionMatchers\r\n        .filter(({ matcher }) => matcher(action))\r\n        .map(({ reducer }) => reducer),\r\n    ]\r\n    if (caseReducers.filter((cr) => !!cr).length === 0) {\r\n      caseReducers = [finalDefaultCaseReducer]\r\n    }\r\n\r\n    return caseReducers.reduce((previousState, caseReducer): S => {\r\n      if (caseReducer) {\r\n        if (isDraft(previousState)) {\r\n          // If it's already a draft, we must already be inside a `createNextState` call,\r\n          // likely because this is being wrapped in `createReducer`, `createSlice`, or nested\r\n          // inside an existing draft. It's safe to just pass the draft to the mutator.\r\n          const draft = previousState as Draft<S> // We can assume this is already a draft\r\n          const result = caseReducer(draft, action)\r\n\r\n          if (typeof result === 'undefined') {\r\n            return previousState\r\n          }\r\n\r\n          return result as S\r\n        } else if (!isDraftable(previousState)) {\r\n          // If state is not draftable (ex: a primitive, such as 0), we want to directly\r\n          // return the caseReducer func and not wrap it with produce.\r\n          const result = caseReducer(previousState as any, action)\r\n\r\n          if (typeof result === 'undefined') {\r\n            if (previousState === null) {\r\n              return previousState\r\n            }\r\n            throw Error(\r\n              'A case reducer on a non-draftable value must not return undefined'\r\n            )\r\n          }\r\n\r\n          return result as S\r\n        } else {\r\n          // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\r\n          // than an Immutable<S>, and TypeScript cannot find out how to reconcile\r\n          // these two types.\r\n          return createNextState(previousState, (draft: Draft<S>) => {\r\n            return caseReducer(draft, action)\r\n          })\r\n        }\r\n      }\r\n\r\n      return previousState\r\n    }, state)\r\n  }\r\n\r\n  reducer.getInitialState = getInitialState\r\n\r\n  return reducer as ReducerWithInitialState<S>\r\n}\r\n","import type { Action, AnyAction } from 'redux'\r\nimport type {\r\n  CaseReducer,\r\n  CaseReducers,\r\n  ActionMatcherDescriptionCollection,\r\n} from './createReducer'\r\nimport type { TypeGuard } from './tsHelpers'\r\n\r\nexport interface TypedActionCreator<Type extends string> {\r\n  (...args: any[]): Action<Type>\r\n  type: Type\r\n}\r\n\r\n/**\r\n * A builder for an action <-> reducer map.\r\n *\r\n * @public\r\n */\r\nexport interface ActionReducerMapBuilder<State> {\r\n  /**\r\n   * Adds a case reducer to handle a single exact action type.\r\n   * @remarks\r\n   * All calls to `builder.addCase` must come before any calls to `builder.addMatcher` or `builder.addDefaultCase`.\r\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\r\n   * @param reducer - The actual case reducer function.\r\n   */\r\n  addCase<ActionCreator extends TypedActionCreator<string>>(\r\n    actionCreator: ActionCreator,\r\n    reducer: CaseReducer<State, ReturnType<ActionCreator>>\r\n  ): ActionReducerMapBuilder<State>\r\n  /**\r\n   * Adds a case reducer to handle a single exact action type.\r\n   * @remarks\r\n   * All calls to `builder.addCase` must come before any calls to `builder.addMatcher` or `builder.addDefaultCase`.\r\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\r\n   * @param reducer - The actual case reducer function.\r\n   */\r\n  addCase<Type extends string, A extends Action<Type>>(\r\n    type: Type,\r\n    reducer: CaseReducer<State, A>\r\n  ): ActionReducerMapBuilder<State>\r\n\r\n  /**\r\n   * Allows you to match your incoming actions against your own filter function instead of only the `action.type` property.\r\n   * @remarks\r\n   * If multiple matcher reducers match, all of them will be executed in the order\r\n   * they were defined in - even if a case reducer already matched.\r\n   * All calls to `builder.addMatcher` must come after any calls to `builder.addCase` and before any calls to `builder.addDefaultCase`.\r\n   * @param matcher - A matcher function. In TypeScript, this should be a [type predicate](https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates)\r\n   *   function\r\n   * @param reducer - The actual case reducer function.\r\n   *\r\n   * @example\r\n```ts\r\nimport {\r\n  createAction,\r\n  createReducer,\r\n  AsyncThunk,\r\n  AnyAction,\r\n} from \"@reduxjs/toolkit\";\r\n\r\ntype GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;\r\n\r\ntype PendingAction = ReturnType<GenericAsyncThunk[\"pending\"]>;\r\ntype RejectedAction = ReturnType<GenericAsyncThunk[\"rejected\"]>;\r\ntype FulfilledAction = ReturnType<GenericAsyncThunk[\"fulfilled\"]>;\r\n\r\nconst initialState: Record<string, string> = {};\r\nconst resetAction = createAction(\"reset-tracked-loading-state\");\r\n\r\nfunction isPendingAction(action: AnyAction): action is PendingAction {\r\n  return action.type.endsWith(\"/pending\");\r\n}\r\n\r\nconst reducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(resetAction, () => initialState)\r\n    // matcher can be defined outside as a type predicate function\r\n    .addMatcher(isPendingAction, (state, action) => {\r\n      state[action.meta.requestId] = \"pending\";\r\n    })\r\n    .addMatcher(\r\n      // matcher can be defined inline as a type predicate function\r\n      (action): action is RejectedAction => action.type.endsWith(\"/rejected\"),\r\n      (state, action) => {\r\n        state[action.meta.requestId] = \"rejected\";\r\n      }\r\n    )\r\n    // matcher can just return boolean and the matcher can receive a generic argument\r\n    .addMatcher<FulfilledAction>(\r\n      (action) => action.type.endsWith(\"/fulfilled\"),\r\n      (state, action) => {\r\n        state[action.meta.requestId] = \"fulfilled\";\r\n      }\r\n    );\r\n});\r\n```\r\n   */\r\n  addMatcher<A>(\r\n    matcher: TypeGuard<A> | ((action: any) => boolean),\r\n    reducer: CaseReducer<State, A extends AnyAction ? A : A & AnyAction>\r\n  ): Omit<ActionReducerMapBuilder<State>, 'addCase'>\r\n\r\n  /**\r\n   * Adds a \"default case\" reducer that is executed if no case reducer and no matcher\r\n   * reducer was executed for this action.\r\n   * @param reducer - The fallback \"default case\" reducer function.\r\n   *\r\n   * @example\r\n```ts\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nconst initialState = { otherActions: 0 }\r\nconst reducer = createReducer(initialState, builder => {\r\n  builder\r\n    // .addCase(...)\r\n    // .addMatcher(...)\r\n    .addDefaultCase((state, action) => {\r\n      state.otherActions++\r\n    })\r\n})\r\n```\r\n   */\r\n  addDefaultCase(reducer: CaseReducer<State, AnyAction>): {}\r\n}\r\n\r\nexport function executeReducerBuilderCallback<S>(\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): [\r\n  CaseReducers<S, any>,\r\n  ActionMatcherDescriptionCollection<S>,\r\n  CaseReducer<S, AnyAction> | undefined\r\n] {\r\n  const actionsMap: CaseReducers<S, any> = {}\r\n  const actionMatchers: ActionMatcherDescriptionCollection<S> = []\r\n  let defaultCaseReducer: CaseReducer<S, AnyAction> | undefined\r\n  const builder = {\r\n    addCase(\r\n      typeOrActionCreator: string | TypedActionCreator<any>,\r\n      reducer: CaseReducer<S>\r\n    ) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        /*\r\n         to keep the definition by the user in line with actual behavior, \r\n         we enforce `addCase` to always be called before calling `addMatcher`\r\n         as matching cases take precedence over matchers\r\n         */\r\n        if (actionMatchers.length > 0) {\r\n          throw new Error(\r\n            '`builder.addCase` should only be called before calling `builder.addMatcher`'\r\n          )\r\n        }\r\n        if (defaultCaseReducer) {\r\n          throw new Error(\r\n            '`builder.addCase` should only be called before calling `builder.addDefaultCase`'\r\n          )\r\n        }\r\n      }\r\n      const type =\r\n        typeof typeOrActionCreator === 'string'\r\n          ? typeOrActionCreator\r\n          : typeOrActionCreator.type\r\n      if (type in actionsMap) {\r\n        throw new Error(\r\n          'addCase cannot be called with two reducers for the same action type'\r\n        )\r\n      }\r\n      actionsMap[type] = reducer\r\n      return builder\r\n    },\r\n    addMatcher<A>(\r\n      matcher: TypeGuard<A>,\r\n      reducer: CaseReducer<S, A extends AnyAction ? A : A & AnyAction>\r\n    ) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (defaultCaseReducer) {\r\n          throw new Error(\r\n            '`builder.addMatcher` should only be called before calling `builder.addDefaultCase`'\r\n          )\r\n        }\r\n      }\r\n      actionMatchers.push({ matcher, reducer })\r\n      return builder\r\n    },\r\n    addDefaultCase(reducer: CaseReducer<S, AnyAction>) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (defaultCaseReducer) {\r\n          throw new Error('`builder.addDefaultCase` can only be called once')\r\n        }\r\n      }\r\n      defaultCaseReducer = reducer\r\n      return builder\r\n    },\r\n  }\r\n  builderCallback(builder)\r\n  return [actionsMap, actionMatchers, defaultCaseReducer]\r\n}\r\n","import type { AnyAction, Reducer } from 'redux'\r\nimport { createNextState } from '.'\r\nimport type {\r\n  ActionCreatorWithoutPayload,\r\n  PayloadAction,\r\n  PayloadActionCreator,\r\n  PrepareAction,\r\n  _ActionCreatorWithPreparedPayload,\r\n} from './createAction'\r\nimport { createAction } from './createAction'\r\nimport type {\r\n  CaseReducer,\r\n  CaseReducers,\r\n  ReducerWithInitialState,\r\n} from './createReducer'\r\nimport { createReducer, NotFunction } from './createReducer'\r\nimport type { ActionReducerMapBuilder } from './mapBuilders'\r\nimport { executeReducerBuilderCallback } from './mapBuilders'\r\nimport type { NoInfer } from './tsHelpers'\r\n\r\n/**\r\n * An action creator attached to a slice.\r\n *\r\n * @deprecated please use PayloadActionCreator directly\r\n *\r\n * @public\r\n */\r\nexport type SliceActionCreator<P> = PayloadActionCreator<P>\r\n\r\n/**\r\n * The return value of `createSlice`\r\n *\r\n * @public\r\n */\r\nexport interface Slice<\r\n  State = any,\r\n  CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>,\r\n  Name extends string = string\r\n> {\r\n  /**\r\n   * The slice name.\r\n   */\r\n  name: Name\r\n\r\n  /**\r\n   * The slice's reducer.\r\n   */\r\n  reducer: Reducer<State>\r\n\r\n  /**\r\n   * Action creators for the types of actions that are handled by the slice\r\n   * reducer.\r\n   */\r\n  actions: CaseReducerActions<CaseReducers>\r\n\r\n  /**\r\n   * The individual case reducer functions that were passed in the `reducers` parameter.\r\n   * This enables reuse and testing if they were defined inline when calling `createSlice`.\r\n   */\r\n  caseReducers: SliceDefinedCaseReducers<CaseReducers>\r\n\r\n  /**\r\n   * Provides access to the initial state value given to the slice.\r\n   * If a lazy state initializer was provided, it will be called and a fresh value returned.\r\n   */\r\n  getInitialState: () => State\r\n}\r\n\r\n/**\r\n * Options for `createSlice()`.\r\n *\r\n * @public\r\n */\r\nexport interface CreateSliceOptions<\r\n  State = any,\r\n  CR extends SliceCaseReducers<State> = SliceCaseReducers<State>,\r\n  Name extends string = string\r\n> {\r\n  /**\r\n   * The slice's name. Used to namespace the generated action types.\r\n   */\r\n  name: Name\r\n\r\n  /**\r\n   * The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\r\n   */\r\n  initialState: State | (() => State)\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. For every action type, a matching action creator will be\r\n   * generated using `createAction()`.\r\n   */\r\n  reducers: ValidateSliceCaseReducers<State, CR>\r\n\r\n  /**\r\n   * A callback that receives a *builder* object to define\r\n   * case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n   * \r\n   * Alternatively, a mapping from action types to action-type-specific *case reducer*\r\n   * functions. These reducers should have existing action types used\r\n   * as the keys, and action creators will _not_ be generated.\r\n   * \r\n   * @example\r\n```ts\r\nimport { createAction, createSlice, Action, AnyAction } from '@reduxjs/toolkit'\r\nconst incrementBy = createAction<number>('incrementBy')\r\nconst decrement = createAction('decrement')\r\n\r\ninterface RejectedAction extends Action {\r\n  error: Error\r\n}\r\n\r\nfunction isRejectedAction(action: AnyAction): action is RejectedAction {\r\n  return action.type.endsWith('rejected')\r\n}\r\n\r\ncreateSlice({\r\n  name: 'counter',\r\n  initialState: 0,\r\n  reducers: {},\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(incrementBy, (state, action) => {\r\n        // action is inferred correctly here if using TS\r\n      })\r\n      // You can chain calls, or have separate `builder.addCase()` lines each time\r\n      .addCase(decrement, (state, action) => {})\r\n      // You can match a range of action types\r\n      .addMatcher(\r\n        isRejectedAction,\r\n        // `action` will be inferred as a RejectedAction due to isRejectedAction being defined as a type guard\r\n        (state, action) => {}\r\n      )\r\n      // and provide a default case if no other handlers matched\r\n      .addDefaultCase((state, action) => {})\r\n    }\r\n})\r\n```\r\n   */\r\n  extraReducers?:\r\n    | CaseReducers<NoInfer<State>, any>\r\n    | ((builder: ActionReducerMapBuilder<NoInfer<State>>) => void)\r\n}\r\n\r\n/**\r\n * A CaseReducer with a `prepare` method.\r\n *\r\n * @public\r\n */\r\nexport type CaseReducerWithPrepare<State, Action extends PayloadAction> = {\r\n  reducer: CaseReducer<State, Action>\r\n  prepare: PrepareAction<Action['payload']>\r\n}\r\n\r\n/**\r\n * The type describing a slice's `reducers` option.\r\n *\r\n * @public\r\n */\r\nexport type SliceCaseReducers<State> = {\r\n  [K: string]:\r\n    | CaseReducer<State, PayloadAction<any>>\r\n    | CaseReducerWithPrepare<State, PayloadAction<any, string, any, any>>\r\n}\r\n\r\n/**\r\n * Derives the slice's `actions` property from the `reducers` options\r\n *\r\n * @public\r\n */\r\nexport type CaseReducerActions<CaseReducers extends SliceCaseReducers<any>> = {\r\n  [Type in keyof CaseReducers]: CaseReducers[Type] extends { prepare: any }\r\n    ? ActionCreatorForCaseReducerWithPrepare<CaseReducers[Type]>\r\n    : ActionCreatorForCaseReducer<CaseReducers[Type]>\r\n}\r\n\r\n/**\r\n * Get a `PayloadActionCreator` type for a passed `CaseReducerWithPrepare`\r\n *\r\n * @internal\r\n */\r\ntype ActionCreatorForCaseReducerWithPrepare<CR extends { prepare: any }> =\r\n  _ActionCreatorWithPreparedPayload<CR['prepare'], string>\r\n\r\n/**\r\n * Get a `PayloadActionCreator` type for a passed `CaseReducer`\r\n *\r\n * @internal\r\n */\r\ntype ActionCreatorForCaseReducer<CR> = CR extends (\r\n  state: any,\r\n  action: infer Action\r\n) => any\r\n  ? Action extends { payload: infer P }\r\n    ? PayloadActionCreator<P>\r\n    : ActionCreatorWithoutPayload\r\n  : ActionCreatorWithoutPayload\r\n\r\n/**\r\n * Extracts the CaseReducers out of a `reducers` object, even if they are\r\n * tested into a `CaseReducerWithPrepare`.\r\n *\r\n * @internal\r\n */\r\ntype SliceDefinedCaseReducers<CaseReducers extends SliceCaseReducers<any>> = {\r\n  [Type in keyof CaseReducers]: CaseReducers[Type] extends {\r\n    reducer: infer Reducer\r\n  }\r\n    ? Reducer\r\n    : CaseReducers[Type]\r\n}\r\n\r\n/**\r\n * Used on a SliceCaseReducers object.\r\n * Ensures that if a CaseReducer is a `CaseReducerWithPrepare`, that\r\n * the `reducer` and the `prepare` function use the same type of `payload`.\r\n *\r\n * Might do additional such checks in the future.\r\n *\r\n * This type is only ever useful if you want to write your own wrapper around\r\n * `createSlice`. Please don't use it otherwise!\r\n *\r\n * @public\r\n */\r\nexport type ValidateSliceCaseReducers<\r\n  S,\r\n  ACR extends SliceCaseReducers<S>\r\n> = ACR &\r\n  {\r\n    [T in keyof ACR]: ACR[T] extends {\r\n      reducer(s: S, action?: infer A): any\r\n    }\r\n      ? {\r\n          prepare(...a: never[]): Omit<A, 'type'>\r\n        }\r\n      : {}\r\n  }\r\n\r\nfunction getType(slice: string, actionKey: string): string {\r\n  return `${slice}/${actionKey}`\r\n}\r\n\r\n/**\r\n * A function that accepts an initial state, an object full of reducer\r\n * functions, and a \"slice name\", and automatically generates\r\n * action creators and action types that correspond to the\r\n * reducers and state.\r\n *\r\n * The `reducer` argument is passed to `createReducer()`.\r\n *\r\n * @public\r\n */\r\nexport function createSlice<\r\n  State,\r\n  CaseReducers extends SliceCaseReducers<State>,\r\n  Name extends string = string\r\n>(\r\n  options: CreateSliceOptions<State, CaseReducers, Name>\r\n): Slice<State, CaseReducers, Name> {\r\n  const { name } = options\r\n  if (!name) {\r\n    throw new Error('`name` is a required option for createSlice')\r\n  }\r\n  const initialState =\r\n    typeof options.initialState == 'function'\r\n      ? options.initialState\r\n      : createNextState(options.initialState, () => {})\r\n\r\n  const reducers = options.reducers || {}\r\n\r\n  const reducerNames = Object.keys(reducers)\r\n\r\n  const sliceCaseReducersByName: Record<string, CaseReducer> = {}\r\n  const sliceCaseReducersByType: Record<string, CaseReducer> = {}\r\n  const actionCreators: Record<string, Function> = {}\r\n\r\n  reducerNames.forEach((reducerName) => {\r\n    const maybeReducerWithPrepare = reducers[reducerName]\r\n    const type = getType(name, reducerName)\r\n\r\n    let caseReducer: CaseReducer<State, any>\r\n    let prepareCallback: PrepareAction<any> | undefined\r\n\r\n    if ('reducer' in maybeReducerWithPrepare) {\r\n      caseReducer = maybeReducerWithPrepare.reducer\r\n      prepareCallback = maybeReducerWithPrepare.prepare\r\n    } else {\r\n      caseReducer = maybeReducerWithPrepare\r\n    }\r\n\r\n    sliceCaseReducersByName[reducerName] = caseReducer\r\n    sliceCaseReducersByType[type] = caseReducer\r\n    actionCreators[reducerName] = prepareCallback\r\n      ? createAction(type, prepareCallback)\r\n      : createAction(type)\r\n  })\r\n\r\n  function buildReducer() {\r\n    const [\r\n      extraReducers = {},\r\n      actionMatchers = [],\r\n      defaultCaseReducer = undefined,\r\n    ] =\r\n      typeof options.extraReducers === 'function'\r\n        ? executeReducerBuilderCallback(options.extraReducers)\r\n        : [options.extraReducers]\r\n\r\n    const finalCaseReducers = { ...extraReducers, ...sliceCaseReducersByType }\r\n    return createReducer(\r\n      initialState,\r\n      finalCaseReducers as any,\r\n      actionMatchers,\r\n      defaultCaseReducer\r\n    )\r\n  }\r\n\r\n  let _reducer: ReducerWithInitialState<State>\r\n\r\n  return {\r\n    name,\r\n    reducer(state, action) {\r\n      if (!_reducer) _reducer = buildReducer()\r\n\r\n      return _reducer(state, action)\r\n    },\r\n    actions: actionCreators as any,\r\n    caseReducers: sliceCaseReducersByName as any,\r\n    getInitialState() {\r\n      if (!_reducer) _reducer = buildReducer()\r\n\r\n      return _reducer.getInitialState()\r\n    },\r\n  }\r\n}\r\n","import type { EntityState } from './models'\r\n\r\nexport function getInitialEntityState<V>(): EntityState<V> {\r\n  return {\r\n    ids: [],\r\n    entities: {},\r\n  }\r\n}\r\n\r\nexport function createInitialStateFactory<V>() {\r\n  function getInitialState(): EntityState<V>\r\n  function getInitialState<S extends object>(\r\n    additionalState: S\r\n  ): EntityState<V> & S\r\n  function getInitialState(additionalState: any = {}): any {\r\n    return Object.assign(getInitialEntityState(), additionalState)\r\n  }\r\n\r\n  return { getInitialState }\r\n}\r\n","import type { Selector } from 'reselect'\r\nimport { createDraftSafeSelector } from '../createDraftSafeSelector'\r\nimport type {\r\n  EntityState,\r\n  EntitySelectors,\r\n  Dictionary,\r\n  EntityId,\r\n} from './models'\r\n\r\nexport function createSelectorsFactory<T>() {\r\n  function getSelectors(): EntitySelectors<T, EntityState<T>>\r\n  function getSelectors<V>(\r\n    selectState: (state: V) => EntityState<T>\r\n  ): EntitySelectors<T, V>\r\n  function getSelectors<V>(\r\n    selectState?: (state: V) => EntityState<T>\r\n  ): EntitySelectors<T, any> {\r\n    const selectIds = (state: EntityState<T>) => state.ids\r\n\r\n    const selectEntities = (state: EntityState<T>) => state.entities\r\n\r\n    const selectAll = createDraftSafeSelector(\r\n      selectIds,\r\n      selectEntities,\r\n      (ids, entities): T[] => ids.map((id) => entities[id]!)\r\n    )\r\n\r\n    const selectId = (_: unknown, id: EntityId) => id\r\n\r\n    const selectById = (entities: Dictionary<T>, id: EntityId) => entities[id]\r\n\r\n    const selectTotal = createDraftSafeSelector(selectIds, (ids) => ids.length)\r\n\r\n    if (!selectState) {\r\n      return {\r\n        selectIds,\r\n        selectEntities,\r\n        selectAll,\r\n        selectTotal,\r\n        selectById: createDraftSafeSelector(\r\n          selectEntities,\r\n          selectId,\r\n          selectById\r\n        ),\r\n      }\r\n    }\r\n\r\n    const selectGlobalizedEntities = createDraftSafeSelector(\r\n      selectState as Selector<V, EntityState<T>>,\r\n      selectEntities\r\n    )\r\n\r\n    return {\r\n      selectIds: createDraftSafeSelector(selectState, selectIds),\r\n      selectEntities: selectGlobalizedEntities,\r\n      selectAll: createDraftSafeSelector(selectState, selectAll),\r\n      selectTotal: createDraftSafeSelector(selectState, selectTotal),\r\n      selectById: createDraftSafeSelector(\r\n        selectGlobalizedEntities,\r\n        selectId,\r\n        selectById\r\n      ),\r\n    }\r\n  }\r\n\r\n  return { getSelectors }\r\n}\r\n","import createNextState, { isDraft } from 'immer'\r\nimport type { EntityState, PreventAny } from './models'\r\nimport type { PayloadAction } from '../createAction'\r\nimport { isFSA } from '../createAction'\r\nimport { IsAny } from '../tsHelpers'\r\n\r\nexport function createSingleArgumentStateOperator<V>(\r\n  mutator: (state: EntityState<V>) => void\r\n) {\r\n  const operator = createStateOperator((_: undefined, state: EntityState<V>) =>\r\n    mutator(state)\r\n  )\r\n\r\n  return function operation<S extends EntityState<V>>(\r\n    state: PreventAny<S, V>\r\n  ): S {\r\n    return operator(state as S, undefined)\r\n  }\r\n}\r\n\r\nexport function createStateOperator<V, R>(\r\n  mutator: (arg: R, state: EntityState<V>) => void\r\n) {\r\n  return function operation<S extends EntityState<V>>(\r\n    state: S,\r\n    arg: R | PayloadAction<R>\r\n  ): S {\r\n    function isPayloadActionArgument(\r\n      arg: R | PayloadAction<R>\r\n    ): arg is PayloadAction<R> {\r\n      return isFSA(arg)\r\n    }\r\n\r\n    const runMutator = (draft: EntityState<V>) => {\r\n      if (isPayloadActionArgument(arg)) {\r\n        mutator(arg.payload, draft)\r\n      } else {\r\n        mutator(arg, draft)\r\n      }\r\n    }\r\n\r\n    if (isDraft(state)) {\r\n      // we must already be inside a `createNextState` call, likely because\r\n      // this is being wrapped in `createReducer` or `createSlice`.\r\n      // It's safe to just pass the draft to the mutator.\r\n      runMutator(state)\r\n\r\n      // since it's a draft, we'll just return it\r\n      return state\r\n    } else {\r\n      // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\r\n      // than an Immutable<S>, and TypeScript cannot find out how to reconcile\r\n      // these two types.\r\n      return createNextState(state, runMutator)\r\n    }\r\n  }\r\n}\r\n","import type { EntityState, IdSelector, Update, EntityId } from './models'\r\n\r\nexport function selectIdValue<T>(entity: T, selectId: IdSelector<T>) {\r\n  const key = selectId(entity)\r\n\r\n  if (process.env.NODE_ENV !== 'production' && key === undefined) {\r\n    console.warn(\r\n      'The entity passed to the `selectId` implementation returned undefined.',\r\n      'You should probably provide your own `selectId` implementation.',\r\n      'The entity that was passed:',\r\n      entity,\r\n      'The `selectId` implementation:',\r\n      selectId.toString()\r\n    )\r\n  }\r\n\r\n  return key\r\n}\r\n\r\nexport function ensureEntitiesArray<T>(\r\n  entities: readonly T[] | Record<EntityId, T>\r\n): readonly T[] {\r\n  if (!Array.isArray(entities)) {\r\n    entities = Object.values(entities)\r\n  }\r\n\r\n  return entities\r\n}\r\n\r\nexport function splitAddedUpdatedEntities<T>(\r\n  newEntities: readonly T[] | Record<EntityId, T>,\r\n  selectId: IdSelector<T>,\r\n  state: EntityState<T>\r\n): [T[], Update<T>[]] {\r\n  newEntities = ensureEntitiesArray(newEntities)\r\n\r\n  const added: T[] = []\r\n  const updated: Update<T>[] = []\r\n\r\n  for (const entity of newEntities) {\r\n    const id = selectIdValue(entity, selectId)\r\n    if (id in state.entities) {\r\n      updated.push({ id, changes: entity })\r\n    } else {\r\n      added.push(entity)\r\n    }\r\n  }\r\n  return [added, updated]\r\n}\r\n","import type {\r\n  EntityState,\r\n  EntityStateAdapter,\r\n  IdSelector,\r\n  Update,\r\n  EntityId,\r\n} from './models'\r\nimport {\r\n  createStateOperator,\r\n  createSingleArgumentStateOperator,\r\n} from './state_adapter'\r\nimport {\r\n  selectIdValue,\r\n  ensureEntitiesArray,\r\n  splitAddedUpdatedEntities,\r\n} from './utils'\r\n\r\nexport function createUnsortedStateAdapter<T>(\r\n  selectId: IdSelector<T>\r\n): EntityStateAdapter<T> {\r\n  type R = EntityState<T>\r\n\r\n  function addOneMutably(entity: T, state: R): void {\r\n    const key = selectIdValue(entity, selectId)\r\n\r\n    if (key in state.entities) {\r\n      return\r\n    }\r\n\r\n    state.ids.push(key)\r\n    state.entities[key] = entity\r\n  }\r\n\r\n  function addManyMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    newEntities = ensureEntitiesArray(newEntities)\r\n\r\n    for (const entity of newEntities) {\r\n      addOneMutably(entity, state)\r\n    }\r\n  }\r\n\r\n  function setOneMutably(entity: T, state: R): void {\r\n    const key = selectIdValue(entity, selectId)\r\n    if (!(key in state.entities)) {\r\n      state.ids.push(key)\r\n    }\r\n    state.entities[key] = entity\r\n  }\r\n\r\n  function setManyMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    newEntities = ensureEntitiesArray(newEntities)\r\n    for (const entity of newEntities) {\r\n      setOneMutably(entity, state)\r\n    }\r\n  }\r\n\r\n  function setAllMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    newEntities = ensureEntitiesArray(newEntities)\r\n\r\n    state.ids = []\r\n    state.entities = {}\r\n\r\n    addManyMutably(newEntities, state)\r\n  }\r\n\r\n  function removeOneMutably(key: EntityId, state: R): void {\r\n    return removeManyMutably([key], state)\r\n  }\r\n\r\n  function removeManyMutably(keys: readonly EntityId[], state: R): void {\r\n    let didMutate = false\r\n\r\n    keys.forEach((key) => {\r\n      if (key in state.entities) {\r\n        delete state.entities[key]\r\n        didMutate = true\r\n      }\r\n    })\r\n\r\n    if (didMutate) {\r\n      state.ids = state.ids.filter((id) => id in state.entities)\r\n    }\r\n  }\r\n\r\n  function removeAllMutably(state: R): void {\r\n    Object.assign(state, {\r\n      ids: [],\r\n      entities: {},\r\n    })\r\n  }\r\n\r\n  function takeNewKey(\r\n    keys: { [id: string]: EntityId },\r\n    update: Update<T>,\r\n    state: R\r\n  ): boolean {\r\n    const original = state.entities[update.id]\r\n    const updated: T = Object.assign({}, original, update.changes)\r\n    const newKey = selectIdValue(updated, selectId)\r\n    const hasNewKey = newKey !== update.id\r\n\r\n    if (hasNewKey) {\r\n      keys[update.id] = newKey\r\n      delete state.entities[update.id]\r\n    }\r\n\r\n    state.entities[newKey] = updated\r\n\r\n    return hasNewKey\r\n  }\r\n\r\n  function updateOneMutably(update: Update<T>, state: R): void {\r\n    return updateManyMutably([update], state)\r\n  }\r\n\r\n  function updateManyMutably(\r\n    updates: ReadonlyArray<Update<T>>,\r\n    state: R\r\n  ): void {\r\n    const newKeys: { [id: string]: EntityId } = {}\r\n\r\n    const updatesPerEntity: { [id: string]: Update<T> } = {}\r\n\r\n    updates.forEach((update) => {\r\n      // Only apply updates to entities that currently exist\r\n      if (update.id in state.entities) {\r\n        // If there are multiple updates to one entity, merge them together\r\n        updatesPerEntity[update.id] = {\r\n          id: update.id,\r\n          // Spreads ignore falsy values, so this works even if there isn't\r\n          // an existing update already at this key\r\n          changes: {\r\n            ...(updatesPerEntity[update.id]\r\n              ? updatesPerEntity[update.id].changes\r\n              : null),\r\n            ...update.changes,\r\n          },\r\n        }\r\n      }\r\n    })\r\n\r\n    updates = Object.values(updatesPerEntity)\r\n\r\n    const didMutateEntities = updates.length > 0\r\n\r\n    if (didMutateEntities) {\r\n      const didMutateIds =\r\n        updates.filter((update) => takeNewKey(newKeys, update, state)).length >\r\n        0\r\n\r\n      if (didMutateIds) {\r\n        state.ids = state.ids.map((id) => newKeys[id] || id)\r\n      }\r\n    }\r\n  }\r\n\r\n  function upsertOneMutably(entity: T, state: R): void {\r\n    return upsertManyMutably([entity], state)\r\n  }\r\n\r\n  function upsertManyMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    const [added, updated] = splitAddedUpdatedEntities<T>(\r\n      newEntities,\r\n      selectId,\r\n      state\r\n    )\r\n\r\n    updateManyMutably(updated, state)\r\n    addManyMutably(added, state)\r\n  }\r\n\r\n  return {\r\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\r\n    addOne: createStateOperator(addOneMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    setOne: createStateOperator(setOneMutably),\r\n    setMany: createStateOperator(setManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably),\r\n    removeOne: createStateOperator(removeOneMutably),\r\n    removeMany: createStateOperator(removeManyMutably),\r\n  }\r\n}\r\n","import type {\r\n  EntityState,\r\n  IdSelector,\r\n  Comparer,\r\n  EntityStateAdapter,\r\n  Update,\r\n  EntityId,\r\n} from './models'\r\nimport { createStateOperator } from './state_adapter'\r\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter'\r\nimport {\r\n  selectIdValue,\r\n  ensureEntitiesArray,\r\n  splitAddedUpdatedEntities,\r\n} from './utils'\r\n\r\nexport function createSortedStateAdapter<T>(\r\n  selectId: IdSelector<T>,\r\n  sort: Comparer<T>\r\n): EntityStateAdapter<T> {\r\n  type R = EntityState<T>\r\n\r\n  const { removeOne, removeMany, removeAll } =\r\n    createUnsortedStateAdapter(selectId)\r\n\r\n  function addOneMutably(entity: T, state: R): void {\r\n    return addManyMutably([entity], state)\r\n  }\r\n\r\n  function addManyMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    newEntities = ensureEntitiesArray(newEntities)\r\n\r\n    const models = newEntities.filter(\r\n      (model) => !(selectIdValue(model, selectId) in state.entities)\r\n    )\r\n\r\n    if (models.length !== 0) {\r\n      merge(models, state)\r\n    }\r\n  }\r\n\r\n  function setOneMutably(entity: T, state: R): void {\r\n    return setManyMutably([entity], state)\r\n  }\r\n\r\n  function setManyMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    newEntities = ensureEntitiesArray(newEntities)\r\n    if (newEntities.length !== 0) {\r\n      merge(newEntities, state)\r\n    }\r\n  }\r\n\r\n  function setAllMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    newEntities = ensureEntitiesArray(newEntities)\r\n    state.entities = {}\r\n    state.ids = []\r\n\r\n    addManyMutably(newEntities, state)\r\n  }\r\n\r\n  function updateOneMutably(update: Update<T>, state: R): void {\r\n    return updateManyMutably([update], state)\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\r\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean {\r\n    if (!(update.id in state.entities)) {\r\n      return false\r\n    }\r\n\r\n    const original = state.entities[update.id]\r\n    const updated = Object.assign({}, original, update.changes)\r\n    const newKey = selectIdValue(updated, selectId)\r\n\r\n    delete state.entities[update.id]\r\n\r\n    models.push(updated)\r\n\r\n    return newKey !== update.id\r\n  }\r\n\r\n  function updateManyMutably(\r\n    updates: ReadonlyArray<Update<T>>,\r\n    state: R\r\n  ): void {\r\n    const models: T[] = []\r\n\r\n    updates.forEach((update) => takeUpdatedModel(models, update, state))\r\n\r\n    if (models.length !== 0) {\r\n      merge(models, state)\r\n    }\r\n  }\r\n\r\n  function upsertOneMutably(entity: T, state: R): void {\r\n    return upsertManyMutably([entity], state)\r\n  }\r\n\r\n  function upsertManyMutably(\r\n    newEntities: readonly T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    const [added, updated] = splitAddedUpdatedEntities<T>(\r\n      newEntities,\r\n      selectId,\r\n      state\r\n    )\r\n\r\n    updateManyMutably(updated, state)\r\n    addManyMutably(added, state)\r\n  }\r\n\r\n  function areArraysEqual(a: readonly unknown[], b: readonly unknown[]) {\r\n    if (a.length !== b.length) {\r\n      return false\r\n    }\r\n\r\n    for (let i = 0; i < a.length && i < b.length; i++) {\r\n      if (a[i] === b[i]) {\r\n        continue\r\n      }\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  function merge(models: readonly T[], state: R): void {\r\n    // Insert/overwrite all new/updated\r\n    models.forEach((model) => {\r\n      state.entities[selectId(model)] = model\r\n    })\r\n\r\n    const allEntities = Object.values(state.entities) as T[]\r\n    allEntities.sort(sort)\r\n\r\n    const newSortedIds = allEntities.map(selectId)\r\n    const { ids } = state\r\n\r\n    if (!areArraysEqual(ids, newSortedIds)) {\r\n      state.ids = newSortedIds\r\n    }\r\n  }\r\n\r\n  return {\r\n    removeOne,\r\n    removeMany,\r\n    removeAll,\r\n    addOne: createStateOperator(addOneMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    setOne: createStateOperator(setOneMutably),\r\n    setMany: createStateOperator(setManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably),\r\n  }\r\n}\r\n","import type {\r\n  EntityDefinition,\r\n  Comparer,\r\n  IdSelector,\r\n  EntityAdapter,\r\n} from './models'\r\nimport { createInitialStateFactory } from './entity_state'\r\nimport { createSelectorsFactory } from './state_selectors'\r\nimport { createSortedStateAdapter } from './sorted_state_adapter'\r\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter'\r\n\r\n/**\r\n *\r\n * @param options\r\n *\r\n * @public\r\n */\r\nexport function createEntityAdapter<T>(\r\n  options: {\r\n    selectId?: IdSelector<T>\r\n    sortComparer?: false | Comparer<T>\r\n  } = {}\r\n): EntityAdapter<T> {\r\n  const { selectId, sortComparer }: EntityDefinition<T> = {\r\n    sortComparer: false,\r\n    selectId: (instance: any) => instance.id,\r\n    ...options,\r\n  }\r\n\r\n  const stateFactory = createInitialStateFactory<T>()\r\n  const selectorsFactory = createSelectorsFactory<T>()\r\n  const stateAdapter = sortComparer\r\n    ? createSortedStateAdapter(selectId, sortComparer)\r\n    : createUnsortedStateAdapter(selectId)\r\n\r\n  return {\r\n    selectId,\r\n    sortComparer,\r\n    ...stateFactory,\r\n    ...selectorsFactory,\r\n    ...stateAdapter,\r\n  }\r\n}\r\n","// Borrowed from https://github.com/ai/nanoid/blob/3.0.2/non-secure/index.js\r\n// This alphabet uses `A-Za-z0-9_-` symbols. A genetic algorithm helped\r\n// optimize the gzip compression for this alphabet.\r\nlet urlAlphabet =\r\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\r\n\r\n/**\r\n *\r\n * @public\r\n */\r\nexport let nanoid = (size = 21) => {\r\n  let id = ''\r\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\r\n  let i = size\r\n  while (i--) {\r\n    // `| 0` is more compact and faster than `Math.floor()`.\r\n    id += urlAlphabet[(Math.random() * 64) | 0]\r\n  }\r\n  return id\r\n}\r\n","import type { Dispatch, AnyAction } from 'redux'\r\nimport type {\r\n  PayloadAction,\r\n  ActionCreatorWithPreparedPayload,\r\n} from './createAction'\r\nimport { createAction } from './createAction'\r\nimport type { ThunkDispatch } from 'redux-thunk'\r\nimport type { FallbackIfUnknown, IsAny, IsUnknown } from './tsHelpers'\r\nimport { nanoid } from './nanoid'\r\n\r\n// @ts-ignore we need the import of these types due to a bundling issue.\r\ntype _Keep = PayloadAction | ActionCreatorWithPreparedPayload<any, unknown>\r\n\r\nexport type BaseThunkAPI<\r\n  S,\r\n  E,\r\n  D extends Dispatch = Dispatch,\r\n  RejectedValue = undefined,\r\n  RejectedMeta = unknown,\r\n  FulfilledMeta = unknown\r\n> = {\r\n  dispatch: D\r\n  getState: () => S\r\n  extra: E\r\n  requestId: string\r\n  signal: AbortSignal\r\n  rejectWithValue: IsUnknown<\r\n    RejectedMeta,\r\n    (value: RejectedValue) => RejectWithValue<RejectedValue, RejectedMeta>,\r\n    (\r\n      value: RejectedValue,\r\n      meta: RejectedMeta\r\n    ) => RejectWithValue<RejectedValue, RejectedMeta>\r\n  >\r\n  fulfillWithValue: IsUnknown<\r\n    FulfilledMeta,\r\n    <FulfilledValue>(\r\n      value: FulfilledValue\r\n    ) => FulfillWithMeta<FulfilledValue, FulfilledMeta>,\r\n    <FulfilledValue>(\r\n      value: FulfilledValue,\r\n      meta: FulfilledMeta\r\n    ) => FulfillWithMeta<FulfilledValue, FulfilledMeta>\r\n  >\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface SerializedError {\r\n  name?: string\r\n  message?: string\r\n  stack?: string\r\n  code?: string\r\n}\r\n\r\nconst commonProperties: Array<keyof SerializedError> = [\r\n  'name',\r\n  'message',\r\n  'stack',\r\n  'code',\r\n]\r\n\r\nclass RejectWithValue<Payload, RejectedMeta> {\r\n  /*\r\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\r\n  does not exist at runtime\r\n  */\r\n  private readonly _type!: 'RejectWithValue'\r\n  constructor(\r\n    public readonly payload: Payload,\r\n    public readonly meta: RejectedMeta\r\n  ) {}\r\n}\r\n\r\nclass FulfillWithMeta<Payload, FulfilledMeta> {\r\n  /*\r\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\r\n  does not exist at runtime\r\n  */\r\n  private readonly _type!: 'FulfillWithMeta'\r\n  constructor(\r\n    public readonly payload: Payload,\r\n    public readonly meta: FulfilledMeta\r\n  ) {}\r\n}\r\n\r\n/**\r\n * Serializes an error into a plain object.\r\n * Reworked from https://github.com/sindresorhus/serialize-error\r\n *\r\n * @public\r\n */\r\nexport const miniSerializeError = (value: any): SerializedError => {\r\n  if (typeof value === 'object' && value !== null) {\r\n    const simpleError: SerializedError = {}\r\n    for (const property of commonProperties) {\r\n      if (typeof value[property] === 'string') {\r\n        simpleError[property] = value[property]\r\n      }\r\n    }\r\n\r\n    return simpleError\r\n  }\r\n\r\n  return { message: String(value) }\r\n}\r\n\r\ntype AsyncThunkConfig = {\r\n  state?: unknown\r\n  dispatch?: Dispatch\r\n  extra?: unknown\r\n  rejectValue?: unknown\r\n  serializedErrorType?: unknown\r\n  pendingMeta?: unknown\r\n  fulfilledMeta?: unknown\r\n  rejectedMeta?: unknown\r\n}\r\n\r\ntype GetState<ThunkApiConfig> = ThunkApiConfig extends {\r\n  state: infer State\r\n}\r\n  ? State\r\n  : unknown\r\ntype GetExtra<ThunkApiConfig> = ThunkApiConfig extends { extra: infer Extra }\r\n  ? Extra\r\n  : unknown\r\ntype GetDispatch<ThunkApiConfig> = ThunkApiConfig extends {\r\n  dispatch: infer Dispatch\r\n}\r\n  ? FallbackIfUnknown<\r\n      Dispatch,\r\n      ThunkDispatch<\r\n        GetState<ThunkApiConfig>,\r\n        GetExtra<ThunkApiConfig>,\r\n        AnyAction\r\n      >\r\n    >\r\n  : ThunkDispatch<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, AnyAction>\r\n\r\ntype GetThunkAPI<ThunkApiConfig> = BaseThunkAPI<\r\n  GetState<ThunkApiConfig>,\r\n  GetExtra<ThunkApiConfig>,\r\n  GetDispatch<ThunkApiConfig>,\r\n  GetRejectValue<ThunkApiConfig>,\r\n  GetRejectedMeta<ThunkApiConfig>,\r\n  GetFulfilledMeta<ThunkApiConfig>\r\n>\r\n\r\ntype GetRejectValue<ThunkApiConfig> = ThunkApiConfig extends {\r\n  rejectValue: infer RejectValue\r\n}\r\n  ? RejectValue\r\n  : unknown\r\n\r\ntype GetPendingMeta<ThunkApiConfig> = ThunkApiConfig extends {\r\n  pendingMeta: infer PendingMeta\r\n}\r\n  ? PendingMeta\r\n  : unknown\r\n\r\ntype GetFulfilledMeta<ThunkApiConfig> = ThunkApiConfig extends {\r\n  fulfilledMeta: infer FulfilledMeta\r\n}\r\n  ? FulfilledMeta\r\n  : unknown\r\n\r\ntype GetRejectedMeta<ThunkApiConfig> = ThunkApiConfig extends {\r\n  rejectedMeta: infer RejectedMeta\r\n}\r\n  ? RejectedMeta\r\n  : unknown\r\n\r\ntype GetSerializedErrorType<ThunkApiConfig> = ThunkApiConfig extends {\r\n  serializedErrorType: infer GetSerializedErrorType\r\n}\r\n  ? GetSerializedErrorType\r\n  : SerializedError\r\n\r\ntype MaybePromise<T> = T | Promise<T> | (T extends any ? Promise<T> : never)\r\n\r\n/**\r\n * A type describing the return value of the `payloadCreator` argument to `createAsyncThunk`.\r\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkPayloadCreatorReturnValue<\r\n  Returned,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> = MaybePromise<\r\n  | IsUnknown<\r\n      GetFulfilledMeta<ThunkApiConfig>,\r\n      Returned,\r\n      FulfillWithMeta<Returned, GetFulfilledMeta<ThunkApiConfig>>\r\n    >\r\n  | RejectWithValue<\r\n      GetRejectValue<ThunkApiConfig>,\r\n      GetRejectedMeta<ThunkApiConfig>\r\n    >\r\n>\r\n/**\r\n * A type describing the `payloadCreator` argument to `createAsyncThunk`.\r\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkPayloadCreator<\r\n  Returned,\r\n  ThunkArg = void,\r\n  ThunkApiConfig extends AsyncThunkConfig = {}\r\n> = (\r\n  arg: ThunkArg,\r\n  thunkAPI: GetThunkAPI<ThunkApiConfig>\r\n) => AsyncThunkPayloadCreatorReturnValue<Returned, ThunkApiConfig>\r\n\r\n/**\r\n * A ThunkAction created by `createAsyncThunk`.\r\n * Dispatching it returns a Promise for either a\r\n * fulfilled or rejected action.\r\n * Also, the returned value contains an `abort()` method\r\n * that allows the asyncAction to be cancelled from the outside.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkAction<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> = (\r\n  dispatch: GetDispatch<ThunkApiConfig>,\r\n  getState: () => GetState<ThunkApiConfig>,\r\n  extra: GetExtra<ThunkApiConfig>\r\n) => Promise<\r\n  | ReturnType<AsyncThunkFulfilledActionCreator<Returned, ThunkArg>>\r\n  | ReturnType<AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig>>\r\n> & {\r\n  abort: (reason?: string) => void\r\n  requestId: string\r\n  arg: ThunkArg\r\n  unwrap: () => Promise<Returned>\r\n}\r\n\r\ntype AsyncThunkActionCreator<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> = IsAny<\r\n  ThunkArg,\r\n  // any handling\r\n  (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\r\n  // unknown handling\r\n  unknown extends ThunkArg\r\n    ? (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument not specified or specified as void or undefined\r\n    : [ThunkArg] extends [void] | [undefined]\r\n    ? () => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument contains void\r\n    : [void] extends [ThunkArg] // make optional\r\n    ? (arg?: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument contains undefined\r\n    : [undefined] extends [ThunkArg]\r\n    ? WithStrictNullChecks<\r\n        // with strict nullChecks: make optional\r\n        (\r\n          arg?: ThunkArg\r\n        ) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\r\n        // without strict null checks this will match everything, so don't make it optional\r\n        (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>\r\n      > // default case: normal argument\r\n    : (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>\r\n>\r\n\r\n/**\r\n * Options object for `createAsyncThunk`.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkOptions<\r\n  ThunkArg = void,\r\n  ThunkApiConfig extends AsyncThunkConfig = {}\r\n> = {\r\n  /**\r\n   * A method to control whether the asyncThunk should be executed. Has access to the\r\n   * `arg`, `api.getState()` and `api.extra` arguments.\r\n   *\r\n   * @returns `false` if it should be skipped\r\n   */\r\n  condition?(\r\n    arg: ThunkArg,\r\n    api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>\r\n  ): MaybePromise<boolean | undefined>\r\n  /**\r\n   * If `condition` returns `false`, the asyncThunk will be skipped.\r\n   * This option allows you to control whether a `rejected` action with `meta.condition == false`\r\n   * will be dispatched or not.\r\n   *\r\n   * @default `false`\r\n   */\r\n  dispatchConditionRejection?: boolean\r\n\r\n  serializeError?: (x: unknown) => GetSerializedErrorType<ThunkApiConfig>\r\n\r\n  /**\r\n   * A function to use when generating the `requestId` for the request sequence.\r\n   *\r\n   * @default `nanoid`\r\n   */\r\n  idGenerator?: (arg: ThunkArg) => string\r\n} & IsUnknown<\r\n  GetPendingMeta<ThunkApiConfig>,\r\n  {\r\n    /**\r\n     * A method to generate additional properties to be added to `meta` of the pending action.\r\n     *\r\n     * Using this optional overload will not modify the types correctly, this overload is only in place to support JavaScript users.\r\n     * Please use the `ThunkApiConfig` parameter `pendingMeta` to get access to a correctly typed overload\r\n     */\r\n    getPendingMeta?(\r\n      base: {\r\n        arg: ThunkArg\r\n        requestId: string\r\n      },\r\n      api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>\r\n    ): GetPendingMeta<ThunkApiConfig>\r\n  },\r\n  {\r\n    /**\r\n     * A method to generate additional properties to be added to `meta` of the pending action.\r\n     */\r\n    getPendingMeta(\r\n      base: {\r\n        arg: ThunkArg\r\n        requestId: string\r\n      },\r\n      api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>\r\n    ): GetPendingMeta<ThunkApiConfig>\r\n  }\r\n>\r\n\r\nexport type AsyncThunkPendingActionCreator<\r\n  ThunkArg,\r\n  ThunkApiConfig = {}\r\n> = ActionCreatorWithPreparedPayload<\r\n  [string, ThunkArg, GetPendingMeta<ThunkApiConfig>?],\r\n  undefined,\r\n  string,\r\n  never,\r\n  {\r\n    arg: ThunkArg\r\n    requestId: string\r\n    requestStatus: 'pending'\r\n  } & GetPendingMeta<ThunkApiConfig>\r\n>\r\n\r\nexport type AsyncThunkRejectedActionCreator<\r\n  ThunkArg,\r\n  ThunkApiConfig = {}\r\n> = ActionCreatorWithPreparedPayload<\r\n  [\r\n    Error | null,\r\n    string,\r\n    ThunkArg,\r\n    GetRejectValue<ThunkApiConfig>?,\r\n    GetRejectedMeta<ThunkApiConfig>?\r\n  ],\r\n  GetRejectValue<ThunkApiConfig> | undefined,\r\n  string,\r\n  GetSerializedErrorType<ThunkApiConfig>,\r\n  {\r\n    arg: ThunkArg\r\n    requestId: string\r\n    requestStatus: 'rejected'\r\n    aborted: boolean\r\n    condition: boolean\r\n  } & (\r\n    | ({ rejectedWithValue: false } & {\r\n        [K in keyof GetRejectedMeta<ThunkApiConfig>]?: undefined\r\n      })\r\n    | ({ rejectedWithValue: true } & GetRejectedMeta<ThunkApiConfig>)\r\n  )\r\n>\r\n\r\nexport type AsyncThunkFulfilledActionCreator<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig = {}\r\n> = ActionCreatorWithPreparedPayload<\r\n  [Returned, string, ThunkArg, GetFulfilledMeta<ThunkApiConfig>?],\r\n  Returned,\r\n  string,\r\n  never,\r\n  {\r\n    arg: ThunkArg\r\n    requestId: string\r\n    requestStatus: 'fulfilled'\r\n  } & GetFulfilledMeta<ThunkApiConfig>\r\n>\r\n\r\n/**\r\n * A type describing the return value of `createAsyncThunk`.\r\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunk<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> = AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig> & {\r\n  pending: AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig>\r\n  rejected: AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig>\r\n  fulfilled: AsyncThunkFulfilledActionCreator<\r\n    Returned,\r\n    ThunkArg,\r\n    ThunkApiConfig\r\n  >\r\n  typePrefix: string\r\n}\r\n\r\n/**\r\n *\r\n * @param typePrefix\r\n * @param payloadCreator\r\n * @param options\r\n *\r\n * @public\r\n */\r\n// separate signature without `AsyncThunkConfig` for better inference\r\nexport function createAsyncThunk<Returned, ThunkArg = void>(\r\n  typePrefix: string,\r\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, {}>,\r\n  options?: AsyncThunkOptions<ThunkArg, {}>\r\n): AsyncThunk<Returned, ThunkArg, {}>\r\n\r\n/**\r\n *\r\n * @param typePrefix\r\n * @param payloadCreator\r\n * @param options\r\n *\r\n * @public\r\n */\r\nexport function createAsyncThunk<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n>(\r\n  typePrefix: string,\r\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>,\r\n  options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>\r\n): AsyncThunk<Returned, ThunkArg, ThunkApiConfig>\r\n\r\nexport function createAsyncThunk<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n>(\r\n  typePrefix: string,\r\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>,\r\n  options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>\r\n): AsyncThunk<Returned, ThunkArg, ThunkApiConfig> {\r\n  type RejectedValue = GetRejectValue<ThunkApiConfig>\r\n  type PendingMeta = GetPendingMeta<ThunkApiConfig>\r\n  type FulfilledMeta = GetFulfilledMeta<ThunkApiConfig>\r\n  type RejectedMeta = GetRejectedMeta<ThunkApiConfig>\r\n\r\n  const fulfilled: AsyncThunkFulfilledActionCreator<\r\n    Returned,\r\n    ThunkArg,\r\n    ThunkApiConfig\r\n  > = createAction(\r\n    typePrefix + '/fulfilled',\r\n    (\r\n      payload: Returned,\r\n      requestId: string,\r\n      arg: ThunkArg,\r\n      meta?: FulfilledMeta\r\n    ) => ({\r\n      payload,\r\n      meta: {\r\n        ...((meta as any) || {}),\r\n        arg,\r\n        requestId,\r\n        requestStatus: 'fulfilled' as const,\r\n      },\r\n    })\r\n  )\r\n\r\n  const pending: AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig> =\r\n    createAction(\r\n      typePrefix + '/pending',\r\n      (requestId: string, arg: ThunkArg, meta?: PendingMeta) => ({\r\n        payload: undefined,\r\n        meta: {\r\n          ...((meta as any) || {}),\r\n          arg,\r\n          requestId,\r\n          requestStatus: 'pending' as const,\r\n        },\r\n      })\r\n    )\r\n\r\n  const rejected: AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig> =\r\n    createAction(\r\n      typePrefix + '/rejected',\r\n      (\r\n        error: Error | null,\r\n        requestId: string,\r\n        arg: ThunkArg,\r\n        payload?: RejectedValue,\r\n        meta?: RejectedMeta\r\n      ) => ({\r\n        payload,\r\n        error: ((options && options.serializeError) || miniSerializeError)(\r\n          error || 'Rejected'\r\n        ) as GetSerializedErrorType<ThunkApiConfig>,\r\n        meta: {\r\n          ...((meta as any) || {}),\r\n          arg,\r\n          requestId,\r\n          rejectedWithValue: !!payload,\r\n          requestStatus: 'rejected' as const,\r\n          aborted: error?.name === 'AbortError',\r\n          condition: error?.name === 'ConditionError',\r\n        },\r\n      })\r\n    )\r\n\r\n  let displayedWarning = false\r\n\r\n  const AC =\r\n    typeof AbortController !== 'undefined'\r\n      ? AbortController\r\n      : class implements AbortController {\r\n          signal: AbortSignal = {\r\n            aborted: false,\r\n            addEventListener() {},\r\n            dispatchEvent() {\r\n              return false\r\n            },\r\n            onabort() {},\r\n            removeEventListener() {},\r\n          }\r\n          abort() {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n              if (!displayedWarning) {\r\n                displayedWarning = true\r\n                console.info(\r\n                  `This platform does not implement AbortController. \r\nIf you want to use the AbortController to react to \\`abort\\` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.`\r\n                )\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n  function actionCreator(\r\n    arg: ThunkArg\r\n  ): AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> {\r\n    return (dispatch, getState, extra) => {\r\n      const requestId = options?.idGenerator\r\n        ? options.idGenerator(arg)\r\n        : nanoid()\r\n\r\n      const abortController = new AC()\r\n      let abortReason: string | undefined\r\n\r\n      const abortedPromise = new Promise<never>((_, reject) =>\r\n        abortController.signal.addEventListener('abort', () =>\r\n          reject({ name: 'AbortError', message: abortReason || 'Aborted' })\r\n        )\r\n      )\r\n\r\n      let started = false\r\n      function abort(reason?: string) {\r\n        if (started) {\r\n          abortReason = reason\r\n          abortController.abort()\r\n        }\r\n      }\r\n\r\n      const promise = (async function () {\r\n        let finalAction: ReturnType<typeof fulfilled | typeof rejected>\r\n        try {\r\n          let conditionResult = options?.condition?.(arg, { getState, extra })\r\n          if (isThenable(conditionResult)) {\r\n            conditionResult = await conditionResult\r\n          }\r\n          if (conditionResult === false) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw {\r\n              name: 'ConditionError',\r\n              message: 'Aborted due to condition callback returning false.',\r\n            }\r\n          }\r\n          started = true\r\n          dispatch(\r\n            pending(\r\n              requestId,\r\n              arg,\r\n              options?.getPendingMeta?.({ requestId, arg }, { getState, extra })\r\n            )\r\n          )\r\n          finalAction = await Promise.race([\r\n            abortedPromise,\r\n            Promise.resolve(\r\n              payloadCreator(arg, {\r\n                dispatch,\r\n                getState,\r\n                extra,\r\n                requestId,\r\n                signal: abortController.signal,\r\n                rejectWithValue: ((\r\n                  value: RejectedValue,\r\n                  meta?: RejectedMeta\r\n                ) => {\r\n                  return new RejectWithValue(value, meta)\r\n                }) as any,\r\n                fulfillWithValue: ((value: unknown, meta?: FulfilledMeta) => {\r\n                  return new FulfillWithMeta(value, meta)\r\n                }) as any,\r\n              })\r\n            ).then((result) => {\r\n              if (result instanceof RejectWithValue) {\r\n                throw result\r\n              }\r\n              if (result instanceof FulfillWithMeta) {\r\n                return fulfilled(result.payload, requestId, arg, result.meta)\r\n              }\r\n              return fulfilled(result as any, requestId, arg)\r\n            }),\r\n          ])\r\n        } catch (err) {\r\n          finalAction =\r\n            err instanceof RejectWithValue\r\n              ? rejected(null, requestId, arg, err.payload, err.meta)\r\n              : rejected(err as any, requestId, arg)\r\n        }\r\n        // We dispatch the result action _after_ the catch, to avoid having any errors\r\n        // here get swallowed by the try/catch block,\r\n        // per https://twitter.com/dan_abramov/status/770914221638942720\r\n        // and https://github.com/reduxjs/redux-toolkit/blob/e85eb17b39a2118d859f7b7746e0f3fee523e089/docs/tutorials/advanced-tutorial.md#async-error-handling-logic-in-thunks\r\n\r\n        const skipDispatch =\r\n          options &&\r\n          !options.dispatchConditionRejection &&\r\n          rejected.match(finalAction) &&\r\n          (finalAction as any).meta.condition\r\n\r\n        if (!skipDispatch) {\r\n          dispatch(finalAction)\r\n        }\r\n        return finalAction\r\n      })()\r\n      return Object.assign(promise as Promise<any>, {\r\n        abort,\r\n        requestId,\r\n        arg,\r\n        unwrap() {\r\n          return promise.then<any>(unwrapResult)\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  return Object.assign(\r\n    actionCreator as AsyncThunkActionCreator<\r\n      Returned,\r\n      ThunkArg,\r\n      ThunkApiConfig\r\n    >,\r\n    {\r\n      pending,\r\n      rejected,\r\n      fulfilled,\r\n      typePrefix,\r\n    }\r\n  )\r\n}\r\n\r\ninterface UnwrappableAction {\r\n  payload: any\r\n  meta?: any\r\n  error?: any\r\n}\r\n\r\ntype UnwrappedActionPayload<T extends UnwrappableAction> = Exclude<\r\n  T,\r\n  { error: any }\r\n>['payload']\r\n\r\n/**\r\n * @public\r\n */\r\nexport function unwrapResult<R extends UnwrappableAction>(\r\n  action: R\r\n): UnwrappedActionPayload<R> {\r\n  if (action.meta && action.meta.rejectedWithValue) {\r\n    throw action.payload\r\n  }\r\n  if (action.error) {\r\n    throw action.error\r\n  }\r\n  return action.payload\r\n}\r\n\r\ntype WithStrictNullChecks<True, False> = undefined extends boolean\r\n  ? False\r\n  : True\r\n\r\nfunction isThenable(value: any): value is PromiseLike<any> {\r\n  return (\r\n    value !== null &&\r\n    typeof value === 'object' &&\r\n    typeof value.then === 'function'\r\n  )\r\n}\r\n","import type { Middleware, Dispatch } from 'redux'\r\nimport type { MiddlewareArray } from './utils'\r\n\r\n/**\r\n * return True if T is `any`, otherwise return False\r\n * taken from https://github.com/joonhocho/tsdef\r\n *\r\n * @internal\r\n */\r\nexport type IsAny<T, True, False = never> =\r\n  // test if we are going the left AND right path in the condition\r\n  true | false extends (T extends never ? true : false) ? True : False\r\n\r\n/**\r\n * return True if T is `unknown`, otherwise return False\r\n * taken from https://github.com/joonhocho/tsdef\r\n *\r\n * @internal\r\n */\r\nexport type IsUnknown<T, True, False = never> = unknown extends T\r\n  ? IsAny<T, False, True>\r\n  : False\r\n\r\nexport type FallbackIfUnknown<T, Fallback> = IsUnknown<T, Fallback, T>\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type IfMaybeUndefined<P, True, False> = [undefined] extends [P]\r\n  ? True\r\n  : False\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type IfVoid<P, True, False> = [void] extends [P] ? True : False\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type IsEmptyObj<T, True, False = never> = T extends any\r\n  ? keyof T extends never\r\n    ? IsUnknown<T, False, IfMaybeUndefined<T, False, IfVoid<T, False, True>>>\r\n    : False\r\n  : never\r\n\r\n/**\r\n * returns True if TS version is above 3.5, False if below.\r\n * uses feature detection to detect TS version >= 3.5\r\n * * versions below 3.5 will return `{}` for unresolvable interference\r\n * * versions above will return `unknown`\r\n *\r\n * @internal\r\n */\r\nexport type AtLeastTS35<True, False> = [True, False][IsUnknown<\r\n  ReturnType<<T>() => T>,\r\n  0,\r\n  1\r\n>]\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type IsUnknownOrNonInferrable<T, True, False> = AtLeastTS35<\r\n  IsUnknown<T, True, False>,\r\n  IsEmptyObj<T, True, IsUnknown<T, True, False>>\r\n>\r\n\r\n// Appears to have a convenient side effect of ignoring `never` even if that's not what you specified\r\nexport type ExcludeFromTuple<T, E, Acc extends unknown[] = []> = T extends [\r\n  infer Head,\r\n  ...infer Tail\r\n]\r\n  ? ExcludeFromTuple<Tail, E, [...Acc, ...([Head] extends [E] ? [] : [Head])]>\r\n  : Acc\r\n\r\ntype ExtractDispatchFromMiddlewareTuple<\r\n  MiddlewareTuple extends any[],\r\n  Acc extends {}\r\n> = MiddlewareTuple extends [infer Head, ...infer Tail]\r\n  ? ExtractDispatchFromMiddlewareTuple<\r\n      Tail,\r\n      Acc & (Head extends Middleware<infer D, any> ? IsAny<D, {}, D> : {})\r\n    >\r\n  : Acc\r\n\r\nexport type ExtractDispatchExtensions<M> = M extends MiddlewareArray<\r\n  infer MiddlewareTuple\r\n>\r\n  ? ExtractDispatchFromMiddlewareTuple<MiddlewareTuple, {}>\r\n  : M extends Middleware[]\r\n  ? ExtractDispatchFromMiddlewareTuple<[...M], {}>\r\n  : never\r\n\r\n/**\r\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\r\n */\r\nexport type UnionToIntersection<U> = (\r\n  U extends any ? (k: U) => void : never\r\n) extends (k: infer I) => void\r\n  ? I\r\n  : never\r\n\r\n/**\r\n * Helper type. Passes T out again, but boxes it in a way that it cannot\r\n * \"widen\" the type by accident if it is a generic that should be inferred\r\n * from elsewhere.\r\n *\r\n * @internal\r\n */\r\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\r\n\r\nexport type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>\r\n\r\nexport interface TypeGuard<T> {\r\n  (value: any): value is T\r\n}\r\n\r\nexport interface HasMatchFunction<T> {\r\n  match: TypeGuard<T>\r\n}\r\n\r\nexport const hasMatchFunction = <T>(\r\n  v: Matcher<T>\r\n): v is HasMatchFunction<T> => {\r\n  return v && typeof (v as HasMatchFunction<T>).match === 'function'\r\n}\r\n\r\n/** @public */\r\nexport type Matcher<T> = HasMatchFunction<T> | TypeGuard<T>\r\n\r\n/** @public */\r\nexport type ActionFromMatcher<M extends Matcher<any>> = M extends Matcher<\r\n  infer T\r\n>\r\n  ? T\r\n  : never\r\n","import type {\r\n  ActionFromMatcher,\r\n  Matcher,\r\n  UnionToIntersection,\r\n} from './tsHelpers'\r\nimport { hasMatchFunction } from './tsHelpers'\r\nimport type {\r\n  AsyncThunk,\r\n  AsyncThunkFulfilledActionCreator,\r\n  AsyncThunkPendingActionCreator,\r\n  AsyncThunkRejectedActionCreator,\r\n} from './createAsyncThunk'\r\n\r\n/** @public */\r\nexport type ActionMatchingAnyOf<\r\n  Matchers extends [Matcher<any>, ...Matcher<any>[]]\r\n> = ActionFromMatcher<Matchers[number]>\r\n\r\n/** @public */\r\nexport type ActionMatchingAllOf<\r\n  Matchers extends [Matcher<any>, ...Matcher<any>[]]\r\n> = UnionToIntersection<ActionMatchingAnyOf<Matchers>>\r\n\r\nconst matches = (matcher: Matcher<any>, action: any) => {\r\n  if (hasMatchFunction(matcher)) {\r\n    return matcher.match(action)\r\n  } else {\r\n    return matcher(action)\r\n  }\r\n}\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action matches any one of the supplied type guards or action\r\n * creators.\r\n *\r\n * @param matchers The type guards or action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isAnyOf<Matchers extends [Matcher<any>, ...Matcher<any>[]]>(\r\n  ...matchers: Matchers\r\n) {\r\n  return (action: any): action is ActionMatchingAnyOf<Matchers> => {\r\n    return matchers.some((matcher) => matches(matcher, action))\r\n  }\r\n}\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action matches all of the supplied type guards or action\r\n * creators.\r\n *\r\n * @param matchers The type guards or action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isAllOf<Matchers extends [Matcher<any>, ...Matcher<any>[]]>(\r\n  ...matchers: Matchers\r\n) {\r\n  return (action: any): action is ActionMatchingAllOf<Matchers> => {\r\n    return matchers.every((matcher) => matches(matcher, action))\r\n  }\r\n}\r\n\r\n/**\r\n * @param action A redux action\r\n * @param validStatus An array of valid meta.requestStatus values\r\n *\r\n * @internal\r\n */\r\nexport function hasExpectedRequestMetadata(\r\n  action: any,\r\n  validStatus: readonly string[]\r\n) {\r\n  if (!action || !action.meta) return false\r\n\r\n  const hasValidRequestId = typeof action.meta.requestId === 'string'\r\n  const hasValidRequestStatus =\r\n    validStatus.indexOf(action.meta.requestStatus) > -1\r\n\r\n  return hasValidRequestId && hasValidRequestStatus\r\n}\r\n\r\nfunction isAsyncThunkArray(a: [any] | AnyAsyncThunk[]): a is AnyAsyncThunk[] {\r\n  return (\r\n    typeof a[0] === 'function' &&\r\n    'pending' in a[0] &&\r\n    'fulfilled' in a[0] &&\r\n    'rejected' in a[0]\r\n  )\r\n}\r\n\r\nexport type UnknownAsyncThunkPendingAction = ReturnType<\r\n  AsyncThunkPendingActionCreator<unknown>\r\n>\r\n\r\nexport type PendingActionFromAsyncThunk<T extends AnyAsyncThunk> =\r\n  ActionFromMatcher<T['pending']>\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action was created by an async thunk action creator, and that\r\n * the action is pending.\r\n *\r\n * @public\r\n */\r\nexport function isPending(): (\r\n  action: any\r\n) => action is UnknownAsyncThunkPendingAction\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action belongs to one of the provided async thunk action creators,\r\n * and that the action is pending.\r\n *\r\n * @param asyncThunks (optional) The async thunk action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isPending<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(\r\n  ...asyncThunks: AsyncThunks\r\n): (action: any) => action is PendingActionFromAsyncThunk<AsyncThunks[number]>\r\n/**\r\n * Tests if `action` is a pending thunk action\r\n * @public\r\n */\r\nexport function isPending(action: any): action is UnknownAsyncThunkPendingAction\r\nexport function isPending<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(...asyncThunks: AsyncThunks | [any]) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action: any) => hasExpectedRequestMetadata(action, ['pending'])\r\n  }\r\n\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isPending()(asyncThunks[0])\r\n  }\r\n\r\n  return (\r\n    action: any\r\n  ): action is PendingActionFromAsyncThunk<AsyncThunks[number]> => {\r\n    // note: this type will be correct because we have at least 1 asyncThunk\r\n    const matchers: [Matcher<any>, ...Matcher<any>[]] = asyncThunks.map(\r\n      (asyncThunk) => asyncThunk.pending\r\n    ) as any\r\n\r\n    const combinedMatcher = isAnyOf(...matchers)\r\n\r\n    return combinedMatcher(action)\r\n  }\r\n}\r\n\r\nexport type UnknownAsyncThunkRejectedAction = ReturnType<\r\n  AsyncThunkRejectedActionCreator<unknown, unknown>\r\n>\r\n\r\nexport type RejectedActionFromAsyncThunk<T extends AnyAsyncThunk> =\r\n  ActionFromMatcher<T['rejected']>\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action was created by an async thunk action creator, and that\r\n * the action is rejected.\r\n *\r\n * @public\r\n */\r\nexport function isRejected(): (\r\n  action: any\r\n) => action is UnknownAsyncThunkRejectedAction\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action belongs to one of the provided async thunk action creators,\r\n * and that the action is rejected.\r\n *\r\n * @param asyncThunks (optional) The async thunk action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isRejected<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(\r\n  ...asyncThunks: AsyncThunks\r\n): (action: any) => action is RejectedActionFromAsyncThunk<AsyncThunks[number]>\r\n/**\r\n * Tests if `action` is a rejected thunk action\r\n * @public\r\n */\r\nexport function isRejected(\r\n  action: any\r\n): action is UnknownAsyncThunkRejectedAction\r\nexport function isRejected<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(...asyncThunks: AsyncThunks | [any]) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action: any) => hasExpectedRequestMetadata(action, ['rejected'])\r\n  }\r\n\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isRejected()(asyncThunks[0])\r\n  }\r\n\r\n  return (\r\n    action: any\r\n  ): action is RejectedActionFromAsyncThunk<AsyncThunks[number]> => {\r\n    // note: this type will be correct because we have at least 1 asyncThunk\r\n    const matchers: [Matcher<any>, ...Matcher<any>[]] = asyncThunks.map(\r\n      (asyncThunk) => asyncThunk.rejected\r\n    ) as any\r\n\r\n    const combinedMatcher = isAnyOf(...matchers)\r\n\r\n    return combinedMatcher(action)\r\n  }\r\n}\r\n\r\nexport type UnknownAsyncThunkRejectedWithValueAction = ReturnType<\r\n  AsyncThunkRejectedActionCreator<unknown, unknown>\r\n>\r\n\r\nexport type RejectedWithValueActionFromAsyncThunk<T extends AnyAsyncThunk> =\r\n  ActionFromMatcher<T['rejected']> &\r\n    (T extends AsyncThunk<any, any, { rejectValue: infer RejectedValue }>\r\n      ? { payload: RejectedValue }\r\n      : unknown)\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action was created by an async thunk action creator, and that\r\n * the action is rejected with value.\r\n *\r\n * @public\r\n */\r\nexport function isRejectedWithValue(): (\r\n  action: any\r\n) => action is UnknownAsyncThunkRejectedAction\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action belongs to one of the provided async thunk action creators,\r\n * and that the action is rejected with value.\r\n *\r\n * @param asyncThunks (optional) The async thunk action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isRejectedWithValue<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(\r\n  ...asyncThunks: AsyncThunks\r\n): (\r\n  action: any\r\n) => action is RejectedWithValueActionFromAsyncThunk<AsyncThunks[number]>\r\n/**\r\n * Tests if `action` is a rejected thunk action with value\r\n * @public\r\n */\r\nexport function isRejectedWithValue(\r\n  action: any\r\n): action is UnknownAsyncThunkRejectedAction\r\nexport function isRejectedWithValue<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(...asyncThunks: AsyncThunks | [any]) {\r\n  const hasFlag = (action: any): action is any => {\r\n    return action && action.meta && action.meta.rejectedWithValue\r\n  }\r\n\r\n  if (asyncThunks.length === 0) {\r\n    return (action: any) => {\r\n      const combinedMatcher = isAllOf(isRejected(...asyncThunks), hasFlag)\r\n\r\n      return combinedMatcher(action)\r\n    }\r\n  }\r\n\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isRejectedWithValue()(asyncThunks[0])\r\n  }\r\n\r\n  return (\r\n    action: any\r\n  ): action is RejectedActionFromAsyncThunk<AsyncThunks[number]> => {\r\n    const combinedMatcher = isAllOf(isRejected(...asyncThunks), hasFlag)\r\n\r\n    return combinedMatcher(action)\r\n  }\r\n}\r\n\r\nexport type UnknownAsyncThunkFulfilledAction = ReturnType<\r\n  AsyncThunkFulfilledActionCreator<unknown, unknown>\r\n>\r\n\r\nexport type FulfilledActionFromAsyncThunk<T extends AnyAsyncThunk> =\r\n  ActionFromMatcher<T['fulfilled']>\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action was created by an async thunk action creator, and that\r\n * the action is fulfilled.\r\n *\r\n * @public\r\n */\r\nexport function isFulfilled(): (\r\n  action: any\r\n) => action is UnknownAsyncThunkFulfilledAction\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action belongs to one of the provided async thunk action creators,\r\n * and that the action is fulfilled.\r\n *\r\n * @param asyncThunks (optional) The async thunk action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isFulfilled<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(\r\n  ...asyncThunks: AsyncThunks\r\n): (action: any) => action is FulfilledActionFromAsyncThunk<AsyncThunks[number]>\r\n/**\r\n * Tests if `action` is a fulfilled thunk action\r\n * @public\r\n */\r\nexport function isFulfilled(\r\n  action: any\r\n): action is UnknownAsyncThunkFulfilledAction\r\nexport function isFulfilled<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(...asyncThunks: AsyncThunks | [any]) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action: any) => hasExpectedRequestMetadata(action, ['fulfilled'])\r\n  }\r\n\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isFulfilled()(asyncThunks[0])\r\n  }\r\n\r\n  return (\r\n    action: any\r\n  ): action is FulfilledActionFromAsyncThunk<AsyncThunks[number]> => {\r\n    // note: this type will be correct because we have at least 1 asyncThunk\r\n    const matchers: [Matcher<any>, ...Matcher<any>[]] = asyncThunks.map(\r\n      (asyncThunk) => asyncThunk.fulfilled\r\n    ) as any\r\n\r\n    const combinedMatcher = isAnyOf(...matchers)\r\n\r\n    return combinedMatcher(action)\r\n  }\r\n}\r\n\r\nexport type UnknownAsyncThunkAction =\r\n  | UnknownAsyncThunkPendingAction\r\n  | UnknownAsyncThunkRejectedAction\r\n  | UnknownAsyncThunkFulfilledAction\r\n\r\nexport type AnyAsyncThunk = {\r\n  pending: { match: (action: any) => action is any }\r\n  fulfilled: { match: (action: any) => action is any }\r\n  rejected: { match: (action: any) => action is any }\r\n}\r\n\r\nexport type ActionsFromAsyncThunk<T extends AnyAsyncThunk> =\r\n  | ActionFromMatcher<T['pending']>\r\n  | ActionFromMatcher<T['fulfilled']>\r\n  | ActionFromMatcher<T['rejected']>\r\n\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action was created by an async thunk action creator.\r\n *\r\n * @public\r\n */\r\nexport function isAsyncThunkAction(): (\r\n  action: any\r\n) => action is UnknownAsyncThunkAction\r\n/**\r\n * A higher-order function that returns a function that may be used to check\r\n * whether an action belongs to one of the provided async thunk action creators.\r\n *\r\n * @param asyncThunks (optional) The async thunk action creators to match against.\r\n *\r\n * @public\r\n */\r\nexport function isAsyncThunkAction<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(\r\n  ...asyncThunks: AsyncThunks\r\n): (action: any) => action is ActionsFromAsyncThunk<AsyncThunks[number]>\r\n/**\r\n * Tests if `action` is a thunk action\r\n * @public\r\n */\r\nexport function isAsyncThunkAction(\r\n  action: any\r\n): action is UnknownAsyncThunkAction\r\nexport function isAsyncThunkAction<\r\n  AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]\r\n>(...asyncThunks: AsyncThunks | [any]) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action: any) =>\r\n      hasExpectedRequestMetadata(action, ['pending', 'fulfilled', 'rejected'])\r\n  }\r\n\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isAsyncThunkAction()(asyncThunks[0])\r\n  }\r\n\r\n  return (\r\n    action: any\r\n  ): action is ActionsFromAsyncThunk<AsyncThunks[number]> => {\r\n    // note: this type will be correct because we have at least 1 asyncThunk\r\n    const matchers: [Matcher<any>, ...Matcher<any>[]] = [] as any\r\n\r\n    for (const asyncThunk of asyncThunks) {\r\n      matchers.push(\r\n        asyncThunk.pending,\r\n        asyncThunk.rejected,\r\n        asyncThunk.fulfilled\r\n      )\r\n    }\r\n\r\n    const combinedMatcher = isAnyOf(...matchers)\r\n\r\n    return combinedMatcher(action)\r\n  }\r\n}\r\n","import type { AbortSignalWithReason } from './types'\r\n\r\nexport const assertFunction: (\r\n  func: unknown,\r\n  expected: string\r\n) => asserts func is (...args: unknown[]) => unknown = (\r\n  func: unknown,\r\n  expected: string\r\n) => {\r\n  if (typeof func !== 'function') {\r\n    throw new TypeError(`${expected} is not a function`)\r\n  }\r\n}\r\n\r\nexport const noop = () => {}\r\n\r\nexport const catchRejection = <T>(\r\n  promise: Promise<T>,\r\n  onError = noop\r\n): Promise<T> => {\r\n  promise.catch(onError)\r\n\r\n  return promise\r\n}\r\n\r\nexport const addAbortSignalListener = (\r\n  abortSignal: AbortSignal,\r\n  callback: (evt: Event) => void\r\n) => {\r\n  abortSignal.addEventListener('abort', callback, { once: true })\r\n}\r\n\r\n/**\r\n * Calls `abortController.abort(reason)` and patches `signal.reason`.\r\n * if it is not supported.\r\n *\r\n * At the time of writing `signal.reason` is available in FF chrome, edge node 17 and deno.\r\n * @param abortController\r\n * @param reason\r\n * @returns\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason\r\n */\r\nexport const abortControllerWithReason = <T>(\r\n  abortController: AbortController,\r\n  reason: T\r\n): void => {\r\n  type Consumer<T> = (val: T) => void\r\n\r\n  const signal = abortController.signal as AbortSignalWithReason<T>\r\n\r\n  if (signal.aborted) {\r\n    return\r\n  }\r\n\r\n  // Patch `reason` if necessary.\r\n  // - We use defineProperty here because reason is a getter of `AbortSignal.__proto__`.\r\n  // - We need to patch 'reason' before calling `.abort()` because listeners to the 'abort'\r\n  // event are are notified immediately.\r\n  if (!('reason' in signal)) {\r\n    Object.defineProperty(signal, 'reason', {\r\n      enumerable: true,\r\n      value: reason,\r\n      configurable: true,\r\n      writable: true,\r\n    })\r\n  }\r\n\r\n  ;(abortController.abort as Consumer<typeof reason>)(reason)\r\n}\r\n","import type { SerializedError } from '@reduxjs/toolkit'\r\n\r\nconst task = 'task'\r\nconst listener = 'listener'\r\nconst completed = 'completed'\r\nconst cancelled = 'cancelled'\r\n\r\n/* TaskAbortError error codes  */\r\nexport const taskCancelled = `task-${cancelled}` as const\r\nexport const taskCompleted = `task-${completed}` as const\r\nexport const listenerCancelled = `${listener}-${cancelled}` as const\r\nexport const listenerCompleted = `${listener}-${completed}` as const\r\n\r\nexport class TaskAbortError implements SerializedError {\r\n  name = 'TaskAbortError'\r\n  message: string\r\n  constructor(public code: string | undefined) {\r\n    this.message = `${task} ${cancelled} (reason: ${code})`\r\n  }\r\n}\r\n","import { TaskAbortError } from './exceptions'\r\nimport type { AbortSignalWithReason, TaskResult } from './types'\r\nimport { addAbortSignalListener, catchRejection } from './utils'\r\n\r\n/**\r\n * Synchronously raises {@link TaskAbortError} if the task tied to the input `signal` has been cancelled.\r\n * @param signal\r\n * @param reason\r\n * @see {TaskAbortError}\r\n */\r\nexport const validateActive = (signal: AbortSignal): void => {\r\n  if (signal.aborted) {\r\n    throw new TaskAbortError((signal as AbortSignalWithReason<string>).reason)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a promise that will reject {@link TaskAbortError} if the task is cancelled.\r\n * @param signal\r\n * @returns\r\n */\r\nexport const promisifyAbortSignal = (\r\n  signal: AbortSignalWithReason<string>\r\n): Promise<never> => {\r\n  return catchRejection(\r\n    new Promise<never>((_, reject) => {\r\n      const notifyRejection = () => reject(new TaskAbortError(signal.reason))\r\n\r\n      if (signal.aborted) {\r\n        notifyRejection()\r\n      } else {\r\n        addAbortSignalListener(signal, notifyRejection)\r\n      }\r\n    })\r\n  )\r\n}\r\n\r\n/**\r\n * Runs a task and returns promise that resolves to {@link TaskResult}.\r\n * Second argument is an optional `cleanUp` function that always runs after task.\r\n *\r\n * **Note:** `runTask` runs the executor in the next microtask.\r\n * @returns\r\n */\r\nexport const runTask = async <T>(\r\n  task: () => Promise<T>,\r\n  cleanUp?: () => void\r\n): Promise<TaskResult<T>> => {\r\n  try {\r\n    await Promise.resolve()\r\n    const value = await task()\r\n    return {\r\n      status: 'ok',\r\n      value,\r\n    }\r\n  } catch (error: any) {\r\n    return {\r\n      status: error instanceof TaskAbortError ? 'cancelled' : 'rejected',\r\n      error,\r\n    }\r\n  } finally {\r\n    cleanUp?.()\r\n  }\r\n}\r\n\r\n/**\r\n * Given an input `AbortSignal` and a promise returns another promise that resolves\r\n * as soon the input promise is provided or rejects as soon as\r\n * `AbortSignal.abort` is `true`.\r\n * @param signal\r\n * @returns\r\n */\r\nexport const createPause = <T>(signal: AbortSignal) => {\r\n  return (promise: Promise<T>): Promise<T> => {\r\n    return catchRejection(\r\n      Promise.race([promisifyAbortSignal(signal), promise]).then((output) => {\r\n        validateActive(signal)\r\n        return output\r\n      })\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Given an input `AbortSignal` and `timeoutMs` returns a promise that resolves\r\n * after `timeoutMs` or rejects as soon as `AbortSignal.abort` is `true`.\r\n * @param signal\r\n * @returns\r\n */\r\nexport const createDelay = (signal: AbortSignal) => {\r\n  const pause = createPause<void>(signal)\r\n  return (timeoutMs: number): Promise<void> => {\r\n    return pause(new Promise<void>((resolve) => setTimeout(resolve, timeoutMs)))\r\n  }\r\n}\r\n","import type { Dispatch, AnyAction, MiddlewareAPI } from 'redux'\r\nimport type { ThunkDispatch } from 'redux-thunk'\r\nimport { createAction } from '../createAction'\r\nimport { nanoid } from '../nanoid'\r\n\r\nimport type {\r\n  ListenerMiddleware,\r\n  ListenerMiddlewareInstance,\r\n  AddListenerOverloads,\r\n  AnyListenerPredicate,\r\n  CreateListenerMiddlewareOptions,\r\n  TypedAddListener,\r\n  TypedCreateListenerEntry,\r\n  FallbackAddListenerOptions,\r\n  ListenerEntry,\r\n  ListenerErrorHandler,\r\n  UnsubscribeListener,\r\n  TakePattern,\r\n  ListenerErrorInfo,\r\n  ForkedTaskExecutor,\r\n  ForkedTask,\r\n  TypedRemoveListener,\r\n  TaskResult,\r\n  AbortSignalWithReason,\r\n  UnsubscribeListenerOptions,\r\n} from './types'\r\nimport {\r\n  abortControllerWithReason,\r\n  addAbortSignalListener,\r\n  assertFunction,\r\n  catchRejection,\r\n} from './utils'\r\nimport {\r\n  listenerCancelled,\r\n  listenerCompleted,\r\n  TaskAbortError,\r\n  taskCancelled,\r\n  taskCompleted,\r\n} from './exceptions'\r\nimport {\r\n  runTask,\r\n  promisifyAbortSignal,\r\n  validateActive,\r\n  createPause,\r\n  createDelay,\r\n} from './task'\r\nexport { TaskAbortError } from './exceptions'\r\nexport type {\r\n  ListenerEffect,\r\n  ListenerMiddleware,\r\n  ListenerEffectAPI,\r\n  ListenerMiddlewareInstance,\r\n  CreateListenerMiddlewareOptions,\r\n  ListenerErrorHandler,\r\n  TypedStartListening,\r\n  TypedAddListener,\r\n  TypedStopListening,\r\n  TypedRemoveListener,\r\n  UnsubscribeListener,\r\n  UnsubscribeListenerOptions,\r\n  ForkedTaskExecutor,\r\n  ForkedTask,\r\n  ForkedTaskAPI,\r\n  AsyncTaskExecutor,\r\n  SyncTaskExecutor,\r\n  TaskCancelled,\r\n  TaskRejected,\r\n  TaskResolved,\r\n  TaskResult,\r\n} from './types'\r\n\r\n//Overly-aggressive byte-shaving\r\nconst { assign } = Object\r\n/**\r\n * @internal\r\n */\r\nconst INTERNAL_NIL_TOKEN = {} as const\r\n\r\nconst alm = 'listenerMiddleware' as const\r\n\r\nconst createFork = (parentAbortSignal: AbortSignalWithReason<unknown>) => {\r\n  const linkControllers = (controller: AbortController) =>\r\n    addAbortSignalListener(parentAbortSignal, () =>\r\n      abortControllerWithReason(controller, parentAbortSignal.reason)\r\n    )\r\n\r\n  return <T>(taskExecutor: ForkedTaskExecutor<T>): ForkedTask<T> => {\r\n    assertFunction(taskExecutor, 'taskExecutor')\r\n    const childAbortController = new AbortController()\r\n\r\n    linkControllers(childAbortController)\r\n\r\n    const result = runTask<T>(\r\n      async (): Promise<T> => {\r\n        validateActive(parentAbortSignal)\r\n        validateActive(childAbortController.signal)\r\n        const result = (await taskExecutor({\r\n          pause: createPause(childAbortController.signal),\r\n          delay: createDelay(childAbortController.signal),\r\n          signal: childAbortController.signal,\r\n        })) as T\r\n        validateActive(childAbortController.signal)\r\n        return result\r\n      },\r\n      () => abortControllerWithReason(childAbortController, taskCompleted)\r\n    )\r\n\r\n    return {\r\n      result: createPause<TaskResult<T>>(parentAbortSignal)(result),\r\n      cancel() {\r\n        abortControllerWithReason(childAbortController, taskCancelled)\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nconst createTakePattern = <S>(\r\n  startListening: AddListenerOverloads<\r\n    UnsubscribeListener,\r\n    S,\r\n    Dispatch<AnyAction>\r\n  >,\r\n  signal: AbortSignal\r\n): TakePattern<S> => {\r\n  /**\r\n   * A function that takes a ListenerPredicate and an optional timeout,\r\n   * and resolves when either the predicate returns `true` based on an action\r\n   * state combination or when the timeout expires.\r\n   * If the parent listener is canceled while waiting, this will throw a\r\n   * TaskAbortError.\r\n   */\r\n  const take = async <P extends AnyListenerPredicate<S>>(\r\n    predicate: P,\r\n    timeout: number | undefined\r\n  ) => {\r\n    validateActive(signal)\r\n\r\n    // Placeholder unsubscribe function until the listener is added\r\n    let unsubscribe: UnsubscribeListener = () => {}\r\n\r\n    const tuplePromise = new Promise<[AnyAction, S, S]>((resolve) => {\r\n      // Inside the Promise, we synchronously add the listener.\r\n      unsubscribe = startListening({\r\n        predicate: predicate as any,\r\n        effect: (action, listenerApi): void => {\r\n          // One-shot listener that cleans up as soon as the predicate passes\r\n          listenerApi.unsubscribe()\r\n          // Resolve the promise with the same arguments the predicate saw\r\n          resolve([\r\n            action,\r\n            listenerApi.getState(),\r\n            listenerApi.getOriginalState(),\r\n          ])\r\n        },\r\n      })\r\n    })\r\n\r\n    const promises: (Promise<null> | Promise<[AnyAction, S, S]>)[] = [\r\n      promisifyAbortSignal(signal),\r\n      tuplePromise,\r\n    ]\r\n\r\n    if (timeout != null) {\r\n      promises.push(\r\n        new Promise<null>((resolve) => setTimeout(resolve, timeout, null))\r\n      )\r\n    }\r\n\r\n    try {\r\n      const output = await Promise.race(promises)\r\n\r\n      validateActive(signal)\r\n      return output\r\n    } finally {\r\n      // Always clean up the listener\r\n      unsubscribe()\r\n    }\r\n  }\r\n\r\n  return ((predicate: AnyListenerPredicate<S>, timeout: number | undefined) =>\r\n    catchRejection(take(predicate, timeout))) as TakePattern<S>\r\n}\r\n\r\nconst getListenerEntryPropsFrom = (options: FallbackAddListenerOptions) => {\r\n  let { type, actionCreator, matcher, predicate, effect } = options\r\n\r\n  if (type) {\r\n    predicate = createAction(type).match\r\n  } else if (actionCreator) {\r\n    type = actionCreator!.type\r\n    predicate = actionCreator.match\r\n  } else if (matcher) {\r\n    predicate = matcher\r\n  } else if (predicate) {\r\n    // pass\r\n  } else {\r\n    throw new Error(\r\n      'Creating or removing a listener requires one of the known fields for matching an action'\r\n    )\r\n  }\r\n\r\n  assertFunction(effect, 'options.listener')\r\n\r\n  return { predicate, type, effect }\r\n}\r\n\r\n/** Accepts the possible options for creating a listener, and returns a formatted listener entry */\r\nexport const createListenerEntry: TypedCreateListenerEntry<unknown> = (\r\n  options: FallbackAddListenerOptions\r\n) => {\r\n  const { type, predicate, effect } = getListenerEntryPropsFrom(options)\r\n\r\n  const id = nanoid()\r\n  const entry: ListenerEntry<unknown> = {\r\n    id,\r\n    effect,\r\n    type,\r\n    predicate,\r\n    pending: new Set<AbortController>(),\r\n    unsubscribe: () => {\r\n      throw new Error('Unsubscribe not initialized')\r\n    },\r\n  }\r\n\r\n  return entry\r\n}\r\n\r\nconst createClearListenerMiddleware = (\r\n  listenerMap: Map<string, ListenerEntry>\r\n) => {\r\n  return () => {\r\n    listenerMap.forEach(cancelActiveListeners)\r\n\r\n    listenerMap.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * Safely reports errors to the `errorHandler` provided.\r\n * Errors that occur inside `errorHandler` are notified in a new task.\r\n * Inspired by [rxjs reportUnhandledError](https://github.com/ReactiveX/rxjs/blob/6fafcf53dc9e557439b25debaeadfd224b245a66/src/internal/util/reportUnhandledError.ts)\r\n * @param errorHandler\r\n * @param errorToNotify\r\n */\r\nconst safelyNotifyError = (\r\n  errorHandler: ListenerErrorHandler,\r\n  errorToNotify: unknown,\r\n  errorInfo: ListenerErrorInfo\r\n): void => {\r\n  try {\r\n    errorHandler(errorToNotify, errorInfo)\r\n  } catch (errorHandlerError) {\r\n    // We cannot let an error raised here block the listener queue.\r\n    // The error raised here will be picked up by `window.onerror`, `process.on('error')` etc...\r\n    setTimeout(() => {\r\n      throw errorHandlerError\r\n    }, 0)\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport const addListener = createAction(\r\n  `${alm}/add`\r\n) as TypedAddListener<unknown>\r\n\r\n/**\r\n * @public\r\n */\r\nexport const clearAllListeners = createAction(`${alm}/removeAll`)\r\n\r\n/**\r\n * @public\r\n */\r\nexport const removeListener = createAction(\r\n  `${alm}/remove`\r\n) as TypedRemoveListener<unknown>\r\n\r\nconst defaultErrorHandler: ListenerErrorHandler = (...args: unknown[]) => {\r\n  console.error(`${alm}/error`, ...args)\r\n}\r\n\r\nconst cancelActiveListeners = (\r\n  entry: ListenerEntry<unknown, Dispatch<AnyAction>>\r\n) => {\r\n  entry.pending.forEach((controller) => {\r\n    abortControllerWithReason(controller, listenerCancelled)\r\n  })\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function createListenerMiddleware<\r\n  S = unknown,\r\n  D extends Dispatch<AnyAction> = ThunkDispatch<S, unknown, AnyAction>,\r\n  ExtraArgument = unknown\r\n>(middlewareOptions: CreateListenerMiddlewareOptions<ExtraArgument> = {}) {\r\n  const listenerMap = new Map<string, ListenerEntry>()\r\n  const { extra, onError = defaultErrorHandler } = middlewareOptions\r\n\r\n  assertFunction(onError, 'onError')\r\n\r\n  const insertEntry = (entry: ListenerEntry) => {\r\n    entry.unsubscribe = () => listenerMap.delete(entry!.id)\r\n\r\n    listenerMap.set(entry.id, entry)\r\n    return (cancelOptions?: UnsubscribeListenerOptions) => {\r\n      entry.unsubscribe()\r\n      if (cancelOptions?.cancelActive) {\r\n        cancelActiveListeners(entry)\r\n      }\r\n    }\r\n  }\r\n\r\n  const findListenerEntry = (\r\n    comparator: (entry: ListenerEntry) => boolean\r\n  ): ListenerEntry | undefined => {\r\n    for (const entry of listenerMap.values()) {\r\n      if (comparator(entry)) {\r\n        return entry\r\n      }\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  const startListening = (options: FallbackAddListenerOptions) => {\r\n    let entry = findListenerEntry(\r\n      (existingEntry) => existingEntry.effect === options.effect\r\n    )\r\n\r\n    if (!entry) {\r\n      entry = createListenerEntry(options as any)\r\n    }\r\n\r\n    return insertEntry(entry)\r\n  }\r\n\r\n  const stopListening = (\r\n    options: FallbackAddListenerOptions & UnsubscribeListenerOptions\r\n  ): boolean => {\r\n    const { type, effect, predicate } = getListenerEntryPropsFrom(options)\r\n\r\n    const entry = findListenerEntry((entry) => {\r\n      const matchPredicateOrType =\r\n        typeof type === 'string'\r\n          ? entry.type === type\r\n          : entry.predicate === predicate\r\n\r\n      return matchPredicateOrType && entry.effect === effect\r\n    })\r\n\r\n    if (entry) {\r\n      entry.unsubscribe()\r\n      if (options.cancelActive) {\r\n        cancelActiveListeners(entry)\r\n      }\r\n    }\r\n\r\n    return !!entry\r\n  }\r\n\r\n  const notifyListener = async (\r\n    entry: ListenerEntry<unknown, Dispatch<AnyAction>>,\r\n    action: AnyAction,\r\n    api: MiddlewareAPI,\r\n    getOriginalState: () => S\r\n  ) => {\r\n    const internalTaskController = new AbortController()\r\n    const take = createTakePattern(\r\n      startListening,\r\n      internalTaskController.signal\r\n    )\r\n\r\n    try {\r\n      entry.pending.add(internalTaskController)\r\n      await Promise.resolve(\r\n        entry.effect(\r\n          action,\r\n          // Use assign() rather than ... to avoid extra helper functions added to bundle\r\n          assign({}, api, {\r\n            getOriginalState,\r\n            condition: (\r\n              predicate: AnyListenerPredicate<any>,\r\n              timeout?: number\r\n            ) => take(predicate, timeout).then(Boolean),\r\n            take,\r\n            delay: createDelay(internalTaskController.signal),\r\n            pause: createPause<any>(internalTaskController.signal),\r\n            extra,\r\n            signal: internalTaskController.signal,\r\n            fork: createFork(internalTaskController.signal),\r\n            unsubscribe: entry.unsubscribe,\r\n            subscribe: () => {\r\n              listenerMap.set(entry.id, entry)\r\n            },\r\n            cancelActiveListeners: () => {\r\n              entry.pending.forEach((controller, _, set) => {\r\n                if (controller !== internalTaskController) {\r\n                  abortControllerWithReason(controller, listenerCancelled)\r\n                  set.delete(controller)\r\n                }\r\n              })\r\n            },\r\n          })\r\n        )\r\n      )\r\n    } catch (listenerError) {\r\n      if (!(listenerError instanceof TaskAbortError)) {\r\n        safelyNotifyError(onError, listenerError, {\r\n          raisedBy: 'effect',\r\n        })\r\n      }\r\n    } finally {\r\n      abortControllerWithReason(internalTaskController, listenerCompleted) // Notify that the task has completed\r\n      entry.pending.delete(internalTaskController)\r\n    }\r\n  }\r\n\r\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap)\r\n\r\n  const middleware: ListenerMiddleware<S, D, ExtraArgument> =\r\n    (api) => (next) => (action) => {\r\n      if (addListener.match(action)) {\r\n        return startListening(action.payload)\r\n      }\r\n\r\n      if (clearAllListeners.match(action)) {\r\n        clearListenerMiddleware()\r\n        return\r\n      }\r\n\r\n      if (removeListener.match(action)) {\r\n        return stopListening(action.payload)\r\n      }\r\n\r\n      // Need to get this state _before_ the reducer processes the action\r\n      let originalState: S | typeof INTERNAL_NIL_TOKEN = api.getState()\r\n\r\n      // `getOriginalState` can only be called synchronously.\r\n      // @see https://github.com/reduxjs/redux-toolkit/discussions/1648#discussioncomment-1932820\r\n      const getOriginalState = (): S => {\r\n        if (originalState === INTERNAL_NIL_TOKEN) {\r\n          throw new Error(\r\n            `${alm}: getOriginalState can only be called synchronously`\r\n          )\r\n        }\r\n\r\n        return originalState as S\r\n      }\r\n\r\n      let result: unknown\r\n\r\n      try {\r\n        // Actually forward the action to the reducer before we handle listeners\r\n        result = next(action)\r\n\r\n        if (listenerMap.size > 0) {\r\n          let currentState = api.getState()\r\n          // Work around ESBuild+TS transpilation issue\r\n          const listenerEntries = Array.from(listenerMap.values())\r\n          for (let entry of listenerEntries) {\r\n            let runListener = false\r\n\r\n            try {\r\n              runListener = entry.predicate(action, currentState, originalState)\r\n            } catch (predicateError) {\r\n              runListener = false\r\n\r\n              safelyNotifyError(onError, predicateError, {\r\n                raisedBy: 'predicate',\r\n              })\r\n            }\r\n\r\n            if (!runListener) {\r\n              continue\r\n            }\r\n\r\n            notifyListener(entry, action, api, getOriginalState)\r\n          }\r\n        }\r\n      } finally {\r\n        // Remove `originalState` store from this scope.\r\n        originalState = INTERNAL_NIL_TOKEN\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n  return {\r\n    middleware,\r\n    startListening,\r\n    stopListening,\r\n    clearListeners: clearListenerMiddleware,\r\n  } as ListenerMiddlewareInstance<S, D, ExtraArgument>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}